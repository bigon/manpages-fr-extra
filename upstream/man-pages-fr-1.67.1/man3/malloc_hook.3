.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" Distributed under GPL
.\" Heavily based on glibc documentation
.\" Polished, added docs, removed glibc doc bug, 2002-07-20, aeb
.\"
.\" Traduction Christophe Blaess <ccb@club-internet.fr>
.\" Màj 21/07/2003 LDP-1.56
.\" Màj 08/07/2005 LDP-1.63
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH MALLOC_HOOK 3 "20 juillet 2002" LDP "Manuel du programmeur Linux"
.SH NOM
__malloc_hook, __malloc_initialize_hook, __memalign_hook, __free_hook, __realloc_hook, __after_morecore_hook \- Variables de débogage de malloc.
.SH SYNOPSIS
.sp
.BR "#include <malloc.h>"
.sp
.BI "void *(*__malloc_hook)(size_t " size ,
.BI "const void *" caller );
.sp
.BI "void *(*__realloc_hook)(void *" ptr ,
.BI "size_t " size ,
.BI "const void *" caller );
.sp
.BI "void *(*__memalign_hook)(size_t " alignment ,
.BI "size_t " size ,
.BI "const void *" caller );
.sp
.BI "void (*__free_hook)(void *" ptr ,
.BI "const void *" caller );
.sp
.BI "void (*__malloc_initialize_hook)(void);"
.sp
.BI "void (*__after_morecore_hook)(void);"
.SH DESCRIPTION
La bibliothèque C GNU vous permet de modifier le comportement de
.BR malloc (),
.BR realloc ()
et
.BR free ()
en fixant les points d'entrée des routines. Vous pouvez utiliser ces points
pour faciliter le débogage des programmes utilisant des allocations de mémoire
dynamique par exemple.
.LP
La variable
.B __malloc_initialize_hook
pointe vers une fonction qui est appelée une seule fois à l'initialisation de
malloc. C'est une variable libre qui peut être modifiée par l'application avec
une déclaration comme celle-ci\ :
.br
.nf
    void (*__malloc_initialize_hook)(void) = my_init_hook;
.fi
.br
À présent, la fonction
.BR my_init_hook ()
pourra faire toute l'initialisation des routines.
.LP
Les quatre fonctions pointées par
.BR __malloc_hook ,
.BR __realloc_hook ,
.BR __memalign_hook ,
.BR __free_hook
ont des prototypes semblables à ceux des fonctions
.BR malloc (),
.BR realloc (),
.BR memalign (),
.BR free (),
respectivement, avec un argument final supplémentaire
.I caller
qui fournit l'adresse du code appelant
.BR malloc (),
etc.
.LP
La variable
.B __after_morecore_hook
pointe sur une fonction qui est invoquée à chaque fois que
.BR sbrk ()
a été appelée pour augmenter le segment de données.
.SH "EXEMPLE"
Voici un court exemple d'utilisation de ces variables.
.sp
.nf
#include <stdio.h>
#include <malloc.h>

/* Prototypes de nos routines */
static void my_init_hook(void);
static void *my_malloc_hook(size_t, const void *);

/* Variables pour sauver la routine originale */
static void *(*old_malloc_hook)(size_t, const void *);

/* Écrasement de la routine d'initialisaiton glibg */
void (*__malloc_initialize_hook) (void) = my_init_hook;

static void
my_init_hook(void) {
    old_malloc_hook = __malloc_hook;
    __malloc_hook = my_malloc_hook;
}

static void *
my_malloc_hook (size_t size, const void *caller) {
    void *result;

    /* Replacer la routine originale */
    __malloc_hook = old_malloc_hook;

    /* Appel de la routine originale) */
    result = malloc (size);

    /* Sauver la routine originale */
    old_malloc_hook = __malloc_hook;

    /* `printf' peut appeler `malloc'... à protéger. */
    printf ("malloc(%u) called from %p returns %p\n",
        (unsigned int) size, caller, result);

    /* Replacer notre routine */
    __malloc_hook = my_malloc_hook;

    return result;
}
.fi
.SH "VOIR AUSSI"
.BR mallinfo (3),
.BR malloc (3),
.BR mtrace (3),
.BR mcheck (3)
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 21\ juillet\ 2003
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 3\ malloc_hook\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
