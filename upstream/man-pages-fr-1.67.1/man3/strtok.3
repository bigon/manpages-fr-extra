.\" Copyright (C) 1996 Andries Brouwer (aeb@cwi.nl)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Rewritten old page, 960210, aeb@cwi.nl
.\" Updated, added strtok_r. 2000-02-13 Nicolás Lichtmaier <nick@debian.org>
.\"
.\" Traduction 10/11/1996 par Christophe Blaess (ccb@club-internet.fr)
.\" Màj 11/07/2000
.\" Màj 21/07/2003 LDP-1.56
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH STRTOK 3 "13 février 2000" LDP "Manuel du programmeur Linux"
.SH NOM
strtok, strtok_r \- Extraire des mots d'une chaîne.
.SH SYNOPSIS
.nf
.B #include <string.h>
.sp
.BI "char *strtok (char *" s ", const char *" delim );
.sp
.BI "char *strtok_r (char *" s ", const char *" delim ", char **" ptrptr);
.fi
.SH DESCRIPTION
Un élément lexical (token) est une chaîne non vide de caractères qui
n'appartiennent
pas à la chaîne \fIdelim\fP, suivie de \e0 ou d'un caractère appartenant
à \fIdelim\fP.
.PP
La fonction \fBstrtok\fP() peut être utilisée pour scinder \fIs\fP
en éléments lexicaux. Le premier appel à \fBstrtok\fP() doit fournir \fIs\fP
comme premier argument. Les appels ultérieurs doivent fournir NULL
comme premier argument. Chaque appel renvoie un pointeur sur l'élément
lexical suivant, ou NULL quand il n'y en a plus.
.PP
Si un token se termine par un délimiteur, le caractère de délimitation est
surchargé par un \e0 et un pointeur sur le caractère suivant est
mémorisé pour l'appel suivant à \fBstrtok\fP().
La chaîne de séparateurs \fIdelim\fP peut être différente à chaque appel.
.PP
La fonction
.BR strtok_r ()
est identique à
.BR strtok ()
mais au lieu d'utiliser un tampon statique, elle emploie un pointeur sur
un tampon «\ char *\ » alloué par l'utilisateur. Ce pointeur transmis comme
paramètre
.I ptrptr
doit être toujours le même durant l'analyse d'une chaîne.
.SH "BOGUES"
Évitez au maximum d'utiliser cette fonction. Sinon, prenez note des informations
suivantes\ :
.PP
.RS
Cette fonction modifie son premier argument.
.PP
Les caractères de séparation sont surchargés, leur identité est donc perdue.
.PP
Cette fonction ne doit pas être invoquée sur une chaîne constante.
.PP
La fonction
.BR strtok ()
utilise un tampon statique et n'est donc pas sûre dans un contexte
multithread. Dans ce cas il vaut mieux utiliser
.BR strtok_r ().
.SH "VALEUR RENVOYÉE"
La fonction \fBstrtok\fP() renvoie un pointeur sur l'élément lexical suivant,
ou NULL s'il n'y en a plus.
.SH "CONFORMITÉ"
.TP
strtok()
SVID 3, POSIX, BSD 4.3, ISO 9899
.TP
strtok_r()
POSIX.1c
.SH "VOIR AUSSI"
.BR index (3),
.BR memchr (3),
.BR rindex (3),
.BR strchr (3),
.BR strpbrk (3),
.BR strsep (3),
.BR strspn (3),
.BR strstr (3)
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 10\ novembre\ 1996
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 3\ strtok\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
