.\" Copyright (c) 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"	From: @(#)err.3	8.1 (Berkeley) 6/9/93
.\" $FreeBSD: src/lib/libc/gen/err.3,v 1.11.2.5 2001/08/17 15:42:32 ru Exp $
.\"
.\" Traduction Christophe Blaess <ccb@club-internet.fr>
.\" Màj 21/07/2003 LDP-1.56
.\" Màj 27/06/2005 LDP-1.60
.\" Màj 14/12/2005 LDP-1.65
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.Dd "6 mars 1999"
.Dt ERR 3
.Os
.Sh NAME
.Nm err , verr , errx , verrx , warn , vwarn , warnx , vwarnx
.Nd Messages d'erreur formatés.
.Sh SYNOPSIS
.Fd #include <err.h>
.Ft void
.Fn err "int eval" "const char *fmt" "..."
.Ft void
.Fn errx "int eval" "const char *fmt" "..."
.Ft void
.Fn warn "const char *fmt" "..."
.Ft void
.Fn warnx "const char *fmt" "..."
.Fd #include <stdarg.h>
.Ft void
.Fn verr "int eval" "const char *fmt" "va_list args"
.Ft void
.Fn verrx "int eval" "const char *fmt" "va_list args"
.Ft void
.Fn vwarn "const char *fmt" "va_list args"
.Ft void
.Fn vwarnx "const char *fmt" "va_list args"
.Sh DESCRIPTION
Les fonctions de la famille
.Fn err
et
.Fn warn
affichent un message d'erreur formaté sur la sortie d'erreur
standard.
Dans tous les cas, elles affichent le nom du programme, un deux-points, et
une espace.
Si l'argument
.Fa fmt
n'est pas NULL, le message est affiché avec un format de type
.Xr printf 3 .
La sortie se termine par un saut de ligne.
.Pp
Les fonctions
.Fn err ,
.Fn verr ,
.Fn warn ,
et
.Fn vwarn
ajoutent un message d'erreur obtenu avec
.Xr strerror 3
à partir d'un code transmis ou de la variable globale
.Va errno ,
précédé d'un autre deux-points et d'un espace, sauf si l'argument
.Fa fmt
est
.Dv NULL .
.Pp
Les fonctions
.Fn err ,
.Fn verr ,
.Fn warn ,
utilisent
.Fn vwarn
la variable globale
.Va errno
pour rechercher le message d'erreur.
.Pp
Les fonctions
.Fn errx
et
.Fn warnx
n'ajoutent pas de message d'erreur.
.Pp
Les fonctions
.Fn err ,
.Fn verr ,
.Fn errx ,
et
.Fn verrx
ne reviennent pas, elles terminent le programme avec le code de retour
.Fa eval .
.Sh EXEMPLES
Afficher la chaîne d'information sur errno et sortir\ :
.Bd -literal -offset indent
if ((p = malloc(size)) == NULL)
	err(1, NULL);
if ((fd = open(file_name, O_RDONLY, 0)) == -1)
	err(1, "%s", file_name);
.Ed
.Pp
Afficher un message d'erreur et sortir\ :
.Bd -literal -offset indent
if (tm.tm_hour < START_TIME)
	errx(1, "too early, wait until %s", start_time_string);
.Ed
.Pp
Prévenir d'une erreur\ :
.Bd -literal -offset indent
if ((fd = open(raw_device, O_RDONLY, 0)) == -1)
	warnx("%s: %s: trying the block device",
	    raw_device, strerror(errno));
if ((fd = open(block_device, O_RDONLY, 0)) == -1)
	err(1, "%s", block_device);
.Ed
.Sh "VOIR AUSSI"
.Xr exit 3 ,
.Xr printf 3 ,
.Xr perror 3 ,
.Xr strerror 3
.Sh HISTORIQUE
Les fonctions
.Fn err
et
.Fn warn
sont apparues dans
.Bx 4.4 .
.Sh TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 21\ juillet\ 2003
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 3\ err\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
