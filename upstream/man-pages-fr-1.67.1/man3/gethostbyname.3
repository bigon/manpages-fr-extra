.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified 1993-05-22, David Metcalfe
.\" Modified 1993-07-25, Rik Faith (faith@cs.unc.edu)
.\" Modified 1997-02-16, Andries Brouwer (aeb@cwi.nl)
.\" Modified 1998-12-21, Andries Brouwer (aeb@cwi.nl)
.\" Modified 2000-08-12, Andries Brouwer (aeb@cwi.nl)
.\" Modified 2001-05-19, Andries Brouwer (aeb@cwi.nl)
.\" Modified 2002-08-05, Michael Kerrisk
.\"
.\" Traduction 26/10/1996 par Christophe Blaess (ccb@club-internet.fr)
.\" Màj 12/06/1997
.\" Màj 09/04/1999 LDP-1.22
.\" Màj 05/05/1999 LDP-1.23
.\" Màj 30/08/2000 LDP-1.31
.\" Màj 07/06/2001 LDP-1.37
.\" Màj 25/01/2002 LDP-1.47
.\" Màj 21/07/2003 LDP-1.56
.\" Màj 04/07/2005 LDP-1.61
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH GETHOSTBYNAME 3 "5 août 2002" LDP "Manuel du programmeur Linux"
.SH NOM
gethostbyname, gethostbyaddr, sethostent, endhostent, herror, hstrerror \- Obtenir des informations concernant le réseau.
.SH SYNOPSIS
.nf
.B #include <netdb.h>
.B extern int h_errno;
.sp
.BI "struct hostent *gethostbyname(const char *" name );
.sp
.B #include <sys/socket.h> "   " /* pour avoir AF_INET */
.BI "struct hostent *gethostbyaddr(const char *" addr ,
.BI "  int " len ", int " type );
.sp
.BI "void sethostent(int " stayopen );
.sp
.B void endhostent(void);
.sp
.BI "void herror(const char *" s );
.sp
.BI "const char * hstrerror(int " err );
.sp 2
/* extensions GNU */
.br
.BI "struct hostent *gethostbyname2(const char *" name ", int " af );
.sp
.BI "int gethostbyname_r (const char *" name ,
.BI "  struct hostent *" ret ", char *" buf ", size_t " buflen ,
.BI "  struct hostent **" result ", int *" h_errnop );
.sp
.BI "int gethostbyname2_r (const char *" name ", int " af,
.BI "  struct hostent *" ret ", char *" buf ", size_t " buflen ,
.BI "  struct hostent **" result ", int *" h_errnop );
.fi
.SH DESCRIPTION
La fonction \fBgethostbyname\fP() renvoie une structure de type \fIhostent\fP
pour l'hôte \fIname\fP. La chaîne \fIname\fP est soit un nom d'hôte, soit
une adresse IPv4 en notation pointée standard, soit une adresse IPv6
avec la notation points-virgules et points (Cf RFC 1884 pour la description
des adresses IPv6).
Si
.I name
est une adresse IPv4 ou IPv6, aucune recherche supplémentaire n'a lieu et
.BR gethostbyname ()
copie simplement la chaîne
.I name
dans le champ
.I h_name
et le champ équivalent
.I struct in_addr
dans le champ
.I h_addr_list[0]
de la structure
.I hostent
renvoyée.

Si \fIname\fP ne se termine pas par un point, et si la variable d'environnement
\fBHOSTALIASES\fP est configurée, le fichier d'alias indiqué par
\fBHOSTALIASES\fP sera d'abord parcouru à la recherche de \fIname\fP
(voir
.BR hostname (7)
pour le format du fichier).
Le domaine courant et ses parents sont parcourus si \fIname\fP ne se termine
pas par un point.
.PP
La fonction \fBgethostbyaddr\fP() renvoie une structure du type \fIhostent\fP
pour l'hôte d'adresse \fIaddr\fP. Cette adresse est de longueur \fIlen\fP et
du \fItype\fP donné. Les types d'adresse valides sont
.B AF_INET
et
.BR AF_INET6 .
.PP
La fonction \fBsethostent\fP() indique, si \fIstayopen\fP est vrai (vaut 1),
qu'une socket TCP connectée doit être utilisée pour interroger le serveur de
noms et que la connexion doit rester ouverte durant les demandes successives.
Sinon l'interrogation utilisera des datagrammes UDP.
.PP
La fonction \fBendhostent\fP() ferme la socket TCP connectée utilisée pour
interroger le serveur de noms du domaine.
.PP
La fonction (obsolète) \fBherror\fP() affiche le message d'erreur associé avec la valeur
courante de \fIh_errno\fP sur la sortie standard stderr.
.PP
La fonction (obsolète) \fBherror\fP() reçoit un numéro d'erreur en argument
(typiquement \fIh_errno\fP) et renvoie la chaîne de message d'erreur.
.PP
Les interrogations du serveur de noms effectuées par \fBgethostbyname\fP() et
\fBgethostbyaddr\fP() utilisent les éléments suivants\ : le serveur de noms
\fBnamed\fP(8), les lignes de \fI/etc/hosts\fP, et l'annuaire Network
Information Service (NIS ou YP), suivant le contenu de la ligne
\fIorder\fP du fichier \fI/etc/host.conf\fP. (Voir
.BR resolv+ (8)).
L'action par défaut consiste à interroger \fBnamed\fP(8), puis
\fI/etc/hosts\fP.
.PP
La structure \fIhostent\fP est définie ainsi dans \fI<netdb.h>\fP\ :
.sp
.RS
.nf
.ne 7
.ta 8n 16n 32n
struct hostent {
   char    *h_name;       /* Nom officiel de l'hôte.   */
   char   **h_aliases;    /* Liste d'alias.            */
   int      h_addrtype;   /* Type d'adresse de l'hôte. */
   int      h_length;     /* Longueur de l'adresse.    */
   char   **h_addr_list;  /* Liste d'adresses.         */
}
#define h_addr  h_addr_list[0] /* pour compatibilité.  */
.ta
.fi
.RE
.PP
Les membres de la structure \fIhostent\fP sont\ :
.TP
.I h_name
Nom officiel de l'hôte.
.TP
.I h_aliases
Une table, terminée par zéro, d'alternatives au nom officiel de l'hôte.
.TP
.I h_addrtype
Le type d'adresse\ : toujours
.B AF_INET
ou
.BR AF_INET6 .

.TP
.I h_length
La longueur, en octets, de l'adresse.
.TP
.I h_addr_list
Une table, terminée par zéro, d'adresses réseau pour l'hôte, avec l'ordre
des octets du réseau.
.TP
.I h_addr
La première adresse dans \fIh_addr_list\fP pour respecter la compatibilite ascendante.
.SH "VALEUR RENVOYÉE"
Les fonctions \fBgethostbyname\fP() et \fBgethostbyaddr\fP() renvoient un
pointeur sur la structure \fIhostent\fP, ou bien un pointeur NULL si une
erreur se produit, auquel cas \fIh_errno\fP contient le code d'erreur.
Lorsqu'elle n'est pas NULL, la valeur de retour peut pointer sur une donnée
statique. Voir les notes plus loin.
.SH "ERREURS"
La variable \fIh_errno\fP peut prendre les valeurs suivantes\ :
.TP
.B HOST_NOT_FOUND
L'hôte indiqué est inconnu.
.TP
.BR NO_ADDRESS " ou " NO_DATA
Le nom est valide mais ne possède pas d'adresse IP.
.TP
.B NO_RECOVERY
Une erreur fatale du serveur de noms est apparue.
.TP
.B TRY_AGAIN
Une erreur temporaire du serveur de noms est apparue, essayez un peu plus tard.
.SH FICHIERS
.TP
.I /etc/host.conf
Fichier de configuration de la résolution de noms.
.TP
.I /etc/hosts
Base de données des hôtes.
.SH "CONFORMITÉ"
BSD 4.3
.SH NOTES
Les spécifications SUS-v2 déclarent \- à tort \- le paramètre
.I len
de
.BR gethostbyaddr ()
de type
.IR size_t .
(Ceci est erroné car il doit obligatoirement être un
.IR int ,
ce que
.I size_t
n'est pas toujours. POSIX 1003.1-2001 le déclare
.IR socklen_t ,
ce qui est correct).
.LP
Les fonctions
.BR gethostbyname ()
et
.BR gethostbyaddr ()
peuvent renvoyer des pointeurs sur des données statiques susceptibles d'être
écrasées d'un appel à l'autre. Copier la structure
.I struct hostent
ne suffit pas car elle contient elle-même des pointeurs. Une copie en
profondeur est indispensable.
.LP
La glibc2 propose aussi une fonction
.BR gethostbyname2 ()
qui agit comme
.BR gethostbyname (),
qui permet de préciser la famille à laquelle l'adresse doit appartenir.
.LP
La glibc2 propose aussi les versions réentrantes
.BR gethostbyname_r ()
et
.BR gethostbyname2_r ().
Elles renvoient zéro si elles réussissent et une valeur non-nulle en cas d'erreur.
Le résultat de l'appel est stocké dans la structure d'adresse
.IR ret .
Après l'appel,
.RI * result
vaudra NULL en cas d'erreur, ou pointera sur le résultat.
Des données auxiliaires seront stockées dans le tampon
.I buf
de longueur
.IR buflen .
(Si le tampon est trop petit, ces fonctions renverront
.BR ERANGE ).
La variable
.I h_errno
n'est pas modifiée, mais l'adresse d'une variable où stocker le code d'erreur
est transmis dans
.IR h_errnop .
.PP
POSIX 1003.1-2001 indique
.BR gethostbyaddr ()
et
.BR gethostbyname ()
comme obsolètes. Voir
.BR getaddrinfo (3),
.BR getnameinfo (3),
.BR gai_strerror (3).
.SH "VOIR AUSSI"
.BR getaddrinfo (3),
.BR getipnodebyaddr (3),
.BR getipnodebyaddr (3),
.BR getnameinfo (3),
.BR inet_ntop (3),
.BR inet_pton (3),
.BR resolver (3),
.BR hosts (5),
.BR hostname (7),
.BR resolv+ (8),
.BR named (8)
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 26\ octobre\ 1996
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 3\ gethostbyname\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
