.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 19:49:27 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Apr 26 12:38:55 MET DST 1996 by Martin Schulze (joey@linux.de)
.\" Modified 2001-11-13, aeb
.\" Modified 2001-12-13, joey, aeb
.\"
.\" Traduction 23/10/1996 par Christophe Blaess (ccb@club-internet.fr)
.\" Màj 05/05/1999 LDP-1.23
.\" Màj 21/01/2002 LDP-1.47
.\" Màj 21/07/2003 LDP-1.56
.\" Màj 07/06/2005 LDP-1.59
.\" Màj 27/06/2005 LDP-1.60
.\" Màj 04/07/2005 LDP-1.61
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH CTIME 3 "13 décembre 2001" LDP "Manuel du programmeur Linux"
.SH NOM
ctime, asctime, gmtime, localtime, mktime, asctime_r, ctime_r, gmtime_r, localtime_r \- Conversions de dates et heures binaires en ASCII.
.SH SYNOPSIS
.nf
.B #include <time.h>
.sp
.BI "char *asctime (const struct tm *" tm );
.sp
.BI "char *asctime_r (const struct tm *" tm ", char *" buf );
.sp
.BI "char *ctime (const time_t *" timep );
.sp
.BI "char *ctime_r (const time_t *" timep ", char *" buf );
.sp
.BI "struct tm *gmtime (const time_t *" timep );
.sp
.BI "struct tm *gmtime_r (const time_t *" timep ", struct tm *" result );
.sp
.BI "struct tm *localtime (const time_t *" timep );
.sp
.BI "struct tm *localtime_r (const time_t *" timep ", struct tm *" result );
.sp
.BI "time_t mktime (struct tm *" tm );
.fi
.SH DESCRIPTION
Les fonctions \fBctime\fP(), \fBgmtime\fP() et \fBlocaltime\fP() prennent
toutes un argument de type \fItime_t\fP qui représente une date.
Si l'on interprète cet argument comme une valeur absolue, il s'agit du
nombre de secondes écoulées depuis le 1er Janvier 1970 à 00h 00m 00s en
Temps Universel (TU).
.PP
Les fonctions \fBasctime\fP() et \fBmktime\fP() utilisent toutes deux un
argument de type \fIstruct tm\fP, c'est-à-dire une représentation binaire
divisée en année, mois, jour, heure...
.PP
Cette structure \fItm\fP est définie
dans \fI<time.h>\fP ainsi\ :
.sp
.RS
.nf
.ne 11
.ta 8n 16n 32n
struct tm {
	int	tm_sec;			/* secondes           */
	int	tm_min;			/* minutes            */
	int	tm_hour;		/* heures             */
	int	tm_mday;		/* quantième du mois  */
	int	tm_mon;			/* mois (0 à 11 !)    */
	int	tm_year;		/* année              */
	int	tm_wday;		/* jour de la semaine */
	int	tm_yday;		/* jour de l'année    */
	int	tm_isdst;		/* décalage horaire   */
};
.ta
.fi
.RE
.PP
Les membres de la structure \fItm\fP sont\ :
.TP
.I tm_sec
Le nombre de secondes écoulées depuis le dernier changement de minute.
Normalement dans l'intervalle 0 à 59, ce membre peut aller jusqu'à
61 durant les secondes de rattrapage périodique.
.TP
.I tm_min
Le nombre de minutes écoulées depuis le dernier changement d'heure, dans
l'intervalle 0 à 59.
.TP
.I tm_hour
Le nombre d'heures écoulées depuis Minuit, dans l'intervalle 0 à 23.
.TP
.I tm_mday
Le quantième du mois, dans l'intervalle 1 à 31.
.TP
.I tm_mon
Le nombre de mois écoulés depuis le début de l'année, dans l'intervalle 0 à 11.
.TP
.I tm_year
Le nombre d'années écoulées depuis 1900.
.TP
.I tm_wday
Le nombre de jours écoulés depuis Dimanche, dans l'intervalle 0 à 6.
.TP
.I tm_yday
Le nombre de jours écoulés depuis le 1er Janvier, dans l'intervalle
0 à 365 (0 à 364 si l'année n'est pas bissextile).
.TP
.I tm_isdst
Un drapeau indiquant si le décalage d'heure hiver/été est en cours au
moment de l'appel. La valeur retournée est positive si le décalage est
en fonction, nulle s'il ne l'est pas, et négative si l'information n'est
pas disponible.
.PP
L'appel
.BI ctime( t )
est équivalent à
.BI asctime(localtime( t )) \fR.
Il convertit la date \fIt\fP en une chaîne de caractères de la forme
.sp
.RS
"Wed Jun 30 21:49:08 1993\\n"
.RE
.sp
L'internationalisation de la date est possible en utilisant la fonction
\fBsetlocale\fP(3) et \fBstrftime\fP(3).

Les abréviations pour les jours de la semaine sont «\ Sun\ », «\ Mon\ »,
«\ Tue\ », «\ Wed\ », «\ Thu\ », «\ Fri\ », et «\ Sat\ ».
Les abréviations pour les mois sont «\ Jan\ », «\ Feb\ », «\ Mar\ »,
«\ Apr\ », «\ May\ », «\ Jun\ », «\ Jul\ », «\ Aug\ », «\ Sep\ »,
«\ Oct\ », «\ Nov\ », et «\ Dec\ ».
La valeur renvoyée pointe sur une chaîne statique qui sera écrasée à
chaque appel de l'une des fonctions ci-dessus.
La fonction renseigne également la variable externe \fItzname\fP avec
les informations concernant le fuseau horaire (voir
.BR tzset (3)).
.PP
La version réentrante \fBctime_r\fP() effectue le même travail mais stocke
la chaîne dans un tampon fourni par l'appelant, d'une longueur minimale de
26 caractères. Elle ne renseigne pas nécessairement \fItzname\fP.
.PP
La fonction \fBgmtime\fP() convertit la date \fItimep\fP en une représentation
\fBstruct tm\fP exprimée en Temps Universel.
Elle peut renvoyer NULL quand l'année ne tient pas dans un entier. La valeur
renvoyée pointe vers une structure allouée statiquement qui peut être écrasée
par une invocation ultérieure d'une fonction de date ou d'heure.
La fonction réentrante \fBgmtime_r\fP() effectue le même travail mais stocke
le résultat dans une structure fournie par l'appelant.
.PP
La fonction \fBlocaltime\fP() convertit la date \fItimep\fP en une
représentation \fBstruct tm\fP exprimée en fonction du fuseau horaire de
l'utilisateur. Cette fonction se comporte comme si elle appelait
.BR tzset (3)
et renseigne les variables externes \fItzname\fP
avec les informations concernant le fuseau horaire, \fItimezone\fP avec
la différence (en secondes) entre Temps Universel et Temps Local,
et \fIdaylight\fP avec une valeur non-nulle si le décalage horaire
saisonnier s'applique.
La valeur
renvoyée pointe vers une structure allouée statiquement qui peut être écrasée
par une invocation ultérieure d'une fonction de date ou d'heure.
La fonction réentrante \fBlocaltime_r\fP() effectue le même travail mais stocke
le résultat dans une structure fournie par l'appelant.
.PP
La fonction \fBasctime\fP() convertit la date \fItm\fP exprimée
sous forme \fBstruct tm\fP en une chaîne de caractères du même format
que \fBctime\fP().
La valeur renvoyée pointe sur une chaîne statique qui sera écrasée à
chaque appel de l'une des fonctions ci-dessus.
La version réentrante \fBasctime_r\fP() effectue le même travail mais stocke
la chaîne dans un tampon fourni par l'appelant, d'une longueur minimale de
26 caractères.
.PP
La fonction \fBmktime\fP() convertit la date \fItimeptr\fP exprimée
sous forme \fBstruct tm\fP en une date locale sous forme \fBtime_t\fP.
La fonction ignore les valeurs transmises des membres \fItm_wday\fP
et \fItm_yday\fP de la structure, et les recalcule en utilisant les
autres membres.
Si des membres de la structure débordent de l'intervalle autorisé, ils
seront corrigés (par exemple le 40 Octobre devient le 9 Novembre).
L'appel de \fBmktime\fP() renseigne également la variable
externe \fItzname\fP avec les informations concernant le fuseau
horaire.
Si la structure transmise ne peut pas être convertie, \fBmktime\fP()
renvoie la valeur (time_t)(\-1) et ne modifie pas les membres
\fItm_wday\fP et \fItm_yday\fP.
.SH "VALEUR RENVOYÉE"
Chacune de ces fonctions renvoie la valeur décrite plus haut, ou NULL
(\-1 dans le cas de \fBmktime\fP)() si une erreur est détectée.
.SH NOTES
Les quatre fonctions
.BR asctime (),
.BR ctime (),
.BR gmtime ()
et
.BR localtime ()
renvoient un pointeur vers des données statiques et ne sont donc pas sûres dans
un contexte multi-threads. Les versions réentrantes
.BR asctime_r (),
.BR ctime_r (),
.BR gmtime_r ()
et
.BR localtime_r ()
sont mentionnées dans SUSv2, et disponibles depuis la libc 5.2.5.
.LP
La version glibc de la struct tm a des champs supplémentaires\ :
.sp
.RS
.nf
long tm_gmtoff;           /* Secondes vers l'Est du temps TU */
const char *tm_zone;      /* Abréviation du nom de fuseau */
.fi
.RE
.sp
présents quand _BSD_SOURCE est défini avant l'inclusion de
.IR <time.h> .
Ceci est une extension BSD, présente dans 4.3BSD-Reno.
.SH "CONFORMITÉ"
SVID 3, POSIX, BSD 4.3, ISO 9899
.SH "VOIR AUSSI"
.BR date (1),
.BR gettimeofday (2),
.BR newctime (3),
.BR time (2),
.BR utime (2),
.BR clock (2),
.BR difftime (3),
.BR strftime (3),
.BR strptime (3),
.BR tzset (3)
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 23\ octobre\ 1996
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 3\ ctime\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
