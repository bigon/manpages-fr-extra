.\" (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\" Modified Wed Jul 28 11:12:17 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Mon May 13 23:08:50 1996 by Martin Schulze (joey@linux.de)
.\" Modified 11 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\" Modified 990912 by aeb
.\"
.\" Traduction 03/11/1996 par Christophe Blaess (ccb@club-internet.fr)
.\" Màj 14/12/1998 LDP-1.21
.\" Màj 29/12/1998
.\" Màj 06/06/2001 LDP-1.36
.\" Màj 25/01/2002 LDP-1.47
.\" Màj 21/07/2003 LDP-1.56
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH GLOB 3 "12 septembre 1999" LDP "Manuel du programmeur Linux"
.SH NOM
glob, globfree \- Rechercher un chemin d'accès correspondant à un motif.
.SH SYNOPSIS
.nf
.B #include <glob.h>
.sp
.BI "int glob (const char * " pattern ", int " flags ,
.nl
.BI "         int " "(* errfunc)"  "(const char * " epath ", int " eerrno ),
.nl
.BI "         glob_t " *pglob );
.nl
.BI "void globfree (glob_t *" pglob );
.fi
.SH DESCRIPTION
La fonction
.BR glob ()
recherche tous les chemins d'accès correspondants au motif
.I pattern
en utilisant les règles du shell (voir
.BR glob (7)).
Aucun remplacement de tilde ou substitution de paramètre n'est effectué.
Si vous avez besoin de ces fonctionnalités, voyez
.BR wordexp (3).
.PP
La fonction
.BR globfree ()
libère la mémoire allouée dynamiquement lors d'un appel précédent à
.BR glob ().
.PP
Les résultats d'un appel à
.BR glob ()
sont stockés dans une structure pointée par
.IR pglob ,
qui est du type
.B glob_t
défini dans
.B <glob.h>
en incluant les éléments définis par POSIX.2 (il peut y en avoir
plus sous forme d'extension GNU)\ :
.PP
.br
.nf
.in 10
typedef struct
{
.in 14
    int    gl_pathc;    /* Nombre de chemins correspondant     */
    char **gl_pathv;    /* Liste des chemins correspondant     */
    int    gl_offs;     /* Entrées à réserver dans `gl_pathv'. */
.in 10
} glob_t;
.fi
.PP
Le paramètre
.I flags
est constitué d'un OU binaire «\ |\ » entre zéro ou plus des constantes
symboliques suivantes, modifiant le comportement de
.BR glob "()\ :"
.TP
.B GLOB_ERR
demande à \fBglob\fP() de se terminer dès qu'une erreur se produit (par
exemple, un répertoire non lisible).
.TP
.B GLOB_MARK
Ajouter une barre oblique finale à chaque nom aboutissant à un répertoire.
.TP
.B GLOB_NOSORT
Ne pas trier les chemins d'accès renvoyés (ils le sont par défaut).
.TP
.B GLOB_DOOFFS
signifie que
.I pglob->gl_offs
points d'entrée seront réservés au début de la liste de chaînes dans
.IR pglob->pathv .
.TP
.B GLOB_NOCHECK
demande à \fBglob\fP() de renvoyer le motif original si aucune correspondance
n'est possible.
.TP
.B GLOB_APPEND
ajoute les résultats à ceux d'un appel précédent. Ne pas indiquer cet
attribut lors du premier appel de
.BR glob ().
.TP
.B GLOB_NOESCAPE
Les méta-caractères ne peuvent pas être désactivés par un backslash.
.PP
On peut également utiliser les constantes suivantes, qui sont des
extensions GNU, non définies dans POSIX.2\ :
.TP
.B GLOB_PERIOD
Un point en tête de chemin peut correspondre à un méta-caractère.
.TP
.B GLOB_ALTDIRFUNC
On utilisera comme alternatives aux fonctions normales de bibliothèque
les fonctions
.IR pglob->gl_closedir ,
.IR pglob->gl_readdir ,
.IR pglob->gl_opendir ,
.IR pglob->gl_lstat " et"
.IR pglob->gl_stat .
.TP
.B GLOB_BRACE
Les expressions de type \fB{a,b}\fP sont développées avec le style
.BR csh (1).
.TP
.B GLOB_NOMAGIC
Le motif est renvoyé s'il ne contient pas de méta-caractères.
.TP
.B GLOB_TILDE
L'expansion du tilde est prise en charge.
.TP
.B GLOB_ONLYDIR
Seuls les répertoires sont mis en correspondance.
.PP
Si
.I errfunc
n'est pas
.BR NULL ,
elle sera appelée en cas d'erreur, avec les arguments
.I epath
un pointeur sur le chemin qui a échoué, et
.IR eerrno
la valeur de
.I errno
telle qu'elle a été renvoyée par un appel à
.BR opendir "(), " readdir "() ou " stat "().
Si
.I errfunc
renvoie une valeur non nulle, ou si
.B GLOB_ERR
est positionné,
.BR glob ()
se terminera après l'appel de
.IR errfunc .
.PP
Si \fBglob\fP() réussit complètement,
.I pglob->gl_pathc
contient le nombre de chemins d'accès correspondants et
.I pglob->gl_pathv
est un pointeur sur une liste des chemins. Le premier pointeur
après le dernier chemin vaut
.BR NULL .
.PP
Il est possible d'appeler
.BR glob ()
plusieurs fois. Dans ce cas, l'attribut
.B GLOB_APPEND
doit être indiqué dans
.I flags
durant le second appel et les suivants.
.PP
En tant qu'extension GNU, le champ
.I pglob->gl_flags
contient les attributs indiqués liés par un \fBOU\fR avec
.B GLOB_MAGCHAR
si un méta-caractère a été trouvé.
.SH "VALEUR RENVOYÉE"
S'il réussit complètement
.BR glob ()
renvoie zéro.
Les autres valeurs renvoyées peuvent être\ :
.TP
.B GLOB_NOSPACE
pas assez de mémoire,
.TP
.B GLOB_ABORTED
erreur de lecture,
.TP
.B GLOB_NOMATCH
aucune correspondance trouvée.
.SH "EXEMPLES"
L'exemple d'utilisation suivant simule la frappe de
.nl
.B ls\ \-l\ *.c\ ../*.c
.nl
dans un shell.
.nf
.in 10

glob_t globbuf;

globbuf.gl_offs = 2;
glob("*.c", GLOB_DOOFS, NULL, &globbuf);
glob("../*.c", GLOB_DOOFS | GLOB_APPEND, NULL, &globbuf);
globbuf.gl_pathv[0] = "ls";
globbuf.gl_pathv[1] = "-l";
execvp("ls", &globbuf.gl_pathv[0]);
.fi
.SH "CONFORMITÉ"
POSIX.2
.SH "BOGUES"
La fonction
.BR glob ()
peut échouer en cas d'erreur dans un appel de fonction sous-jacente, comme
.BR malloc "() ou " opendir "().
Le code d'erreur sera alors stocké dans
.IR errno .
.SH NOTES
Les membres
.I gl_pathc
et
.I gl_offs
de la structure glob_t
sont des
.BR size_t
dans glibc 2.1, comme indiqué dans POSIX.2, mais sont déclarés sous forme de
.B int
dans libc4, libc5 et glibc 2.0.
.SH "VOIR AUSSI"
.BR ls (1),
.BR sh (1),
.BR stat (2),
.BR exec (3),
.BR malloc (3),
.BR opendir (3),
.BR readdir (3),
.BR wordexp (3),
.BR glob (7)
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 3\ novembre\ 1996
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 3\ glob\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
