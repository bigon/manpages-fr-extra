.\" Copyright (c) 1997 John S. Kallal (kallal@voicenet.com)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" Some changes by tytso and aeb.
.\"
.\" Traduction 14/09/1998 par Christophe Blaess (ccb@club-internet.fr)
.\" LDP-man-pages-1.19
.\" Màj 25/07/2003 LDP-1.56
.\" Màj 27/06/2005 LDP-1.60
.\" Màj 04/07/2005 LDP-1.61
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH RANDOM 4 "25 octobre 2003" LDP "Manuel du programmeur Linux"
.SH NOM
random, urandom \- Périphériques générateurs aléatoires du noyau.
.SH DESCRIPTION
Les fichiers spéciaux caractères \fI/dev/random\fP et \fB/dev/urandom\fP
(existants depuis Linux 1.3.30) fournissent une interface avec le générateur
de nombres aléatoires du noyau.

Le fichier \fI/dev/random\fP a un numéro de périphérique majeur égal à 1, et
un numéro mineur égal à 8. Les numéros du périphérique \fI/dev/urandom\fP
sont 1 pour le majeur, et 9 pour le mineur.
.LP
Le générateur de nombres aléatoires regroupe du bruit provenant de son
environnement par l'intermédiaire des pilotes de périphériques et d'autres
sources, et le stocke dans un réservoir d'entropie.
Le générateur mémorise également une estimation du nombre de bits de bruit
dans son réservoir d'entropie, et utilise son contenu pour créer des nombres
aléatoires.
.LP
Lors d'une lecture, le périphérique \fI/dev/random\fP sera limité au nombre de
bits de bruit contenus dans le réservoir d'entropie.

\fI/dev/random\fP est particulièrement adapté pour les cas où l'on a ponctuellement
besoin de nombres hautement aléatoires (création de clés par exemple).
Lorsque le réservoir d'entropie est vide, les lectures depuis le périphérique
\fI/dev/random\fP seront bloquantes jusqu'à l'obtention de suffisamment de bruit
en provenance de l'environnement.
.LP
Lors d'une lecture, \fI/dev/urandom\fP renverra autant d'octets qu'on en demande.
Toutefois, s'il n'y a plus assez de bits disponibles dans le réservoir d'entropie,
les valeurs renvoyées pourraient être théoriquement vulnérables à une cryptanalyse
basée sur l'algorithme employé par le pilote.
Il n'existe pas de documentation sur ce type d'attaque dans la littérature publique
actuelle, mais cela n'élimine pas le risque théorique.
Si ce risque est important pour votre application, utilisez plutôt \fI/dev/random\fP
à la place.

.SH CONFIGURATION
Si votre système ne dispose pas des fichiers \fI/dev/random\fP et \fI/dev/urandom\fP
vous pouvez les créer avec les commandes suivantes\ :

.nf
        mknod -m 644 /dev/random c 1 8
        mknod -m 644 /dev/urandom c 1 9
        chown root:root /dev/random /dev/urandom
.fi

Lorsqu'un système Linux démarre sans interaction avec un opérateur humain,
le réservoir d'entropie peut se trouver dans un état relativement prédictible.
La véritable quantité de bruit dans le réservoir d'entropie est donc en-dessous
de son estimation. Afin de contrer ce problème, il est utile de sauvegarder
l'état du réservoir entropique lors des arrêts et redémarrages du système.
Il est possible ainsi d'ajouter les lignes suivantes dans les scripts
de démarrage appropriés\ :

.nf
	echo "Initialisation du générateur de nombre aléatoires"
	# Initialiser le générateur de nombre aléatoire avec une racine
	# mémorisée lors du dernier arrêt (ou redémarrage) du système
	# On charge jusqu'à 512 octets (taille du réservoir d'entropie).
 	if [ -f /var/random-seed ]; then
		cat /var/random-seed >/dev/urandom
 	fi
	dd if=/dev/urandom of=/var/random-seed count=1
.fi

Également, il faut ajouter les lignes suivantes dans un script exécuté
lors de l'arrêt du système.

.nf
	# Sauver une racine aléatoire pour pouvoir redémarrer le
	# générateur au prochain boot. On sauve 512 octets.
 	echo "Sauvegarde de la racine du générateur aléatoire..."
 	dd if=/dev/urandom of=/var/random-seed count=1
.fi
.SH "INTERFACE PROC"
Les fichiers du répertoire
.I /proc/sys/kernel/random
(présent depuis 2.3.16) fournissent une interface supplémentaire
au périphérique
.IR /dev/random .
.LP
Le fichier en lecture seule
.I entropy_avail
donne l'entropie disponible. Normalement, elle sera de 4096 (bits),
une réserve entropique pleine.
.LP
Le fichier
.I poolsize
donne la taille de la réserve entropique. Normalement, elle sera de 512
(octets). Ceci peut être modifié à n'importe quelle valeur pour laquelle un
algorithme est disponible.
Actuellement, les choix sont 32, 64, 128, 256, 512, 1024, 2048.
.LP
Le fichier
.I read_wakeup_threshold
contient le nombre de bits d'entropie nécessaires pour réveiller les processus
endormis qui attendaient l'entropie à partir de
.IR /dev/random .
La valeur par défaut est 64.
Le fichier
.I write_wakeup_threshold
contient le nombre de bits d'entropie en-dessous duquel on réveillera
les processus ayant effectué un appel à
.BR select ()
ou
.BR poll ()
pour un accès en écriture à
.IR /dev/random .
Ces valeurs peuvent être modifiées en écrivant dans les fichiers.
.LP
Les fichiers en lecture seule
.I uuid
et
.I boot_id
contiennent des chaînes aléatoires comme 6fd5a44b-35f4-4ad4-a9b9-6b9be13e1fe9.
Le premier est généré à chaque lecture, le dernier est généré une seule fois.
.SH FICHIERS
/dev/random
.br
/dev/urandom
.SH AUTEUR
Le générateur de nombres aléatoires du noyau a été écrit par
Theodore Ts'o (tytso@athena.mit.edu).
.SH "VOIR AUSSI"
.BR mknod (1)
.br
RFC 1750, "Randomness Recommendations for Security"
.SH TRADUCTION
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 18\ octobre\ 1996,
mise à jour par Alain Portal <aportal AT montp2 DOT > le 4\ juillet\ 2005
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 4\ random\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
