.\" From Henry Spencer's regex package (as found in the apache
.\" distribution). The package carries the following copyright:
.\"
.\"  Copyright 1992, 1993, 1994 Henry Spencer.  All rights reserved.
.\"  This software is not subject to any license of the American Telephone
.\"  and Telegraph Company or of the Regents of the University of California.
.\"
.\"  Permission is granted to anyone to use this software for any purpose
.\"  on any computer system, and to alter it and redistribute it, subject
.\"  to the following restrictions:
.\"
.\"  1. The author is not responsible for the consequences of use of this
.\"     software, no matter how awful, even if they arise from flaws in it.
.\"
.\"  2. The origin of this software must not be misrepresented, either by
.\"     explicit claim or by omission.  Since few users ever read sources,
.\"     credits must appear in the documentation.
.\"
.\"  3. Altered versions must be plainly marked as such, and must not be
.\"     misrepresented as being the original software.  Since few users
.\"     ever read sources, credits must appear in the documentation.
.\"
.\"  4. This notice may not be removed or altered.
.\"
.\" In order to comply with `credits must appear in the documentation'
.\" I added an AUTHOR paragraph below - aeb.
.\"
.\" In the default nroff environment there is no dagger \(dg.
.\"
.\" Traduction Christophe Blaess <ccb@club-internet.fr>
.\" Màj 25/07/2003 LDP-1.56
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.ie t .ds dg \(dg
.el .ds dg (!)
.TH REGEX 7 "7 février 1994" LDP "Manuel de l'administrateur Linux"
.SH NOM
regex \- Expressions rationnelles POSIX 1003.2.
.SH DESCRIPTION
Les expressions rationnelles («\ ER\ »), définies par Posix 1003.2
existent sous deux formes\ :
les ER modernes (en gros celles de
.IR egrep "\ ;"
que Posix 1OO3.2 appelle expressions rationnelles «\ étendues\ »), et
les ER obsolètes (en gros celles de
.BR ed "(1)\ ;"
les ER basiques pour Posix 1003.2).

[NDT\ : Le terme «\ officiel\ » pour la traduction de «\ Regular expression\ » est
«\ expression rationnelle\ », et c'est celui que j'emploierai. Toutefois, on
utilise couramment le terme «\ expression régulière\ », même s'il s'agit d'un
léger abus de langage.]

Les ER obsolètes existent surtout à titre de compatibilité avec d'anciens
programmes\ ; on en parlera plus bas.
Posix 1003.2 laisse de côté certains aspects syntaxiques et sémantiques des
ER\ ; un signe «\ \*(dg\ » indique une interprétation qui peut ne pas être
totalement portable sur d'autres implémentation de 1003.2.
.PP
Une ER (moderne) est une\*(dg ou plusieurs \fIbranches\fR non-vides\*(dg,
séparées par «\ |\ ».
Elle correspond à tout ce qui correspond à l'une des branches.
.PP
Une branche est une\*(dg ou plusieurs \fIpièces\fR concaténées. Elle
correspond à ce qui correspond à la première pièce, suivi de ce qui
correspond à la seconde, et ainsi de suite.
.PP
Une pièce est un \fIatome\fR suivi éventuellement d'un unique\*(dg «\ *\ »,
«\ +\ », «\ ?\ », ou d'un encadrement.
Un atome suivi de «\ *\ » correspond à une séquence de 0 ou plusieurs
correspondances pour l'atome. Un atome suivi d'un «\ +\ » correspond à une
séquence de 1 ou plusieurs correspondances pour l'atome. Un atome suivi
d'un «\ ?\ » correspond à une séquence de zéro ou une correspondance pour
l'atome.
.PP
Un encadrement est un «\ {\ » suivi d'un entier décimal non-signé, suivis
éventuellement d'une virgule, suivis éventuellement d'un entier
décimal non-signé, toujours suivis d'un «\ }\ ». Les entiers doivent être
entre 0 et RE_DUP_MAX (255\*(dg) compris, et s'il y en a deux, le second
ne doit pas être plus petit que le premier. Un atome suivi d'un encadrement
contenant un entier \fIi\fR et pas de virgule, correspond à une séquence
de \fIi\fR correspondances pour l'atome exactement.
Un atome suivi d'un encadrement contenant un entier \fIi\fR et une virgule
correspond à une séquence d'au moins \fIi\fR correspondances pour l'atome.
Un atome suivi d'un encadrement contenant deux entiers \fIi\fR et \fIj\fR
correspond à une séquence de \fIi\fR à \fIj\fR (compris) correspondances
pour l'atome.
.PP
Un atome est une expression rationnelle encadrée par des parenthèses
(correspondant à ce qui correspond à l'expression rationnelle), un
ensemble vide «\ ()\ » (correspond à une chaîne nulle)\*(dg, une
\fIexpression entre crochets\fR (voir plus bas), un point «\ .\ »
(correspondant à n'importe quel caractère), un accent «\ ^\ » (correspondant
à une chaîne vide en début de ligne), «\ $\ » (correspondant à une chaîne
vide en fin de ligne), un «\ \e\ » suivi d'un des caractères
«\ ^.[$()|*+?{\e\ »
(correspondant au caractère littéral - sans signification particulière),
un «\ \e\ » suivi de n'importe quel autre caractère\*(dg
(correspondant au caractère pris sous forme littérale, comme si
le «\ \e\ » était absent\*(dg),
ou un caractère simple sans signification particulière (correspondant à
ce caractère/
Un «\ {\ » suivi d'un caractère autre qu'un chiffre est considéré sous
sa forme littérale, pas un encadrement \*(dg.
Il est illégal de terminer une ER avec un «\ \e\ » seul.
.PP
Une \fIexpression entre crochets\fR est une liste de caractères encadrés par
«\ []\ ». Elle correspond normalement à n'importe quel caractère de la liste.
Si la liste débute par «\ ^\ »,
elle correspond à n'importe quel caractère
\fIsauf\fR ceux de la liste.
Si deux caractères de la liste sont séparés par un «\ \-\ », ils représentent
tout \fIl'intervalle\fR de caractères entre-eux (compris).
Par exemple [0-9@ en Ascii représente n'importe quel chiffre décimal.
Il est illégal\*(dg d'utiliser la même limite dans deux
intervalles, comme «\ a-c-e\ ».
Les intervalles dépendent beaucoup de l'ordre de classement des caractères,
et les programmes portables doivent éviter de les utiliser.
.PP
Pour insérer un «\ ]\ » littéral dans la liste, il faut le mettre en première
position (ou après un éventuel «\ ^\ »). Pour inclure un «\ \-\ » littéral, il
faut le placer en première, dernière position, ou en seconde borne
d'un intervalle. Pour utiliser un - en première borne d'intervalle,
encadrez-le entre «\ [.\ » et «\ .]\ » pour en faire une fusion (plus bas).

À l'exception de ces éléments, et de quelques combinaisons avec des
crochets (voir plus bas), tous les autres caractères spéciaux, y compris
le «\ \e\ », perdent leurs significations spéciales dans une expression entre
crochets.
.PP
Dans une expression entre crochet, une fusion (un seul caractère,
ou une séquence de caractères qui se comporte comme un seul, ou un
nom de fusion) entre «\ [.\ » et «\ .]\ » correspond à la
séquence des caractères de la fusion. Une séquence est un élément
unique de l'expression entre crochets. Ainsi, un expression entre crochets
contenant une fusion multi-caractères peut correspondre à plus
d'un caractère. Par exemple, si la séquence inclut la fusion «\ ch\ »,
alors l'ER «\ [[.ch.]]*c\ » correspond aux cinq premiers caractères de
«\ chchcc\ ».
.PP
Dans une expression entre crochets, une séquence encadrée par «\ [=\ » et
«\ =]\ » est une classe d'équivalence, correspondant à la séquence des
caractères de tous les éléments équivalents à celui-ci, y compris lui-même.
(S'il n'y a pas d'autres éléments équivalents, le fonctionnement est le même
que si l'encadrement était «\ [.\ » et «\ .]\ »).
Par exemple, si o et \o'o^' sont membres d'une classe équivalence, alors
«\ [[=o=]]\ », «\ [[=\o'o^'=]]\ », et «\ [o\o'o^']\ » sont tous synonymes.
Une classe d'équivalence ne doit\*(dg pas être une borne d'intervalle.
.PP
Dans une expression entre crochet, le nom d'une \fIclasse de caractères\fR
encadré par «\ [:\ » et «\ :]\ » correspond à la liste de tous les caractères de la
classe.
Les noms des classes standards sont\ :
.PP
.RS
.nf
.ta 3c 6c 9c
alnum	digit	punct
alpha	graph	space
blank	lower	upper
cntrl	print	xdigit
.fi
.RE
.PP
Cela correspond aux classes des caractères définis pour
.BR wctype (3).
Une localisation peut en fournir d'autres.
Une classe de caractères ne doit pas être utilisée comme borne d'intervalle.
.PP
Il existe deux cas spéciaux\*(dg d'expressions entre crochets\ :
les expressions «\ [[:<:]]\ » et «\ [[:>:]]\ » correspondent à une chaîne vide en
début et en fin de mot, respectivement. Un mot
est défini comme une séquence de caractères
de mot, qui n'est suivie ni précédée
de caractères
de mot.
Un caractère de mot est un caractère
.I alnum
(comme défini par
.BR wctype (3))
ou un souligné.
C'est une extension, compatible mais
non spécifiée par POSIX 1003.2,
et doit être utilisée avec précaution dans les
logiciels destinés à être portés vers d'autres systèmes.
.PP
Dans le cas où une ER peut correspondre à plusieurs sous-chaînes d'une
chaîne donnée, elle correspond à celle qui commence le plus tôt dans la
chaîne.
Si l'ER peut correspondre à plusieurs sous-chaînes débutant au même point,
elle correspond à la plus longue sous-chaîne.
Les sous-expressions correspondent aussi à la plus longue sous-chaîne
possible, à condition que la correspondance complète soit la plus longue
possible, les sous-expressions débutant le plus tôt dans l'ER ayant
priorité sur celles débutant plus loin.
Notez que les sous-expressions de haut-niveau ont donc priorité sur
les sous-expressions de bas-niveau les composant.
.PP
La longueur des correspondances est mesurée en caractères, pas en éléments
fusionnés. Une chaîne vide est considérée comme plus longueur qu'aucune
correspondance. Par exemple «\ bb*\ » correspond au trois caractères du milieu
de «\ abbbc\ », «\ (wee|week)(knights|nights)\ » correspond aux dix caractères de
«\ weeknights\ », quand «\ (.*).*\ » est mis en correspondance avec «\ abc\ », la
sous-expression entre parenthèses correspond aux trois caractères, et si
«\ (a*)*\ » est mis en correspondance avec «\ bc\ » l'ER entière et la sous-ER entre
parenthèses correspondent toutes deux avec une chaîne nulle.
.PP
Si une correspondance sans distinction de casse est demandée, toutes les
différences entre majuscules et minuscules disparaissent de l'alphabet.
Un symbole alphabétique apparaissant hors d'une expression entre crochets
est remplacé par une expression contenant les deux casses (par exemple
«\ x\ » devient «\ [xX]\ »). Lorsqu'il apparait dans une expression entre crochets,
tous ses équivalents sont ajoutés («\ [x]\ » devient «\ [xX]\ » et «\ [^x]\ » devient
«\ [^xX]\ »).
.PP
Aucune limite particulière n'est imposée sur la longueur est ER\*(dg.
Les programmes destinés à être portables devrait limiter leurs ER à
256 octets, car une implémentation compatible POSIX peut refuser les
expressions plus longues.
.PP
Les expressions rationnelles obsolètes (basiques) diffèrent sur plusieurs
points. «\ |\ », «\ +\ », et «\ ?\ » sont des caractères normaux sans équivalents.
Les délimiteurs d'encadrements sont «\ \e{\ » et «\ \e}\ »,
car «\ {\ » et «\ {\ » sont des caractères ordinaires.
Les parenthèses pour les sous-expressions sont «\ \e(\ » et «\ \e)\ »,
car «\ (\ » et «\ )\ » sont des caractères ordinaires.
«\ ^\ » est un caractère ordinaire sauf au début d'une ER
ou au\*(dg début d'une sous-expression entre parenthèses,
«\ $\ » est un caractère ordinaire sauf à la fin d'une ER
ou à\*(dg la fin d'une sous-expressions entre parenthèses,
et «\ *\ » est un caractère ordinaire s'il apparaît au début d'une ER
ou au début d'une sous-expression entre parenthèses
(après un éventuel «\ ^\ »).
Enfin, il existe un nouveau type d'atome, la \fIréférence arrière\fR\ :
«\ \e\ » suivi d'un chiffre décimal non-nul \fIn\fR
correspond à la même séquence de caractères que ceux mis en correspondance
avec la \fIn\fR-ième sous-expression entre parenthèses.
(les sous-expressions sont numérotées par leurs parenthèses ouvrantes, de
gauche à droite),
ainsi «\ \e([bc]\e)\e1\ » correspond à «\ bb\ » ou «\ cc\ » mais pas à «\ bc\ ».
.SH "VOIR AUSSI"
.BR regex (3)
.PP
POSIX 1003.2, section 2.8 (Regular Expression Notation).
.SH BOGUES
Avoir deux sortes d'ER est un calvaire.
.PP
Les spécifications 1003.2 disent que «\ )\ » est un caractère ordinaire en
l'absence de la «\ (\ » correspondante. C'est dû à une erreur d'interprétation
et changera probablement.
Évitez d'en tenir compte.
.PP
Les références arrières sont un vrai calvaire, et posent de gros problèmes
d'efficacité pour l'implémentation. Elles sont de plus
assez mal définies
(est-ce que
«\ a\e(\e(b\e)*\e2\e)*d\ » correspond à «\ abbbd\ »\ ?).
Évitez-les.
.PP
Les spécifications 1003.2 sur les correspondances sans distinction de
casse sont assez vagues. La description donnée plus haut
est le consensus actuel parmi les implémenteurs.
.PP
La syntaxe concernant les limites de mot est incroyablement laide.
.SH AUTEUR
Cette page provient du paquetage regex de Henry Spencer.
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 25\ juillet\ 2003
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 7\ regex\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
