.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) July 28, 1993
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Wed Jul 28 11:03:24 1993, Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Nov 28 16:43:30 1993, Rik Faith (faith@cs.unc.edu)
.\"          with material from Giorgio Ciucci (giorgio@crcc.it)
.\" Portions Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\" Modified Fri Jan 31 17:24:31 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Sun Feb 18 01:59:29 2001 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 5 Jan 2002 Michael Kerrisk <mtk16@ext.canterbury.ac.nz>
.\"
.\" Traduction 16/10/1996 par Christophe Blaess (ccb@club-internet.fr)
.\" Màj 15/04/1997
.\" Màj 04/06/2001 LDP-1.36
.\" Màj 18/07/2003 LDP-1.56
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH SHMCTL 2 "5 janvier 2002" LDP "Manuel du programmeur Linux"
.SH NOM
shmctl \- Contrôler la mémoire partagée.
.SH SYNOPSIS
.ad l
.B #include <sys/ipc.h>
.sp
.B #include <sys/shm.h>
.sp
.BI "int shmctl(int " shmid ", int " cmd ", struct shmid_ds *" buf );
.ad b
.SH DESCRIPTION
\fBshmctl()\fP
permet à l'utilisateur d'obtenir des informations concernant un segment de mémoire
partagée, ainsi que de fixer le propriétaire le groupe et les permissions d'accès
à ce segment. Cette fonction permet également de détruire un segment.
Les informations concernant le segment identifié par
\fIshmid\fP sont renvoyées dans une structure \fIshmid_ds\fP\ :
.PP
.in +4n
.nf
struct shmid_ds {
  struct          ipc_perm shm_perm; /* Permissions d'accès       */
  int             shm_segsz;         /* Taille segment en octets  */
  time_t          shm_atime;         /* Heure dernier attachement */
  time_t          shm_dtime;         /* Heure dernier détachement */
  time_t          shm_ctime;         /* Heure dernier changement  */
  unsigned short  shm_cpid;          /* PID du créateur           */
  unsigned short  shm_lpid;          /* PID du dernier opérateur  */
  short           shm_nattch;        /* Nombre d'attachements     */
  ...
};
.fi
.in -4n
.PP
Le champ \fIshm_perm\fP a la forme suivante\ :
.PP
.in +4n
.nf
struct ipc_perm
{
  key_t  key;
  ushort uid;   /* UID et GID effectifs du propriétaire    */
  ushort gid;
  ushort cuid;  /* UID et GID effectif du créateur         */
  ushort cgid;
  ushort mode;  /* Mode d'accès sur 9 bits de poids faible */
  ushort seq;   /* numéro de séquence                      */
};
.fi
.in -4n
.PP
Les commandes \fIcmd\fP suivantes sont disponibles\ :
.br
.TP 12
.B IPC_STAT
permet de récupérer dans le tampon \fIbuf\fP les informations
concernant le segment de mémoire partagée.
L'apellant doit avoir la permission d'accès en lecture sur
le segment.
.TP
.B IPC_SET
sert à appliquer les changements que l'utilisateur a apportés dans
les champs \fIuid\fP, \fIgid\fP,ou \fImode\fP
de la structure \fIshm_perms\fP. Seuls les 9 bits de poids
faibles sont utilisés dans \fImode\fP. Le membre
.I shm_ctime
est aussi mis à jour.
L'appelant doit être le créateur du segment, son propriétaire, ou
le super-utilisateur.
.TP
.B IPC_RMID
permet de considérer un segment comme prêt pour la destruction. Il sera détruit
effectivement après le dernier détachement (quand le membre
.I shm_nattch
de la structure
.I shmid_ds
associée vaudra zéro.)
L'appelant doit être le créateur du segment, son propriétaire, ou
le super-utilisateur.
.PP
Attention, même après le dernier détachement, le contenu du segment
n'est pas effacé par le système. Un processus réalisant à nouveau
un attachement recupèrera son contenu. Il est à la charge du processus
l'utilisateur d'écraser le contenu du segment s'il ne veut pas qu'il
persiste.
.PP
De plus  le \fBsuper-utilisateur\fP peut autoriser ou interdire le
swapping d'un segment avec les commandes suivantes
(spécifique Linux)\ :
.br
.TP 12
.B SHM_LOCK
empêche le swapping d'un segment de mémoire partagée. L'appelant
doit consulter chaque page concernée après avoir effectué le
verrouillage pour s'assurer qu'elle est bien présente en mémoire.
.TP
.B SHM_UNLOCK
réautorise le swapping d'un segment.
.PP
Les appels
.BR IPC_INFO ,
.BR SHM_STAT
et
.B SHM_INFO
sont utilisés par le programme
.BR ipcs (8)
afin d'obtenir des informations sur les ressources allouées. Dans le futur,
ceci peut changer, ou être accessible via le pseudo système de fichiers proc.
.PP
.SH "VALEUR RENVOYÉE"
.B shmctl
renvoie 0 s'il réussit et \-1 s'il échoue, auquel cas
.I errno
contient le code d'erreur.
.SH ERREURS
.TP 12
.B EACCES
on demande \fBIPC_STAT\fP mais
\fIshm_perm.modes\fP ne permet pas la lecture du segment
.IR shmid .
.TP
.B EFAULT
.I cmd
à la valeur
.B IPC_SET
ou
.B IPC_STAT
mais
.I buf
pointe en\-dehors de l'espace d'adressage accessible.
.TP
.B EINVAL
\fIshmid\fP n'est pas un identificateur de segment valide,
ou \fIcmd\fP n'est pas une commande reconnue.
.TP
.B EIDRM
\fIshmid\fP pointe sur un segment détruit.
.TP
.B EPERM
On réclame \fBIPC_SET\fP ou \fBIPC_RMID\fP mais l'appelant n'est
ni le propriétaire du segment, ni son créateur, ni le super-utilisateur.
.TP
.B EOVERFLOW
on demande \fBIPC_STAT\fP mais la valeur de GID ou d'UID est trop
grande pour être stockée dans la structure pointée par
.IR buf .

.SH NOTES
Divers champs de la \fIstruct shmid_ds\fP étaient des shorts sous Linux 2.2
et sont devenus longs sous Linux 2.4. Pour en tirer parti, une recompilation
sous GlibC 2.1.91 ou ultérieure doit suffire.
(Le noyau distingue les anciens et nouveaux appels par un drapeau IPC_64
dans
.IR cmd .)
.SH CONFORMITÉ
SVr4, SVID. SVr4 mentionne des conditions d'erreur supplémentaires
ENOENT, ENOSPC, ENOMEM, EEXIST. Ni SVr4, ni SVID ne documentent la
condition d'erreur EIDRM.
.SH "VOIR AUSSI"
.BR shmget (2),
.BR shmop (2)
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 16\ octobre\ 1996
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 2\ shmctl\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
