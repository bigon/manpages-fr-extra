.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1992 Drew Eckhardt, March 28, 1992
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-23 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-01-13 by Arnt Gulbrandsen <agulbra@troll.no>
.\" Modified 1996-01-22 by aeb, following a remark by
.\"          Tigran Aivazian <tigran@sco.com>
.\" Modified 1996-04-14 by aeb, following a remark by
.\"          Robert Bihlmeyer <robbe@orcus.ping.at>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2001-05-04 by aeb, following a remark by
.\"          Håvard Lygre <hklygre@online.no>
.\" Modified 2001-04-17 by Michael Kerrisk <mtk16@ext.canterbury.ac.nz>
.\" Modified 2002-06-13 by Michael Kerrisk <mtk16@ext.canterbury.ac.nz>
.\"     Added note on non-standard behaviour when SIGCHLD is ignored.
.\" Modified 2002-07-09 by Michael Kerrisk <mtk16@ext.canterbury.ac.nz>
.\"	Enhanced descriptions of 'resource' values for [gs]etrlimit()
.\" Modified 2003-11-28 by aeb, added RLIMIT_CORE
.\" Modified 2004-03-26 by aeb, added RLIMIT_AS
.\"
.\" Traduction  11/10/1996 Christophe BLAESS (ccb@club-internet.fr)
.\" Màj 08/04/1997
.\" Màj 09/04/1999 LDP-1.22
.\" Màj 30/05/2001 LDP-1.36
.\" Màj 19/01/2002 LDP-1.47
.\" Màj 18/07/2003 LDP-1.56
.\" Màj 20/07/2005 LDP-1.64
.\" Màj 14/12/2005 LDP-1.65
.\" Màj 23/12/2005 LDP-1.67
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH GETRLIMIT 2 "28 novembre 2003" LDP "Manuel du programmeur Linux"
.SH NOM
getrlimit, getrusage, setrlimit \- Lire/écrire les limites et utilisations des ressources.
.SH SYNOPSIS
.B #include <sys/time.h>
.br
.B #include <sys/resource.h>
.br
.B #include <unistd.h>
.sp
.BI "int getrlimit (int " resource ", struct rlimit *" rlim );
.br
.BI "int getrusage (int " who ", struct rusage *" usage );
.br
.BI "int setrlimit (int " resource ", const struct rlimit *" rlim );
.SH DESCRIPTION
.B getrlimit
et
.B setrlimit
lisent ou écrivent les limites des ressources systèmes. Chaque ressource
a une limite souple et une limite stricte définies par la structure
.B rlimit
(l'argument
.I rlim
de
.BR getrlimit "() et " setrlimit "())\ :"
.PP
.in +0.5i
.nf
struct rlimit {
  rlim_t rlim_cur; /* limite souple */
  rlim_t rlim_max; /* limite stricte (plafond
                      de rlim_cur) */
};

.fi
.in -0.5i
La limite souple est la valeur que le noyau prend en compte pour la
ressource correspondante.
La limite stricte agit comme un plafond pour la limite souple\ : un processus
non-privilégié peut seulement modifier sa limite souple dans l'intervalle entre
zéro et la limite stricte, et diminuer (de manière irréversible) sa limite
stricte. Un processus privilégié peut modifier ses deux limites à sa guise.
.PP
La valeur
.B RLIM_INFINITY
indique une limite infinie pour la ressource (aussi bien pour
.BR getrlimit ()
que pour
.BR setrlimit ()).
.PP
.I resource
doit être l'un des éléments suivants\ :
.TP
.B RLIMIT_AS
Taille maximum de la mémoire virtuelle du processus en octets.
The maximum size of the process's virtual memory (address space) in bytes.
.\" since 2.0.27 / 2.1.12
Cette limite affecte les appels à
.BR brk (2),
.BR mmap (2)
et
.BR mremap (2),
qui échouent avec l'erreur
.B ENOMEM
en cas de dépassement de cette limite. De même, l'extension de la pile
automatique échouera (et génèrera un SIGSEGV qui tuera le processus si aucune
pile alternative n'est disponible).
Depuis que cette valeur est de type long, sur les machines où le type long
est sur 32 bits, soit cette limite est au plus 2 GiB, soit cette ressource
est illimitée.
.TP
.B RLIMIT_CORE
Taille maximum du fichier
.IR core .
Lorsqu'elle vaut zéro, aucun fichier d'image noyau (Ndt\ : core dump)
n'est créé. Lorsqu'elle ne vaut pas zéro, les fichiers d'image noyau plus
grands sont tronqués à cette taille.
.TP
.B RLIMIT_CPU
Limite de temps CPU en secondes.
Si un processus atteint cette limite souple, il reçoit le signal
.BR SIGXCPU .
L'action par défaut en est la terminaison du processus.
Mais le signal peut être capturé et le gestionnaire
peut renvoyer le contrôle au programme
principal.
Si le processus continue à consommer du temps CPU, il recevra
.B SIGXCPU
toutes les secondes jusqu'à atteindre sa limite stricte,
où il recevra
.BR SIGKILL .
(Ceci correspond au comportement de Linux 2.2 et 2.4.
Les implémentations varient sur le comportement vis-à-vis d'un processus
qui continue à consommer du temps CPU après dépassement de sa limite souple.
Les applications portables qui doivent capturer ce signal devraient
prévoir une terminaison propre dès la première réception de
.BR SIGXCPU ).
.TP
.B RLIMIT_DATA
Taille maximale du segment de données d'un processus (données initialisées,
non-initialisées, et tas).
Cette limite affecte les appels
.BR brk "() et " sbrk (),
qui échouent avec l'erreur
.B ENOMEM
si la limite souple est dépassée.
.TP
.B RLIMIT_FSIZE
Taille maximale d'un fichier que le processus peut créer.
Les tentatives d'extension d'un fichier au-delà de cette limite résultent en
un signal
.BR SIGXFSZ .
Par défaut ce signal termine le processus, mais il peut être
capturé, et dans ce cas l'appel-système concerné (par exemple
.BR write "(), " truncate ())
échoue avec l'erreur
.BR EFBIG .
.TP
.B RLIMIT_LOCKS
Une limite sur le nombre combiné de verrous
.BR flock ()
et
.BR fcntl ()
que le processus peut établir.
(Premiers Linux 2.4 seulement).
.\" to be precise: Linux 2.4.0-test9; no longer in 2.4.25 / 2.5.65
.TP
.B RLIMIT_MEMLOCK
Le nombre maximal d'octets de mémoire virtuelle que le processus peut
verrouiller en RAM à l'aide des appels
.BR lock "() et " mlockall ().
.TP
.B RLIMIT_NOFILE
Le nombre maximal de descripteurs de fichiers qu'un processus
peut ouvrir simultanément.
Les tentatives d'ouverture
.RB ( open "(), " pipe "(), " dup "(), etc)"
dépassant cette limite renverront l'erreur
.BR EMFILE .
.TP
.B RLIMIT_NPROC
Le nombre maximum de processus qui peuvent être créés pour l'UID réel
du processus appelant.
Une fois cette limite atteinte,
.BR fork ()
échoue avec l'erreur
.BR EAGAIN .
.TP
.B RLIMIT_RSS
Indique la limite (en pages) pour la taille de l'ensemble résident du processus
(le nombre de page de mémoire virtuelle en RAM).
Cette limite n'a d'effet que depuis Linux 2.4, et n'affecte
que les appels
.BR madvise ()
indiquant
.BR MADVISE_WILLNEED .
.TP
.B RLIMIT_STACK
La taille maximale de la pile du processus, en octets.
Une fois cette limite atteinte, un signal
.B SIGSEGV
est déclenché.
Pour gérer ce signal, le processus doit utiliser une pile spécifique pour signaux
.RB ( sigaltstack (2)).
.PP
.B RLIMIT_OFILE
est le nom BSD pour
.BR RLIMIT_NOFILE .
.B getrusage
renvoie l'utilisation courante des ressources, pour \fIwho\fP
valant
.BR RUSAGE_SELF
ou
.BR RUSAGE_CHILDREN .
Le premier correspond aux ressources consommées par le processus appelant
et le second par l'ensemble des processus fils terminés qui ont été attendus
par un \fBwait\fP().
.PP
.in +0.5i
.nf
struct rusage {
  struct timeval ru_utime; /* Temps utilisateur écoulé         */
  struct timeval ru_stime; /* Temps système écoulé             */
  long  ru_maxrss;         /* Taille résidente maximale        */
  long  ru_ixrss;          /* Taille de mémoire partagée       */
  long  ru_idrss;          /* Taille des données non partagées */
  long  ru_isrss;          /* Taille de pile                   */
  long  ru_minflt;         /* Demandes de pages                */
  long  ru_majflt;         /* Nombre de fautes de pages        */
  long  ru_nswap;          /* Nombre de swaps                  */
  long  ru_inblock;        /* Nombre de lectures de blocs      */
  long  ru_oublock;        /* Nombre d'écritures de blocs      */
  long  ru_msgsnd;         /* Nombre de messages émis          */
  long  ru_msgrcv;         /* Nombre de messages reçus         */
  long  ru_nsignals;       /* Nombre de signaux reçus          */
  long  ru_nvcsw;          /* Chgmnts de contexte volontaires  */
  long  ru_nivcsw;         /* Chgmnts de contexte involontaires*/
};
.fi
.in -0.5i
.SH "VALEUR RENVOYÉE"
Ces fonctions renvoient 0 si elles réussissent, ou \-1 si elles échouent, auquel cas
.I errno
contient le code d'erreur.
.SH ERREURS
.TP
.B EFAULT
.I rlim
ou
.I usage
pointe en dehors de l'espace d'adressage disponible.
.TP
.B EINVAL
.BR getrlimit " ou " setrlimit
est appelé avec un mauvais argument
.IR resource ,
ou
.B getrusage
est appelé avec un mauvais argument
.IR who.
.TP
.B EPERM
Tentative d'utiliser
.BR setrlimit ()
sans être super-utilisateur pour
augmenter ses limites, ou alors le super-utilisateur essaye d'augmenter
les limites au-dessus des maxima du noyau.
.SH "CONFORMITÉ"
SVr4, BSD 4.3
.SH NOTE
L'inclusion de
.I <sys/time.h>
n'est plus obligatoire mais améliore la portabilité.
(En fait,
.I struct timeval
est définie dans
.IR <sys/time.h> ).
.PP
Sous Linux, si le traitement de
.B SIGCHLD
est configuré avec
.BR SIG_IGN ,
les statistiques d'utilisation des processus enfants
sont automatiquement incluses dans les valeurs renvoyées par
.BR RUSAGE_CHILDREN ,
bien que POSIX 1003.1-2001 interdise explicitement cela.
.LP
Les structures ci-dessous sont extraites de BSD 4.3 Reno.
Tous les champs ne sont pas significatifs sous Linux. Actuellement
(Linux 2.4, 2.6) seuls les champs
.BR ru_utime ,
.BR ru_stime ,
.BR ru_minflt ,
.BR ru_majflt ,
et
.BR ru_nswap
sont remplis.
.SH "VOIR AUSSI"
.BR dup (2),
.BR fcntl (2),
.BR fork (2),
.BR mlock (2),
.BR mlockall (2),
.BR mmap (2),
.BR open (2),
.BR quotactl (2),
.BR sbrk (2),
.BR wait3 (2),
.BR wait4 (2),
.BR malloc (3),
.BR ulimit (3),
.BR signal (7)
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 11\ octobre\ 1996
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 2\ getrlimit\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
