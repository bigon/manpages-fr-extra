.\" Contributed by Niki A. Rahimi, LTC Security Development
.\" narahimi@us.ibm.com
.\" May be freely distributed.
.\"
.\" Traduction : Alain Portal
.\" 13/06/2005 LDP-1.59
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH PCICONFIG_READ 2 "14 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
pciconfig_read, pciconfig_write, pciconfig_iobase \- Gestion d'information des périphériques pci.
.SH SYNOPSIS
.nf
.B #include <pci.h>
.sp
.BI "int pciconfig_read(unsigned long " bus ", unsigned long " dfn ,
.BI "     unsigned long " off ", unsigned long " len ", void *" buf );
.BI "int pciconfig_write(unsigned long " bus ", unsigned long " dfn ,
.BI "     unsigned long " off ", unsigned long " len ", void *" buf );
.BI "int pciconfig_iobase(long " which ", unsigned long " bus ,
.BI "     unsigned long " devfn );
.fi
.SH DESCRIPTION
.TP
La plupart des interactions avec les périphériques PCI est déjà gérée par la
couche PCI du noyau, aussi, on ne devrait pas avoir besoin d'accéder à ces
appels à partir de l'espace utilisateur.
.TP
.BR pciconfig_read ()
Lit dans
.I
buf
à partir du périphérique
.I
dev
à l'offset
.I
off.
.TP
.BR pciconfig_write ()
Écrit à partir de
.I
buf
vers le périphérique
.I
dev
à l'offset
.I
off.
.TP
.BR pciconfig_iobase ()
Vous lui passez une paire «\ bus/devfn\ » et vous récupérez une adresse
physique pour chacun des offset mémoire (pour des choses comme prep,
c'est0xc0000000), l'adresse d'entrée-sortie (IO) de base pour les cycles PIO
ou bien les trous ISA s'il y en a.
.SH "VALEUR RENVOYÉE"
.TP
.BR pciconfig_read ()
renvoie zéro s'il réussit et \-1 s'il échoue,
auquel cas errno contient le code d'erreur.
.TP
.BR pciconfig_write ()
renvoie zéro s'il réussit et \-1 s'il échoue,
auquel cas errno contient le code d'erreur.
.TP
.BR pciconfig_iobase ()
Renvoie l'information de localisation de diverses régions d'entrées-sorties
dans la mémoire physique en fonction de la valeur de
.I which.
Les valeurs possibles pour
.I which
sont\ : IOBASE_BRIDGE_NUMBER, IOBASE_MEMORY, IOBASE_IO, IOBASE_ISA_IO,
IOBASE_ISA_MEM.
.SH ERREURS
.TP
.B ENOSYS
Le système n'a pas implémenté ces appels (CONFIG_PCI n'est pas défini).
.TP
.B EPERM
L'utilisateur n'a pas la capacité CAP_SYS_ADMIN.
Ceci ne s'applique pas à
.BR pci_iobase ().
.TP
.B ENODEV
Pour
.BR pci_iobase (),
cette valeur est NULL.
Pour les autres appels, ne peut pas trouver un slot.
.TP
.B EINVAL
La valeur de
.I len
n'est pas valide. Ceci ne s'applique pas à
.BR pci_iobase ().
.TP
.B EIO
Erreur d'entrées-sorties.
.TP
.B EOPNOTSUPP
Cette valeur de retour est valide seulement pour
.BR pci_iobase ().
Elle est retournée si la valeur de
.I
which
n'est pas valide.
.SH "CONFORMITÉ"
Ces appels sont spécifiques à Linux,
disponibles à partir des versions Linux 2.0.26/2.1.11.
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Alain Portal
<aportal AT univ-montp2 DOT fr> le 1er juin 2005
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 2\ pciconfig_read\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
