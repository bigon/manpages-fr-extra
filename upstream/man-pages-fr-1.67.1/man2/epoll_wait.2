.\"
.\"  epoll by Davide Libenzi ( efficient event notification retrieval )
.\"  Copyright (C) 2003  Davide Libenzi
.\"
.\"  This program is free software; you can redistribute it and/or modify
.\"  it under the terms of the GNU General Public License as published by
.\"  the Free Software Foundation; either version 2 of the License, or
.\"  (at your option) any later version.
.\"
.\"  This program is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"
.\"  You should have received a copy of the GNU General Public License
.\"  along with this program; if not, write to the Free Software
.\"
.\"  Davide Libenzi <davidel@xmailserver.org>
.\"
.\" Traduction Christophe Blaess <ccb@club-internet.fr>
.\" Màj 25/07/2003 LDP-1.56
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH EPOLL_WAIT 2 "23 octobre 2002" LDP "Manuel du programmeur Linux"
.SH NOM
epoll_wait \- Attendre un évément sur un descripteur epoll.
.SH SYNOPSIS
.B #include <sys/epoll.h>
.sp
.BR "int epoll_wait(int " epfd ", struct epoll_event * " events ", int " maxevents ", int " timeout)
.SH DESCRIPTION
Attendre un événement sur
le descripteur
.B epoll
.I epfd
pendant une durée maximale de
.I timeout
millisecondes. La zone mémoire pointée par
.I events
contiendra les événements disponibles pour l'appelant.
Jusqu'à
.I maxevents
événements sont renvoyés par
.BR epoll_wait (2).
Le paramètre
.I maxevents
doit être supérieur à zéro. En spécifiant
\-1 comme valeur de
.IR timeout ,
.BR epoll_wait (2)
attendra indéfiniment, alors qu'un
.I timeout
nul fera revenir
.BR epoll_wait (2)
immédiatement, même si aucun événement n'est disponible (code de retour nul)
La
.B struct epoll_event
est définie ainsi\ :
.sp
.nf

	typedef union epoll_data {
		void *ptr;
		int fd;
		__uint32_t u32;
		__uint64_t u64;
	} epoll_data_t;

	struct epoll_event {
		__uint32_t events;	/* Événement epoll      */
		epoll_data_t data;	/* Variable utilisateur */
	};

.fi

Le champ
.I data
de la structure renvoyée contiendra les mêmes données que lors de l'appel
.BR epoll_ctl (2)
.IR ( EPOLL_CTL_ADD , EPOLL_CTL_MOD )
tandis que le champ
.I events
contiendra le masque de bit des événements disponibles.
.SH "VALEUR RENVOYÉE"
Lorrsqu'il réussit, l'appel
.BR epoll_wait (2)
renvoie le nombe de descripteurs prêts pour les E/S demandées, ou zéro
si aucun descripteur n'est devenu prêt pendant la durée
.I timeout
millisecondes. Si une erreur se produit,
.BR epoll_wait (2)
renvoie \-1 et
.I errno
contient le code approprié.
.SH ERREURS
.TP
.B EBADF
.I epfd
n'est pas un descripteur de fichier valide.
.TP
.B EINVAL
Le descripteur
.I epfd
fourni n'est pas un descripteur
.BR epoll ,
ou le paramètre
.I maxevents
est inférieur ou égal à zéro.
.TP
.B EFAULT
La zone mémoire pointée par
.I events
n'est pas accessible en écriture.
.SH CONFORMIITÉ
.BR epoll_wait (2)
est une nouvelle API introduite dans Linux 2.5.44.
Son interface est stabilisée depuis Linux 2.5.66.
.SH "VOIR AUSSI"
.BR epoll_ctl (2),
.BR epoll_create (2),
.BR epoll (4)
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 25\ juillet\ 2003
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 2\ epoll_wait\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
