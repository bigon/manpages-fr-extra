.\" This man page is Copyright (C) 1998 Pawel Krawczyk.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" $Id: sendfile.2,v 1.5 1999/05/18 11:54:11 freitag Exp $
.\" 2000-11-19 bert hubert <ahu@ds9a.nl>: in_fd cannot be socket
.\
.\" Traduction 04/01/2000 par Christophe Blaess (ccb@club-internet.fr)
.\" LDP-1.28
.\" Màj 27/06/2000 LDP-1.30
.\" Màj 04/06/2001 LDP-1.36
.\" Màj 18/07/2003 LDP-1.56
.\" Màj 14/12/2005 LDP-1.65
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH SENDFILE 2 "1er décembre 1998" LDP "Manuel du programmeur Linux"
.SH NOM
sendfile \- Transfert de données entre descripteurs de fichiers.
.SH SYNOPSIS
.B #include <sys/sendfile.h>
.sp
.BI "ssize_t sendfile(int" " out_fd" ", int" " in_fd" ", off_t *" offset ", size_t" " count" );
.\" The below is too ugly. Comments about glibc versions belong
.\" in the notes, not in the header.
.\"
.\" .B #include <features.h>
.\" .br
.\" .B #if (__GLIBC__==2 && __GLIBC_MINOR__>=1) || __GLIBC__>2
.\" .br
.\" .B #include <sys/sendfile.h>
.\" .br
.\" #else
.\" .br
.\" .B #include <sys/types.h>
.\" .br
.\" .B /* No system prototype before glibc 2.1. */
.\" .br
.\" .BI "ssize_t sendfile(int" " out_fd" ", int" " in_fd" ", off_t *" offset ",
.\" .br
.\" .B #endif
.\"
.SH DESCRIPTION
Cet appel système copie des données entre un descripteur de fichier et
un autre. L'un ou l'autre de ces descripteurs peuvent être une socket
(voir plus bas). Le descripteur
.I in_fd
doit être ouvert en lecture, et
.I out_fd
en écriture.
Le pointeur
.I offset
doit correspondre à une variable contenant la position dans le fichier
d'entrée à partir de laquelle
.BR sendfile ()
commencera la lecture. Lorsque la routine se termine, la variable est
remplie avec la position de l'octet immédiatement après le dernier octet
lu.
L'argument
.I count
est le nombre d'octets à copier entre les descripteurs de fichiers.

Comme la copie est assurée à l'intérieur du noyau,
.BR sendfile ()
ne perd pas de temps à transférer des données entre l'espace noyau
et l'espace utilisateur.

.SH NOTES
L'appel
.BR sendfile ()
ne modifie pas la position courante dans le fichier
.IR in_fd ,
mais modifie celle de
.IR out_fd .

Si vous voulez utiliser \fBsendfile\fP() pour envoyer un fichier au travers
d'une socket TCP, tout en le précédant de données d'en-tête, voyez l'option
.B TCP_CORK
de
.BR tcp (7)
pour minimiser le nombre de paquets, et optimiser les performances.

Actuellement, le descripteur depuis lequel les données sont lues ne peut
pas être une socket, il doit s'agir d'un fichier supportant les opérations
de type mmap().

.SH "VALEUR RENVOYÉE"
Si le transfert a réussi, le nombre d'octets écrits dans
.I out_fd
est renvoyé. Sinon, \fBsendfile\fP() renvoie -1, et
.I errno
est configuré.

.SH ERREURS
.TP
.B EBADF
Le fichier d'entrée n'est pas ouvert en lecture, ou celui de sortie en écriture.
.TP
.B EINVAL
Le descripteur est invalide ou verrouillé.
.TP
.B ENOMEM
Mémoire insuffisante pour lire depuis
.IR in_fd .
.TP
.B EIO
Erreur d'entrée-sortie pendant la lecture depuis
.IR in_fd .
.SH VERSIONS
L'appel-système
.BR sendfile ()
est une nouveauté de Linux 2.2.
Le fichier d'en-tête <sys/sendfile.h> est présent depuis la glibc 2.1.

Les autres Unix implémentent \fBsendfile\fP() avec d'autres sémantiques, et d'autres
prototypes. Il ne faut pas l'utiliser dans un programme portable.
.SH "VOIR AUSSI"
.BR socket (2),
.BR open (2)
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 4\ janvier\ 2000
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 2\ sendfile\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.

