.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright 1993 Rickard E. Faith (faith@cs.unc.edu) and 
.\" 2002 Michael Kerrisk
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Fri Jan 31 16:26:07 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Fri Dec 11 17:57:27 1998 by Jamie Lokier <jamie@imbolc.ucc.ie>
.\" Modified 24 Apr 2002 by Michael Kerrisk <mtk16@ext.cannterbury.ac.nz>
.\"	Substantial rewrites and additions
.\"
.\" Traduction 23/01/1997 Christophe BLAESS (ccb@club-internet.fr)
.\" Màj 18/05/1999 LDP-1.23
.\" Màj 15/01/2002 LDP-1.47
.\" Màj 18/07/2003 LDP-1.56
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH FLOCK 2 "24 avril 2002" LDP "Manuel du programmeur Linux"
.SH NOM
flock \- Placer ou enlever un verrou coopératif sur un fichier ouvert.
.SH SYNOPSIS
.B #include <sys/file.h>
.sp
.BR "int flock(int " fd ", int " operation );
.SH DESCRIPTION
Place ou enlève un verrou consultatif sur un fichier ouvert dont le descripteur est
.IR fd .
Le paramètre
.I operation
est l'un des suivants\ :
.RS
.sp
.TP 1.0i
LOCK_SH
Verrouillage partagé.
Plusieurs processus peuvent disposer d'un verrouillage
partagé simultanément sur un même fichier.
.TP
LOCK_EX
Verrouillage exclusif.
Un seul processus dispose d'un verrouillage exclusif
sur un fichier, à un moment donné.
.TP
LOCK_UN
Déverrouillage d'un verrou tenu par le processus.
.sp
.RE

Un appel
.BR flock ()
peut bloquer si un verrou incompatible est tenu par un autre processus.
Pour que la requête soit non-bloquante, il faut inclure
.B LOCK_NB
(par un
.IR OU
binaire «\ |\ » ) avec la constante précisant l'opération.

Un même fichier ne peut pas avoir simultanément des verrous partagés et exclusifs.

Les verrous créés avec
.BR flock ()
sont associés à un fichier, ou plus précisément une entrée de la table des fichiers
ouverts. Ainsi, les descripteurs de fichiers dupliqués (par exemple avec
.BR fork "(2) ou " dup (2))
se réfèrent au même verrou, et celui-ci peut être relâché ou modifié à
travers n'importe lequel des descripteurs.
De plus, un verrou est relâché par une opération explicite
.B LOCK_UN
sur l'un quelconque des descripteurs, ou lorsqu'ils ont tous été
fermés.

Un processus ne peut avoir qu'un seul type de verrou (partagé ou exclusif)
sur un fichier.
En conséquence un appel
.BR flock ()
sur un fichier déjà verrouillé modifiera le type de
verrouillage.

Les verrous créés par
.BR flock ()
sont conservé lors d'un appel
.BR execve ().

Un verrou partagé ou exclusif peut être placé sur un fichier quelque soit le
mode d'ouverture du fichier.
.SH "VALEUR RENVOYÉE"
.BR flock
renvoie 0 s'il réussit, ou \-1 en cas d'échec, auquel cas
.I errno
contient le code d'erreur.
.SH ERREURS
.TP
.B EWOULDBLOCK
Le fichier est verrouillé et l'attribut
.B LOCK_NB
a été précisé.
.TP
.B EBADF
.I fd
n'est pas un descripteur de fichier ouvert.
.TP
.B EINTR
Durant l'attente pour acquérir le verrou,
l'appel a été interrompu par un signal capturé par un gestionnaire.
.TP
.B EINVAL
.I operation
est invalide.
.TP
.B ENOLCK
Le noyau n'a pas assez de mémoire pour les allocations de verrou.
.SH CONFORMITÉ
4.4BSD (l'appel système
.BR flock (2)
est apparu pour la première fois dans 4.2BSD).
Une version de
.BR flock (2)
parfois implémenté à partir de
.BR fcntl (2),
est apparue sur la plupart des Unix.
.SH NOTES
.BR flock (2)
ne verrouille par les fichiers à travers NFS. Utilisez
.BR fcntl (2)
à la place\ : il fonctionne avec NFS si la version de Linux est suffisamment
récente et si le serveur accepte les verrouillages.
.PP
Depuis le noyau 2.0,
.BR flock (2)
est implémenté par un appel système plutôt que d'être
émulé par une routine de la bibliothèque C invoquant
.BR fcntl (2).
Ceci correspond à la véritable sémantique BSD\ :
il n'y a pas d'interaction entre les verrous
placés
.BR flock (2)
et
.BR fcntl (2),
et
.BR flock (2)
ne détecte pas les cas de blocage (deadlock).
.PP
.BR flock (2)
place uniquement des verrous coopératifs\ : suivant les permissions du fichier
un processus peut ignorer l'utilisation de
.BR flock (2)
et faire des entrées-sorties sur le fichier.
.PP
.BR flock (2)
et
.BR fcntl (2)
ont des sémantiques différents par rapport aux processus «\ forkés\ » et
.BR dup (2).
.SH "VOIR AUSSI"
.BR open (2),
.BR close (2),
.BR dup (2),
.BR execve (2),
.BR fcntl (2),
.BR fork (2),
.BR lockf (3)

On peut également se reporter aux fichiers
.I locks.txt
et
.I mandatory.txt
dans le répertoire
.IR /usr/src/linux/Documentation .
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 21\ janvier\ 1997
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 2\ flock\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
