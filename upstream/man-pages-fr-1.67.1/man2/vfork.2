.\" Copyright (c) 1999 Andries Brouwer (aeb@cwi.nl), 1 Nov 1999
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" 1999-11-10: Merged text taken from the page contributed by
.\" Reed H. Petty (rhp@draper.net)
.\"
.\" Traduction  9/10/1996 Christophe BLAESS (ccb@club-internet.fr)
.\" Màj 09/06/1999
.\" Màj 26/06/2000 LDP-1.30
.\" Màj 04/06/2001 LDP-1.36
.\" Màj 18/07/2003 LDP-1.56
.\" Màj 01/05/2006 LDP-1.67.1
.\"
.TH VFORK 2 "1er novembre 1999" LDP "Manuel du programmeur Linux"
.SH NOM
vfork \- Créer un processus fils et bloquer le père.
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.B pid_t vfork(void);
.SH "DESCRIPTION STANDARD"
(D'après XPG4 / SUSv2 / draft POSIX).
La routine
.IR vfork ()
a le même effet que
.BR fork (),
sauf que le comportement est indéfini si le processus créé par
.BR fork ()
effectue l'une des actions suivantes avant d'appeler avec succès
.BR _exit ()
ou une routine de la famille
.BR exec "()\ :"
.PP
modification d'une donnée autre que la variable de type pid_t stockant le
retour de
.BR vfork (),
.PP
revenir de la fonction dans laquelle
.BR vfork ()
a été invoqué,
.PP
appel d'une autre fonction.
.SH ERREURS
.TP
.B EAGAIN
Trop de processus en cours. Réessayer.
.TP
.B ENOMEM
Pas assez de mémoire
.SH "PARTICULARITÉS LINUX"
.BR vfork (),
tout comme
.BR fork (),
crée un processus fils à partir du processus appelant. Pour plus de détails
sur les valeurs renvoyées et les erreurs possibles, voir
.BR fork (2).
.PP
.BR vfork ()
est conçu comme un cas particulier de
.BR clone (2).
Il sert à créer un nouveau processus sans effectuer de copie de la table des pages
mémoire du processus père. Ceci peut être utile dans des applications nécessitant
une grande rapidité d'exécution, si le fils doit invoquer immédiatement un
appel
.IR execve ().
.PP
.BR vfork ()
diffère aussi de
.BR fork ()
car le processus père reste suspendu jusqu'à ce que le fils invoque
.BR execve (),
ou
.BR _exit ().
Le fils partage toute la mémoire avec son père, y compris la pile. Le processus
fils ne doit donc pas revenir de la fonction en cours, ni invoquer une nouvelle
routine. Il ne doit pas appeler
.IR exit (),
mais à la place
.IR _exit ().
.PP
Les gestionnaires de signaux sont hérités mais pas partagés. Les signaux pour le
processus père sont délivrés après que le fils se soit terminé.
.SH "DÉTAILS HISTORIQUES"
Sous Linux,
.BR fork ()
est implémenté en utilisant un mécanisme de copie en écriture, ainsi ses seuls coûts
sont le temps et la mémoire nécessaire pour dupliquer la table des pages mémoire
du processus père, et créer une structure de tâche pour le fils. Toutefois, jadis
.IR fork ()
nécessitait malheureusement une copie complète de l'espace d'adresse du père, souvent
inutile car un appel
.IR exec ()
est souvent réalisé immédiatement par le fils.
Pour améliorer les performances, BSD a introduit un appel système
.BR vfork ()
qui ne copie pas l'espace d'adressage du père, mais le partage avec le fils.
Le processus père était suspendu tant que le fils utilisait les ressources.
L'utilisation de
.BR vfork ()
était loin d'être facile, car pour éviter de modifier les données du processus
père, il fallait être capable de déterminer quelles variables se trouvaient dans
des registres du processeur.
.SH BOGUES
Il est regrettable que Linux ait ressuscité ce spectre du passé. La page de manuel
de BSD indique que cet appel système sera supprimé, et qu'il ne faut pas
essayer de tirer profit du partage mémoire induit par
.BR vfork ().


En théorie, la description standard ne nous autorise pas à utiliser
.BR vfork (),
car l'appel
.BR exec ()
suivant peut échouer, et ce qui se produit ensuite est indéfini.


Les détails de la gestion des signaux sont compliqués, et varient suivant
les systèmes.

Sous Linux (2.3.25)
.BR strace (1)
ne peut pas suivre un appel
.BR vfork ()
et nécessite un patch du noyau.
.SH HISTORIQUE
L'appel système
.BR vfork()
est apparu dans BSD 3.0. Dans BSD 4.4, il est devenu synonyme de
.BR fork (),
mais NetBSD l'a réintroduit à nouveau.
Sous Linux, il fut l'équivalent de
.BR fork()
jusqu'au noyau 2.2.0-pre-6. Depuis le 2.2.0-pre-9 il s'agit d'un
appel système indépendant. Le support dans la bibliothèque a été
introduit dans la glibc 2.0.112.
.SH "CONFORMITÉ"
L'appel
.BR vfork ()
est assez similaire aux appels du même nom sous d'autres systèmes d'exploitation.
Les contraintes que les standards apportent sur cet appel sont plus relâchées que
celles sur
.BR fork (),
ainsi il est possible d'avoir une implémentation conforme où les deux appels sont
synonymes. En particulier, un programmeur ne doit pas s'appuyer sur le fait
que le père reste bloqué jusqu'à un appel
.BR execve (),
ou
.BR _exit (),
ni sur le comportement de la mémoire partagée.
.SH "VOIR AUSSI"
.BR clone (2),
.BR execve (2),
.BR fork (2),
.BR wait (2)
.SH TRADUCTION
.PP
Ce document est une traduction réalisée par Christophe Blaess
<http://www.blaess.fr/christophe/> le 9\ octobre\ 1996
et révisée le 2\ mai\ 2006.
.PP
L'équipe de traduction a fait le maximum pour réaliser une adaptation
française de qualité. La version anglaise la plus à jour de ce document est
toujours consultable via la commande\ : «\ \fBLANG=en\ man\ 2\ vfork\fR\ ».
N'hésitez pas à signaler à l'auteur ou au traducteur, selon le cas, toute
erreur dans cette page de manuel.
