.\" (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\" Modified Sat Jul 24 17:28:34 1993 by Rik Faith (faith@cs.unc.edu)
.\"
.\" Traduction 20/10/1996 par Christophe Blaess (ccb@club-internet.fr)
.\" MàJ LDP 1.53
.\" MàJ 25/07/2003 LDP-1.56
.TH LOCALE 7 "25 juillet 2003" LDP "Manuel de l'administrateur Linux"
.SH NOM
locale \- Description du support multilingue.
.SH SYNOPSIS
.nf
.B #include <locale.h>
.fi
.SH DESCRIPTION
Une localisation est un ensemble de règles linguistiques et culturelles.
Ceci couvre des aspects tels que la langue utilisée pour les messages,
le jeu de caractères, les conventions lexicographiques etc...
Un programme doit être capable de déterminer sa localisation et
d'agir en conséquence pour être portable dans divers environnements
culturels.
.PP
Le fichier d'en\-tête
.B <locale.h>
déclare les types de données, les fonctions et les macros utilisés
pour ces tâches.
.PP
Les fonctions qu'il déclare sont
.B setlocale()
pour indiquer la localisation et
.B localeconv()
pour obtenir des informations sur la mise en forme des nombres.
.PP
Il existe différentes catégories d'informations locales qui peuvent
être utiles à un programme. Elles sont déclarées en tant que macros.
En les utilisant comme premier argument de la fonction
.BR setlocale() ,
il devient possible de fixer l'une de ces informations :
.TP
.B LC_COLLATE
est utilisé pour modifier le comportement des fonctions
.B strcoll()
et
.BR strxfrm() ,
qui permettent les comparaisons de chaînes dans l'alphabet local.
Par exemple le double-s allemand, est ordonné comme 'ss'.
.TP
.B LC_TYPE
permet de modifier les manipulations et classifications de caractères,
comme celles des fonctions
.B isupper()
et
.BR toupper() ,
et celles des fonctions travaillant sur des caractères multi\-octets
comme
.B mblen()
ou
.BR wctomb() .
.TP
.B LC_MONETARY
modifie les informations renvoyées par
.B localeconv()
pour décrire la mise en forme habituelle des nombres, en accord avec des
détails comme le point décimal ou la virgule décimale. Ces informations
sont utilisées par les fonctions
.BR strfmon() .
.TP
.B LC_MESSAGES
configure la langue utilisée pour afficher les messages, et la saisie de
réponses affirmatives ou négatives. La bibliothèque C GNU contient les
fonctions
.BR gettext() ,
.BR ngettext() ,
et
.B rpmatch()
pour aider à utiliser ces données. Les fonctions de la famille Gettext
obéissent aussi à la variable d'environnement
.BR LANGUAGE .
.TP
.B LC_NUMERIC
modifie les informations utilisées par les fonctions des familles
.B printf()
et
.BR scanf() ,
lorsqu'elles doivent utiliser la configuration locale. Ces données
peuvent également être obtenues avec la fonction
.BR localeconv() .
.TP
.B LC_TIME
modifie le comportement de la fonction
.B strftime()
affichant l'heure dans un format local. Par exemple la plupart de
l'Europe utilise un format horaire sur 24 heures, alors que les
USA utilisent un format sur 12 heures.
.TP
.B LC_ALL
regroupe toutes les catégories ci-dessus.
.PP
Si le second argument de la fonction
.B setlocale()
est une chaîne de caractères vide,
.BR """""" ,
ceci correspond à la localisation par défaut, déterminée avec les
étapes suivantes :
.IP 1.
Si une variable d'environnement 
.BR LC_ALL 
n'est pas nulle, sa valeur est utilisée.
.IP 2.
Si une variable d'environnement ayant le même nom que les catégories
mentionnées ci\-dessus est non nulle, sa valeur est utilisée pour
la catégorie en question.
.IP 3.
Si une variable d'environnement 
.BR LANG 
est non nulle, sa valeur est utilisée.
.PP
Les valeurs concernant la mise en forme numérique sont disponibles
dans une structure
.BR "struct lconv" ,
renvoyée par la fonction
.BR localeconv() ,
déclarée ainsi :
.nf
struct lconv
{
  /* -------- Informations numériques (non\-monétaires) ------- */

  char *decimal_point;    /* Séparateur décimal                 */
  char *thousands_sep;    /* Séparateur des milliers            */
  /* 
   * Chaque élément  indique  un  nombre de chiffres  dans  chaque
   * groupe.
   * Les éléments d'indice les plus élevés correspondent aux grou-
   * pes les plus à gauche.
   * Un élément de valeur CHAR_MAX signifie l'arrêt du groupement.
   * Un élément de valeur 0  signifie que l'élément précédent est
   * utilisé pour tous les groupes plus à gauche.
   *
   * NDT : c'est pas clair ? ben, la V.O. non plus !  ;-)
   */
  char *grouping;

  /* ----------------- Informations monétaires ---------------- */

  /* Les trois premiers caractères correspondent au symbole     */
  /* monétaire d'après ISO 4217. Le quatrième symbole est le    */
  /* séparateur, le cinquième est '\\0'.                         */
  char *int_curr_symbol;
  char *currency_symbol;	/* Symbole monétaire local.     */
  char *mon_decimal_point;	/* Caractère séparateur décimal */
  char *mon_thousands_sep;	/* Caract. séparateur milliers  */
  char *mon_grouping;		/* Comme 'grouping' (ci\-dessus) */
  char *positive_sign;		/* Signe pour valeurs positives */
  char *negative_sign;		/* Signe pour valeurs négatives */
  char int_frac_digits;		/* Int'l fractional digits.     */
  char frac_digits;		/* Local fractional digits.     */
  /* 1 : le symbole monétaire précède les valeurs positives,    */
  /* 0 : le symbole monétaire suit les valeurs positives.       */
  char p_cs_precedes;
  /* 1 si un espace sépare le symbole monétaire d'une valeur +  */
  char p_sep_by_space;
  /* 1 : le symbole monétaire précède les valeurs négatives,    */
  /* 0 : le symbole monétaire suit les valeurs négatives.       */
  char n_cs_precedes;
  /* 1 si un espace sépare le symbole monétaire d'une valeur -  */
  char n_sep_by_space;
  /* Positions des signes plus et moins :
   * 0 Parenthèses autour de la valeur et du symbole monétaire.
   * 1 Le signe précède la valeur et le symbole monétaire.
   * 2 Le signe suit la valeur et le symbole monétaire.
   * 3 Le signe précède immédiatement le symbole monétaire.
   * 4 Le signe suit immédiatement le symbole monétaire.
   */
  char p_sign_posn;
  char n_sign_posn;
};
.fi
.SH "CONFORMITÉ"
.nf
POSIX.1
.fi
Les fonctions de la bibliothèque Gnu Gettext sont décrites dans le
document LI18NUX2000.
.SH "VOIR AUSI"
.BR setlocale (3),
.BR localeconv (3),
.BR locale (1),
.BR localedef (1),
.BR nl_langinfo (3),
.BR gettext (3),
.BR ngettext (3),
.BR rpmatch (3),
.BR strfmon (3),
.BR strcoll (3),
.BR strxfrm (3),
.BR strftime (3)

.SH TRADUCTION
Christophe Blaess, 1996-2003.

