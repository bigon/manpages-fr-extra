.\" Copyright (c) 1990, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)strtod.3	5.3 (Berkeley) 6/29/91
.\"
.\" Modified Sun Aug 21 17:16:22 1994 by Rik Faith (faith@cs.unc.edu)
.\"
.\"
.\" Traduction 10/11/1996 par Christophe Blaess (ccb@club-internet.fr)
.\"
.\" Mise à jour 06/06/2001 - LDP-man-pages-1.36
.\" Mise à jour 16/01/2002 (LDP man-pages 1.38)
.\" MàJ 21/07/2003 LDP-1.56
.TH STRTOD 3 "21 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
strtod, strtof, strtold \- Conversion d'une chaîne ASCII en nombre réel.
.SH SYNOPSIS
.B #include <stdlib.h>
.sp
.BI "double strtod (const char *" nptr ", char **" endptr );
.br
.BI "float strtof(const char *" nptr ", char **" endptr );
.br
.BI "long double strtold(const char *" nptr ", char **" endptr );
.SH DESCRIPTION
Les fonctions
.BR strtod ,
.BR strtof ,
et
.BR strtold
convertissent la portion initiale de la chaîne pointée par
.I nptr
en un réel de type
.BR double ,
.BR float ,
et
.B long double
respectivement.

La (portion initiale de la) chaîne attendue est de la forme suivante :
.IP
Des espaces éventuels en tête, ou des caractères interprétes comme
tels par \fIisspace\fP(3)
.IP
Un éventuel signe plus (``+'') ou moins (``-'')
.IP
Un nombre décimal ou hexadécimal, ou un infini, ou encore un
non-nombre NAN (not-a-number).
.LP
Un
.I "nombre décimal"
consiste en une séquence non-vide de chiffres décimaux, pouvant contenir
un point décimal (dépendant de la localisation, mais habituellement ``.''),
suivi éventuellement d'un exposant décimal.
Ce dernier est constitué d'un ``E'' ou ``e'' suivi éventuellement du signe
plus ou du signe moins, puis une séquence non-vide de de chiffres décimaux,
indiquant la multiplication par une puissance de 10.
.LP
Un
.I "nombre hexadécimal"
commence ``0x'' ou ``0X'', suivi d'une séquence non-vide de chiffres hexadécimaux,
pouvant contenir un point décimal suivi éventuellement d'un exposant binaire.
Ce dernier est constitué d'un ``P'' ou ``p'' suivi éventuellement du signe
plus ou du signe moins, puis une séquence non-vide de de chiffres décimaux,
indiquant la multiplication par une puissance de 2. Il ne peut y avoir plus
d'un point ou d'un exposant binaire.
.LP
Un
.I infini
est soit ``INF'', soit ``INFINITY'', sans tenir compte des différences entre
majuscules et minuscules.
.LP
Un
.I "non-nombre"
est ``NAN'' (sans différences majuscules/minuscules) suivi éventuellement par `(',
une séquence de caractères, et `)'.
La chaîne de caractères indique le type de non-nombre de manière dépendant
de l'implémentation.

.SH "VALEUR RENVOYÉE"
Ces fonctions renvoient la valeur convertie si c'est possible

Si
.I endptr
n'est pas
.BR NULL ,
un pointeur sur le caractère suivant le dernier caractère converti y
est stocké.

Si aucune conversion n'est possible, la fonction renvoie zéro, et
la valeur de 
.I nptr
est stockée dans
.IR endptr .

Si la valeur convertie déclenche un débordement (overflow), la fonction renvoie
plus ou moins
.B HUGE_VAL
.RB ( HUGE_VALF ,
.BR HUGE_VALL )
et \fIerrno\fP contient le code d'erreur
.BR ERANGE .
Si la valeur convertie déclenche un debordement inférieur (underflow), la
fonction renvoie 0, et \fIerrno\fP contient le code d'erreur
.BR ERANGE .

.SH ERREURS
.TP
.B ERANGE
Débordement.
.SH "CONFORMITÉ"
ANSI C décrit
.BR strtod .
C99 décrit les deux autres fonctions.
.SH "VOIR AUSSI"
.BR atof (3),
.BR atoi (3),
.BR atol (3),
.BR strtol (3),
.BR strtoul (3)
.SH TRADUCTION
Christophe Blaess, 1996-2003.
