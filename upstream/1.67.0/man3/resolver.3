.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 11:01:53 1993 by Rik Faith (faith@cs.unc.edu)
.\"
.\" Traduction 06/11/1996 par Christophe Blaess (ccb@club-internet.fr)
.\" MàJ 21/07/2003 LDP-1.56
.\"
.TH RESOLVER 3 "21 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
resolver, res_init, res_query, res_search, res_querydomain, res_mkquery, res_send, dn_comp, dn_expand \- Routines de résolution de noms.
.SH SYNOPSIS
.nf
.B #include <netinet/in.h>
.B #include <arpa/nameser.h>
.B #include <resolv.h>
.B extern struct state _res;
.sp
.B int res_init (void);
.sp
.BI "int res_query (const char *" dname ", int " classe ", int " type ,
.RS
.BI "unsigned char *" answer ", int " anslen );
.RE
.sp
.BI "int res_search (const char *" dname ", int " classe ", int " type ,
.RS
.BI "unsigned char *" answer ", int " anslen );
.RE
.sp
.BI "int res_querydomain (const char *" name ", const char *" domain ,
.RS
.BI "int " classe ", int " type ", unsigned char *" answer ", int " anslen );
.RE
.sp
.BI "int res_mkquery (int " op ", const char *" dname ", int " classe ", int " type ,
.RS
.BI "char *" data ", int " datalen ", struct rrec *" newrr ", char *" buf , 
.BI "int " buflen );
.RE
.sp
.BI "int res_send (const char *" msg ", int " msglen ", char *" answer , 
.RS
.BI "int " anslen );
.RE
.sp
.BI "int dn_comp (unsigned char *" exp_dn ", unsigned char *" comp_dn ,
.RS
.BI "int " length ", unsigned char **" dnptrs ", unsigned char *" exp_dn ,
.BI "unsigned char **" lastdnptr );
.RE
.sp
.BI "int dn_expand (unsigned char *" msg ", unsigned char *" eomorig ,
.RS
.BI "unsigned char *" comp_dn ", unsigned char *" exp_dn ", int " length );
.RE
.fi
.SH DESCRIPTION
Ces fonctions interrogent, et interprètent les réponses de serveurs de
noms Internet.
.PP
La fonction \fBres_init()\fP lit les fichiers de configuration (voir
resolv+(8)) pour obtenir le nom de domaine par défaut, l'ordre de recherche
et l'adresse du (des) serveur(s) de noms. 
Si aucun serveur n'est donné, on essaye de contacter l'hôte local.
Si aucun domaine n'est donné, on utilise celui associé à l'hôte local.
Ceci peut être surchargé par la variable d'environnement LOCALDOMAIN.
\fBres_init()\fP est normalement exécutée lors du premier appel à l'une des
autres fonctions.
.PP
La fonction \fBres_query()\fP interroge le serveur de noms pour le
nom de domaine pleinement qualifié \fIname\fP du \fItype\fP spécifié,
et de la \fIclasse\fP donnée. La réponse est placée dans le buffer
\fIanswer\fP de longueur \fIanslen\fP qui doit être fourni par l'appelant.
.PP
La fonction \fBres_search()\fP interroge un serveur, et attend la réponse,
comme \fBres_query()\fP, mais implémente de plus les règles de recherche
et de valeurs par défaut contrôlées par RES_DEFNAMES et RES_DNSRCH 
(Voir les options de \fI_res\fP plus bas).
.PP
La fonction \fBres_querydomain()\fP interroge le serveur en appelant
\fBres_query()\fP avec la concaténation de \fIname\fP et \fIdomain\fP.
.PP
Les fonctions suivantes sont des routines bas-niveau utilisées par
\fBres_query()\fP.
.PP
La fonction \fBres_mkquery()\fP construit une requête dans \fIbuf\fP
de longueur \fIbuflen\fP concernant le nom de domaine \fIdname\fP.
Le type \fIop\fP de requête est généralement QUERY, mais on peut également
utiliser l'un des types définis dans \fI<arpa/nameser.h>\fP.
\fInewrr\fP ne sert à rien actuellemennt.
.PP
La fonction \fBres_send()\fP envoie une requête préformatée, située dans
\fImsg\fP de longueur \fImsglen\fP et renvoie la réponse dans \fIanswer\fP
qui est de longueur \fIanslen\fP.  Elle appellera \fBres_init()\fP, si ça
n'a pas encore été fait.
.PP
La fonction \fBdn_comp()\fP compresse le nom de domaine \fIexp_dn\fP
et le stocke dans le buffer \fIcomp_dn\fP de longueur \fIlength\fP.
La compression utilise une table de pointeurs \fIdnptrs\fP vers les
noms précédemment compressés du message en cours. Le premier pointeur
vise le début du message, et la table se termine par NULL.
La limite de la table est indiquée par \fIlastdnptr\fP.
Si \fIdnptr\fP est NULL, les noms de domaines ne sont pas compressés.
Si \fIlastdnptr\fP est NULL, la liste d'étiquettes n'est pas mise à jour.
.PP
La fonction \fPdn_expand()\fP développe le nom de domaine compressé
\fIcomp_dn\fP en un nom de domaine complet, qui est ensuite placé dans le buffer
\fIexp_dn\fP de taille \fIlength\fP.  Le nom compressé est contenu dans une
requête, ou dans un message de réponse, et \fImsg\fP pointe sur le début du
message.
.PP
Les routines de résolution de noms utilisent une configuration globale
et des informations d'état contenues dans la structure \fI_res\fP,
définie dans \fI<resolv.h>\fP.
Le seul champ habituellement manipulé par l'utilisateur est \fI_res.options\fP.
Il contient un \fIOU binaire\fP entre les options suivantes :
.sp
.TP
.B RES_INIT
Vrai si \fBres_init()\fP a été appelé.
.TP
.B RES_DEBUG
Afficher les messages de débugging.
.TP
.B RES_AAONLY
N'accepter que les réponses des serveurs autoritatifs ([NDT] "autoritatif" est
un barbarisme, voir "L'administration réseau sous Linux" chapitre 2.6.4
pour une justification de son emploi) \fBres_send()\fP continue jusqu'à trouver
un serveur autoritatif, ou renvoie une erreur. Pas encore implémenté.
.TP
.B RES_USEVC
Utiliser des connexions TCP pour les interrogations plutôt que des datagrammes
UDP.
.TP
.B RES_PRIMARY
N'interroger que le serveur de domaines primaire.
.TP
.B RES_IGNTC
Ignorer les erreurs de troncature. Ne pas ré-essayer avec TCP. Pas encore
implémenté.
.TP
.B RES_RECURSE
Fixer dans les requêtes le bit de récursion. La récursion est prise en
charge par le serveur de nom du domaine, et pas par \fBres_send()\fP.
[Active par défaut].
.TP
.B RES_DEFNAMES
\fBres_search()\fP ajoutera le nom de domaine par défaut aux noms
simples, par exemple ceux ne contenant pas de point.
[Active par defaut].
.TP
.B RES_STAYOPEN
Utilisée avec RES_USEVC pour garder ouverte une connexion TCP entre les
interrogations successives.
.TP
.B RES_DNSRCH
\fBres_search()\fP recherchera les noms d'hôtes dans le domaine courant,
et dans les domaines parents. Cette option est utilisée par
.BR gethostbyname (3).
[Active par défaut].
.SH "VALEUR RENVOYÉE"
La fonction \fBres_init()\fP renvoie 0 si elle réussit, ou \-1 si une erreur
se produit.
.PP
Les fonctions \fBres_query()\fP, \fBres_search()\fP, \fBres_querydomain()\fP,
\fBres_mkquery()\fP et \fBres_send()\fP renvoient la longueur de la réponse, ou
\-1 si une erreur se produit.
.PP
Les fonctions \fBdn_comp()\fP et \fBdn_expand()\fP renvoient la longueur du nom
compressé, ou \-1 si une erreur se produit.
.SH FICHIERS
.nf
/etc/resolv.conf   Configuration de la résolution de noms.
/etc/host.conf     Configuration de la résolution de noms.
.fi
.SH "CONFORMITÉ"
BSD 4.3
.SH "VOIR AUSSI"
.BR gethostbyname (3),
.BR hostname (7),
.BR named (8),
.BR resolv+ (8)
.SH TRADUCTION
Christophe Blaess, 1996-2003.
