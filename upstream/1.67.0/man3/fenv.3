.\" Copyright (c) 2000 Andries Brouwer (aeb@cwi.nl)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" Traduction 31/08/2000 par Christophe Blaess (ccb@club-internet.fr)
.\" LDP 1.31
.\" Màj 04/06/2001 LDP-1.36
.\" Màj 21/07/2003 LDP-1.56
.\" Màj 30/07/2003 LDP-1.58
.\" Màj 27/06/2005 LDP-1.60
.\"
.TH FENV 3 "30 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag, fetestexcept, fegetenv, fegetround, feholdexcept, fesetround, fesetenv, feupdateenv, fedisableexcept, feenableexcept, fegetexcept \- Gestion des exceptions C99 pour les arrondis et les erreurs en virgule flottante.
.SH SYNOPSIS
.nf
.B #include <fenv.h>
.sp
.BI "void feclearexcept(int " excepts );
.br
.BI "void fegetexceptflag(fexcept_t *" flagp ", int " excepts );
.br
.BI "void feraiseexcept(int " excepts );
.br
.BI "void fesetexceptflag(const fexcept_t *" flagp ", int " excepts );
.br
.BI "int fetestexcept(int " excepts );
.sp
.B "int fegetround(void);"
.br
.BI "int fesetround(int " rounding_mode );
.sp
.BI "void fegetenv(fenv_t *" envp );
.br
.BI "int feholdexcept(fenv_t *" envp );
.br
.BI "void fesetenv(const fenv_t *" envp );
.br
.BI "void feupdateenv(const fenv_t *" envp );
.fi
.SH DESCRIPTION
Ces onze fonctions ont été définies dans le C99, et permettent de paramétrer
les arrondis et les gestions d'erreurs (débordement, division par zéro, etc.)
en virgule flottante.
.SS Exceptions
L'exception DivideByZero se produit quand une opération sur des nombres finis
donne un infini comme réponse exacte.
.LP
L'exception Overflow se produit quand un résultat doit être représenté par un
nombre en virgule flottante, mais que sa valeur absolue est trop grande
pour être représentée par un nombre fini.
.LP
L'exception Underflow se produit quand un résultat doit être représenté par un
nombre en virgule flottante, mais que sa valeur absolue est trop petite pour
être représentée.
.LP
L'exception Inexact se produit quand le résultat arrondi d'une opération
n'est pas égal au résultat en précision infinie. Elle peut se déclencher
quand les exceptions Overflown ou Underflow se produisent.
.LP
L'exception Invalid se produit quand il n'y a pas de résultat bien défini
pour une opération, comme 0/0 ou infini-infini ou sqrt(-1).
.SS "Gestion des exceptions"
Les exceptions sont représentées de deux manières\ : en tant qu'un unique bit
(exception présente ou absente) correspondant de manière dépendant de
l'implémentation avec une position au sein d'un entier, et aussi en tant que
structure opaque pouvant véhiculer plus d'information
concernant l'exception (éventuellement l'adresse du code déclenchant l'erreur).
.LP
Chacune des macros
.BR FE_DIVBYZERO ,
.BR FE_INEXACT ,
.BR FE_INVALID ,
.BR FE_OVERFLOW ,
.BR FE_UNDERFLOW
est définie lorsque l'implémentation supporte la gestion
de l'exception correspondante. Les bits sont alors définis,
ainsi on peut appeler par exemple les fonctions de gestion
des exceptions avec un argument entier
.BR FE_OVERFLOW | FE_UNDERFLOW .
D'autres exceptions peuvent être supportées. La macro
.B FE_ALL_EXCEPT
est un masque regroupant par OU binaire tous les bits des exceptions supportées.
.PP
La fonction
.B feclearexcept
efface les exceptions supportées représentées par les bits présents
dans son argument.
.LP
La fonction
.B fegetexceptflag
stocke une représentation de l'état des exceptions contenues dans
son argument
.I excepts
dans l'objet opaque
.RI * flagp .
.LP
La fonction
.B feraiseexcept
déclenche les exceptions supportées représentées par les bits de l'argument
.IR excepts .
.LP
La fonction
.B fesetexceptflag
fixe l'état des exceptions représentées par l'argument
.I excepts
en employant la valeur
.RI * flagp .
Cette dernière doit être le résultat d'un appel préalable à
.B fegetexceptflag
avec un dernier argument contenant au moins tous les bits présents dans
.IR excepts .
.LP
La fonction
.B fetestexcept
renvoie un mot dont les bits également présents dans
l'argument
.I excepts
seront positionnés si l'exception correspondante est présente.
.SS Arrondis
Chacune des macros
.BR FE_DOWNWARD ,
.BR FE_TONEAREST ,
.BR FE_TOWARDZERO ,
.BR FE_UPWARD
est définie lorsque l'implémentation supporte l'usage
de la direction d'arrondi correspondante.
.LP
La fonction
.B fegetround
renvoie la macro correspondant au mode d'arrondi
en cours.
.LP
La fonction
.B fesetround
fixe le mode d'arrondi tel qu'il est spécifié par son argument
et renvoie zéro lorsqu'elle réussit.
.SS "Environnement en virgule flottante."
L'environnement de travail en virgule flottante, y compris
les modes de contrôle et les états peuvent être manipulés
sous forme d'un objet opaque de type
.IR fenv_t .
L'environnement par défaut, est représenté par
.B FE_DFL_ENV
(de type
.IR "const fenv_t *" ).
Il s'agit de la configuration de l'environnement au démarrage du programme
et elle est définie par ISO C comme ayant un arrondi au plus proche, toutes
les exceptions effacées et un mode non-stop (continuer sur exception).
.LP
La fonction
.B fegetenv
sauve l'environnement de travail en virgule flottante en cours dans
l'objet
.RI * envp .
.LP
La fonction
.B feholdexcept
effectue la même chose, puis efface tous les drapeaux d'exceptions,
et bascule si possible sur un mode non-stop (continuer en présence d'exceptions).
Elle renvoie zéro si elle réussit.
.LP
La fonction
.B fesetenv
recharge l'environnement de travail en virgule flottante à
partir de l'objet
.RI * envp .
Cet objet doit être valide, c'est à dire être le résultat de
.BR fegetenv ,
de
.B feholdexcept
ou égal à
.BR FE_DFL_ENV .
Cet appel ne déclenche pas les exceptions.
.LP
La fonction
.B feupdateenv
installe l'environnement en virgule flottante représenté par l'objet
.RI * envp ,
sauf que les exceptions déjà déclenchées ne sont pas effacées.
Après l'appel de cette fonction, les exceptions déclenchées seront un OU
binaire entre l'ensemble précédent, et celui contenu dans
.RI * envp .
Comme précédemment, l'objet pointé par
.I envp
doit être valide.

.SH "DÉTAILS GNU"
Si possible, la bibliothèque GNU LibC définit une macro
.B FE_NOMASK_ENV
qui représente l'environnement quand toutes les exceptions déclenchent un
appel. On peut tester la présence de cette macro en utilisant
.BR #ifdef .
Elle n'est définie que si la constante symbolique
.B _GNU_SOURCE
est définie.
Le standard C99 ne définit pas de manière de fixer des bits individuels dans
le masque, par exemple pour intercepter des exceptions particulières.
La GLibC 2.2 supporte
.I feenableexcept
et
.I fedisableexcept
pour fixer individuellement des interceptions, et
.I fegetexcept
pour demander l'état.
.sp
.nf
.B "#define _GNU_SOURCE"
.br
.B "#include <fenv.h>"
.sp
.BI "int feenableexcept (int " excepts );
.br
.BI "int fedisableexcept (int " excepts );
.br
.BI "int fegetexcept (void);"
.br
.fi
.LP
Les fonctions
.B feenableexcept
et
.B fedisableexcept
activent (désactivent) l'interception pour chaque exception représentée par
.I excepts
et renvoient l'ensemble précédent des exceptions activées lorsqu'elles
réussissent, et \-1 sinon.
La fonction
.B fegetexcept
renvoie l'ensemble des exceptions actuellement activées.

.SH
Effectuez l'édition des liens avec l'option
.BR \-lm .

.SH CONFORMITÉ
IEC 60559 (IEC 559:1989), ANSI/IEEE 854, ISO C99 (ISO/IEC 9899:1999).
.SH TRADUCTION
Christophe Blaess, 2000-2003.

