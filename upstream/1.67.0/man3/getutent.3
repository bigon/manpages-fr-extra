.\" Copyright 1995 Mark D. Roth (roth@uiuc.edu)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Solaris manpages
.\"
.\" Traduction 03/11/1996 par Christophe Blaess (ccb@club-internet.fr)
.\" Màj 25/01/2002 LDP-1.47
.\" Màj 21/07/2003 LDP-1.56
.\" Màj 20/07/2005 LDP-1.64
.\"
.TH GETUTENT 3 "21 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
getutent, getutid, getutline, pututline, setutent, endutent, utmpname \- Accéder aux enregistrements utmp.
.SH SYNOPSIS
.B #include <utmp.h>
.sp
.B struct utmp *getutent (void);
.br
.BI "struct utmp *getutid (struct utmp *" ut );
.br
.BI "struct utmp *getutline (struct utmp *" ut );
.sp
.BI "void pututline (struct utmp *" ut );
.sp
.B void setutent (void);
.br
.B void endutent (void);
.sp
.BI "void utmpname (const char *" file );
.SH DESCRIPTION
\fButmpname()\fP indique le nom du fichier au format utmp à utiliser avec les
autres fonctions. Si \fButmpname()\fP n'est pas appelé avant les autres fonctions,
elles utiliseront le fichier \fB_PATH_UTMP\fP, défini dans \fI<paths.h>\fP.
.PP
\fBsetutent()\fP ramène le pointeur au début du fichier utmp. Il est généralement
conseillé d'appeler cette fonction au début du programme.
.PP
\fBendutent()\fP ferme le fichier utmp.  Ceci devrait être appelé une fois que le
programme a terminé ses accès au fichier.
.PP
\fBgetutent()\fP lit une ligne du fichier utmp, à la position courante.
Elle renvoie un pointeur sur une structure contenant les divers champs
de la ligne.
.PP
\fBgetutid()\fP effectue une recherche dans le fichier utmp, à partir de la position
courante, en se basant sur \fIut\fP.
Si \fIut\fP->ut_type vaut \fBRUN_LVL\fP, \fBBOOT_TIME\fP,
\fBNEW_TIME\fP, ou \fBOLD_TIME\fP,
\fBgetutid()\fP recherchera le premier enregistrement dont le champ
ut_type corresponde à \fIut\fP->ut_type.

Si \fIut\fP->ut_type vaut \fBINIT_PROCESS\fP, \fBLOGIN_PROCESS\fP,
\fBUSER_PROCESS\fP, ou \fBDEAD_PROCESS\fP,
\fBgetutid()\fP recherchera le premier enregistrement dont le champ
ut_id corresponde à \fIut\fP->ut_id.
.PP
\fBgetutline()\fP effectue une recherche dans le fichier utmp, à partir de la position
courante.
Elle examine les enregistrements dont le champ ut_type est \fBUSER_PROCESS\fP
ou \fBLOGIN_PROCESS\fP et renvoie le premier dont le champ \fBut_line\fP corresponde
à \fIut\fP->\fBut_line\fP.
.PP
\fBpututline()\fP écrit la structure utmp \fIut\fP dans le fichier utmp. Elle
utilise \fBgetutid()\fP pour rechercher l'emplacement ou insérer le nouvel
enregistrement.
Si elle ne trouve pas d'emplacement approprié, \fBpututline()\fP ajoutera le
nouvel enregistrement à la fin du fichier.
.SH "VALEUR RENVOYÉE"
\fBgetutent\fP(), \fBgetutid\fP(), \fBgetutline\fP() et \fBpututline\fP()
renvoient un pointeur sur une \fBstruct utmp\fP, ou NULL en cas d'erreur.
Cette structure \fBstruct utmp\fP est allouée statiquement, et peut être
écrasée par des appels successifs.
.SH "VERSIONS RÉENTRANTES"
Les fonctions ci-dessus ne sont pas sûres dans un contexte de fils
(Ndt\ : thread). La GlibC ajoute les versions réentrantes.
.sp
.nf
.BR "#define _GNU_SOURCE" "    /* ou _SVID_SOURCE ou _BSD_SOURCE */
.B #include <utmp.h>
.sp
.BI "int getutent_r(struct utmp *" ubuf ", struct utmp **" ubufp );
.sp
.BI "int getutid_r(struct utmp *" ut ,
.BI "              struct utmp *" ubuf ", struct utmp **" ubufp );
.sp
.BI "int getutline_r(struct utmp *" ut ,
.BI "                struct utmp *" ubuf ", struct utmp **" ubufp );
.fi
.sp
Ces fonctions sont des extentions GNU, analogues aux fonctions de même nom
sans le suffixe «\ _r\ ». Le paramètre
.I ubuf
fournit à ces fonctions un endroit où stocker leur résultat.
Si elles réussissent elles renvoient 0 et un pointeur vers le résultat dans
.RI * ubufp .
Si elles échouent, ces fonctions renvoient \-1.
.SH EXEMPLE
L'exemple suivant ajoute et retire un enregistrement utmp, en supposant
qu'il est invoqué depuis un pseudo-terminal. Dans une véritable application,
il faudrait vérifier les valeurs renvoyées par \fBgetpwuid\fP() et
\fBttyname\fP().
.PP
.nf
#include <string.h>
#include <stdlib.h>
#include <pwd.h>
#include <unistd.h>
#include <utmp.h>

int
main (int argc, char * argv [])
{
   struct utmp entry;

   system ("echo Avant d ajouter un enregistrement :;who");

   entry . ut_type = USER_PROCESS;
   entry . ut_pid  = getpid();

   strcpy (entry . ut_line, ttyname (0) + strlen ("/dev/"));

   /* ne fonctionne qu'avec les pseudo tty /dev/tty[pqr][0-9a-z] */

   strcpy (entry . ut_id, ttyname (0) + strlen ("/dev/tty"));

   time (& entry.ut_time);
   strcpy (entry . ut_user, getpwuid (getuid ()) -> pw_name);
   memset (entry . ut_host, 0, UT_HOSTSIZE);
   entry . ut_addr = 0;
   setutent ();
   pututline (& entry);

   system ("echo Apres l ajout :;who");

   entry . ut_type = DEAD_PROCESS;
   memset (entry.ut_line, 0, UT_LINESIZE);
   entry . ut_time = 0;
   memset (entry . ut_user, 0, UT_NAMESIZE);
   setutent ();
   pututline (& entry);

   system ("echo Apres suppression de l enregistrement :;who");

   endutent ();

   return (0);
}
.fi
.SH FICHIERS
/var/run/utmp - Base de données des utilisateurs connectés.
.br
/var/log/wtmp - Base de données des connexions passées.
.SH "CONFORMITÉ"
XPG 2, SVID 2, Linux FSSTND 1.2
.LP
Dans XPG2 et SVID2, la fonction \fIpututline()\fP est décrite comme
de type void, et c'est le cas sur de nombreux systèmes
(AIX, HPUX, Linux libc5).
HPUX introduit une nouvelle fonction \fI_pututline()\fP avec le prototype
fourni plus haut pour \fIpututline()\fP (comme avec la libc5 de Linux).
.LP
Toutes ces fonctions sont maintenant obsolètes sur les systèmes non-Linux.
POSIX 1003.1-2001, comme XPG4.2, ne propose aucune de ces fonctions,
mais utilise plutôt
.sp
.B #include <utmpx.h>
.sp
.B struct utmpx *getutxent(void);
.br
.B struct utmpx *getutxid(const struct utmpx *);
.br
.B struct utmpx *getutxline(const struct utmpx *);
.br
.B struct utmpx *pututxline(const struct utmpx *);
.br
.B void setutxent(void);
.br
.B void endutxent(void);
.sp
La structure \fIutmpx\fP est un sur-ensemble de la structure \fIutmp\fP,
avec des champs supplémentaires, et une version plus large des champs existants.
Les fichiers correspondants sont souvent
.I /var/*/utmpx
et
.IR /var/*/wtmpx .
.LP
D'un autre côté, la GlibC sous Linux n'utilise pas \fIutmpx\fP car sa structure
\fIutmp\fP est déjà assez grande. Les fonctions \fIgetutxent\fP
etc. sont des alias pour \fIgetutent\fP etc.
.SH "VOIR AUSSI"
.BR utmp (5)
.SH TRADUCTION
Christophe Blaess, 1996-2003.
