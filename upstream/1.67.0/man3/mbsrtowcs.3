.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single Unix specification http://www.UNIX-systems.org/online.html
.\"   ISO/IEC 9899:1999
.\"
.\" MàJ 21/07/2003 LDP-1.56
.TH MBSRTOWCS 3 "21 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
mbsrtowcs \- Convertir une séquence multi-octets en chaîne de caractères larges.
.SH SYNOPSIS
.nf
.B #include <wchar.h>
.sp
.BI "size_t mbsrtowcs (wchar_t *" dest ", const char **" src ,
.BI "                  size_t " len ", mbstate_t *" ps );
.fi
.SH DESCRIPTION
Si \fIdest\fP n'est pas un pointeur NULL, la fonction \fBmbsrtowcs\fP convertit la séquence multi-octets \fI*src\fP
en une chaîne de caractères larges débutant en \fIdest\fP. Au maximum, \fIlen\fP caractères larges seront écrits dans \fIdest\fP.
L'état de conversion \fI*ps\fP est mis à jour. La conversion est en fait réalisée en invoquant à répétition
mbrtowc(\fIdest\fP,\fI*src\fP,\fIn\fP,\fIps\fP) où \fIn\fP est un nombre positif, aussi longtemps que cet appel réussit,
en incrémentant chaque fois \fIdest\fP et en augmentant \fIsrc\fP du nombre d'octets lus. La conversion peut s'arrêter pour
trois raisons :
.PP
1. Une séquence multi-octets invalide a été rencontrée. Dans ce cas, \fI*src\fP pointera sur la séquence invalide,
et la fonction renvoie (size_t)(-1) en positionnant \fBerrno\fP à la valeur \fBEILSEQ\fP.
.PP
2. \fIlen\fP caractères larges différents de L'\\0' ont été
enregistrés en \fIdest\fP. Dans ce cas, \fI*src\fP pointe sur la séquence multi-octets suivante, et le nombre
de caractères larges écrites dans \fIdest\fP est renvoyé.
.PP
3. La séquence multi-octets a été complètement convertie, y compris le L'\\0' final (ce qui a pour effet de bord
de ramener \fI*ps\fP à l'état initial). Dans ce cas, \fI*src\fP est mis à NULL, et le nombre de caractères écrits
dans \fIdest\fP, sauf le L'\\0' final, est renvoyé.
.PP
Si \fIdest\fP est NULL, alors \fIlen\fP est ignoré, et la conversion se déroule comme précédemment, sauf que les
caractères convertis ne sont pas écrits en mémoire, et qu'aucune limite de destination n'est prise en compte.
.PP
Dans tous les cas, si \fIps\fP est un pointeur NULL, un état anonyme statique, réservé à la fonction
mbsnrtowcs est utilisé à sa place.
.PP
Le programmeur doit s'assurer qu'il y assez de place pour au moins \fIlen\fP caractères larges dans \fIdest\fP.
.SH "VALEUR RENVOYÉÉ"
La fonction \fBmbsrtowcs\fP renvoie le nombre de caractères larges placés dans la zone convertie, sans
compter le caractère nul final. Si une séquence multi-octets invalide est rencontrée, la fonction renvoie (size_t)(-1),
et \fBerrno\fP contient \fBEILSEQ\fP.
.SH "CONFORMITÉ"
ISO/ANSI C, UNIX98
.SH "VOIR AUSSI"
.BR mbstowcs (3),
.BR mbsnrtowcs (3),
.BR iconv (3)
.SH NOTES
Le comportement de \fBmbsrtowcs\fP dépend de la catégorie LC_CTYPE de la localisation.
.PP
L'utilisation d'un pointeur NULL pour \fIps\fP n'est pas sûr dans un contexte multithreads.
.SH TRADUCTION
Christophe Blaess, 2000-2003.
