.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sun Jul 25 10:53:39 1993 by Rik Faith (faith@cs.unc.edu)
.\" Added correction due to nsd@bbc.com (Nick Duffek) - aeb, 950610
.\"
.\" Traduction 10/11/1996 par Christophe Blaess (ccb@club-internet.fr)
.\" Màj 26/10/1999
.\" Màj 06/06/2001 LDP-1.36
.\" Màj 21/07/2003 LDP-1.56
.\" Màj 08/07/2005 LDP-1.63
.\"
.TH STRTOL 3 "21 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
strtol, strtoll, strtoq \- Convertir une chaîne en un entier long.
.SH SYNOPSIS
.nf
.B #include <stdlib.h>
.sp
.BI "long int strtol (const char *" nptr ", char **" endptr ", int " base );
.sp
.BI "long long int"
.BI "strtoll(const char *" nptr ", char **" endptr ", int " base );
.fi
.SH DESCRIPTION
La fonction \fBstrtol()\fP convertit la chaîne \fInptr\fP en un entier
long en fonction de l'argument \fIbase\fP, qui doit être dans l'intervalle
2 à 36 (bornes comprises), ou avoir la valeur spéciale 0.
.PP
La chaîne peut commencer par un nombre quelconque d'espaces ou de
caractères interprétés comme tels par
.BR isspace (3) .
Un signe éventuel «\ +\ » ou «\ -\ » peut suivre.
Si \fIbase\fP vaut 0 ou 16, la chaîne peut inclure un préfixe
«\ 0x\ » et le nombre sera interprété en base 16. Sinon, une \fIbase\fP
valant zéro est interprétée comme 10 (décimale) sauf si le caractère
suivant est «\ 0\ », auquel cas la base est 8 (octale).
.PP
Le reste de la chaîne est converti en une valeur entière longue, en
s'arrêtant au premier caractère qui ne soit pas un chiffre valide.
Dans les bases supérieures à 10, la lettre «\ A\ » (majuscule ou minuscule)
représente 10, «\ B\ » represente 11, et ainsi de suite jusqu'à «\ Z\ »
représentant 35.
.PP
Si \fIendptr\fP n'est pas NULL, \fBstrtol()\fP stocke l'adresse du premier
caractère invalide dans \fI*endptr\fP.  S'il n'y avait aucun chiffre valide,
\fBstrtol()\fP stocke la valeur originale de \fInptr\fP dans
\fI*endptr\fP (et renvoie 0).
En particulier, si \fI*nptr\fP n'est pas «\ \e0\ » et si \fI**endptr\fP
vaut «\ \e0\ » en retour, la chaîne entière est valide.
.PP
La fonction
.B strtoll()
travaille comme
.B strtol()
mais renvoie une valeur entière de type "long long".
.SH "VALEUR RENVOYÉE"
La fonction \fBstrtol()\fP renvoie le résultat de la conversion, à moins
qu'un débordement superieur (overflow) ou inférieur (underflow) se produise.
Si un dépassement inférieur se produit, \fBstrtol()\fP renvoie LONG_MIN.
Si un dépassement supérieur se produit, \fBstrtol()\fP renvoie LONG_MAX.
Dans les deux cas, \fIerrno\fP contient le code d'erreur ERANGE.
La même chose est vraie pour
.BR strtoll ()
avec LLONG_MIN et LLONG_MAX à la place de LONG_MIN et LONG_MAX.
.SH "ERREURS"
.TP
.B ERANGE
La chaîne n'était pas dans l'intervalle acceptable, la valeur a été
arrondie.
.TP
.B EINVAL
(pas dans C99)
La
.I base
donnée n'est pas supportée.
.LP
L'implémentation peut aussi mettre \fIerrno\fP à \fBEINVAL\fP si aucune
conversion n'a été réalisée (pas de chiffres trouvés, et renvoyé zéro).
.SH NOTES
Dans des localisations autre que «\ C\ », d'autres chaînes peuvent être
acceptées. (Par exemple, un signe séparateur de milliers peut être
accepté).
.LP
BSD a aussi
.sp
.in +4n
.nf
.BI "quad_t"
.BI "strtoq(const char *" nptr ", char **" endptr ", int " base );
.sp
.in -4n
.fi
avec une définition exactement analogue. Suivant l'architecture, cela peut
être équivalent à
.B strtoll()
ou
.BR strtol() .
.SH "CONFORMITÉ"
.BR strol() " :"
SVID 3, BSD 4.3, ISO 9899 (C99), POSIX.
.BR strtoll() " :"
ISO 9899 (C99) et POSIX-2001.
.SH "VOIR AUSSI"
.BR atof (3),
.BR atoi (3),
.BR atol (3),
.BR strtod (3),
.BR strtoul (3)
.SH TRADUCTION
Christophe Blaess, 1996-2003.
