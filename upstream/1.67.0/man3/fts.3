.\"	$NetBSD: fts.3,v 1.13.2.1 1997/11/14 02:09:32 mrg Exp $
.\"
.\" Copyright (c) 1989, 1991, 1993, 1994
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)fts.3	8.5 (Berkeley) 4/16/94
.\" Traduction 01/09/2000 par Christophe Blaess (ccb@club-internet.fr)
.\" MàJ 21/07/2003 LDP-1.56
.TH FTS 3 "21 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
fts, fts_open, fts_read, fts_children, fts_set, fts_close \- Descente d'arborescence de fichiers.
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/stat.h>
.B #include <fts.h>
.sp
.B  FTS *
.BI "fts_open (char * const" "*path_argv" ", int " "options" ", int"  "(*compar)(const FTSENT **, const FTSENT **)" ");"
.sp
.B  FTSENT *
.BI "fts_read (FTS *" "ftsp" ");"
.sp
.B  FTSENT *
.BI "fts_children (FTS *" "ftsp" ", int " "options" ");"
.sp
.B  int
.BI "fts_set (FTS *" "ftsp" ", FTSENT *" "f" ", int " "options" ");"
.sp
.B  int
.BI "fts_close (FTS *" "ftsp" ");"
.fi
.SH DESCRIPTION
Les fonctions de la famille
.B  fts
servent à traverser des hiérarchies de fichiers
.IR UNIX .

Rapidement, disons que la fonction
.B  fts_open
renvoie une sorte de descripteur de la hiérarchie de fichiers, que l'on fournit
ensuite aux autres fonctions de la famille
.BI fts .

La fonction
.B  fts_read
renvoie un pointeur sur une structure décrivant l'un des fichiers de l'arborescence.

La fonction
.B  fts_children
renvoie un pointeur sur une liste chaînée de structures, chacune décrivant l'un des
fichiers contenu dans le répertoire de la hiérarchie.
En général, les répertoires sont visités à deux reprises, distinctes. Un passage en ordre
.I pre-order
avant d'avoir parcouru leurs descendants, et un passage en ordre
.I post-order
après avoir visité tous les sous-répertoires.
Les fichiers ne sont examinés qu'une seule fois.
Il est possible de parcourir la hiérarchie ``logiquement'' (en ignorant les liens symboliques) ou
``physiquement'' (en visitant les liens symboliques). On peut ordonner le parcours de la hiérarchie,
ignorer ou visiter plusieurs fois certaines parties.
.PP
Deux structures sont définies (par typedef) dans le fichier d'entête
.BR <fts.h> .
La première est
.BR FTS ,
une structure représentant l'arborescence des fichiers elle-même,
et la seconde est
.BR FTSENT ,
une structure représentant un fichier dans la
hiérarchie.
Normalement, une structure
.B  FTSENT
est renvoyée pour chaque fichier 
rencontré dans la hiérarchie.
Dans cette page de manuel, les termes ``fichier'' et structure
.B FTSENT
sont généralement
interchangeables.
La structure
.B  FTSENT
contient au moins les champs suivants, décrits en détail
plus bas :
.sp
.nf
.B  "typedef struct _ftsent {"
.BI "    u_short " "fts_info;          " "/* flags for FTSENT structure */"
.BI "    char *  " "fts_accpath;       " "/* access path */"
.BI "    char *  " "fts_path;          " "/* root path */"
.BI "    short   " "fts_pathlen;       " "/* strlen(fts_path) */"
.BI "    char *  " "fts_name;          " "/* file name */"
.BI "    short   " "fts_namelen;       " "/* strlen(fts_name) */"
.BI "    short   " "fts_level;         " "/* depth (\-1 to N) */"
.BI "    int     " "fts_errno;         " "/* file errno */"
.BI "    long    " "fts_number;        " "/* local numeric value */"
.BI "    void *  " "fts_pointer;       " "/* local address value */"
.BI "    struct ftsent *" "fts_parent; " "/* parent directory */"
.BI "    struct ftsent *" "fts_link;   " "/* next file structure */"
.BI "    struct ftsent *" "fts_cycle;  " "/* cycle structure */"
.BI "    struct stat *  " "fts_statp;  " "/* stat(2) information */"
.B  "} FTSENT;"
.fi
.PP
Les membres ont les significations suivantes :
.TP
.B fts_info
L'un des attribut suivants, décrivant la structure
.B FTSENT
et le fichier
qu'elle représente.
Toutes ces entrées sont terminales (sauf les répertoires
.I FTS_D
ne présentant pas d'erreur), ce qui signifie
qu'elle ne seront visitées qu'une seule fois, et que leur
éventuels descendants (cas des répertoires en erreur) ne seront pas visités.
.sp
.IR FTS_D " :"
Un répertoire visité en phase pré-order.
.sp
.IR FTS_DC " :"
Un répertoire introduisant une boucle dans l'arborescence.
(Le champ
.B fts_cycle
de la structure
.B FTSENT
sera également remplis).
.sp
.IR FTS_DEFAULT " :"
Toute structure
.B  FTSENT
représentant un type de fichier non décrit explicitement par
l'une des autres valeurs de
.BR fts_info .
.sp
.IR FTS_DNR " :"
Un répertoire ne pouvant être lu.
Ceci est considéré comme une erreur, et le champ
.B fts_errno
sera rempli avec une valeur décrivant sa cause.
.sp
.IR FTS_DOT " :"
Un fichier nommé 
.BR "." " ou " ".."
qui n'a pas été indiqué explicitement comme argument de
.B  fts_open
(voir
.IR FTS_SEEDOT ). 
.sp
.IR FTS_DP " :"
Un répertoire visité en phase post-order. Le contenu de la
structure
.B FTSENT
ne sera pas différent de ce qu'il était 
durant la phase pré-order. C'est à dire quand le champ
.B fts_info
valait
.IR FTS_D .
.sp
.IR FTS_ERR " :"
Il s'agit d'un retour d'erreur, le champ
.B fts_errno
étant rempli pour indiquer la cause de l'erreur.
.sp
.IR FTS_F " :"
Fichier normal.
.sp
.IR FTS_NS " :"
Un fichier pour lequel aucune information provenant de
.BR stat (2)
n'est disponible. Le contenu du champ
.B fts_statp
est indéfini. Il s'agit d'un cas d'erreur dont la cause est indiquée dans
.BR fts_errno .
.sp
.IR FTS_NSOK " :"
Un fichier pour lequel aucune information provenant de
.BR stat (2)
n'a été demandée. Le contenu du champ
.B fts_statp
est indéfini.
.sp
.IR FTS_SL " :"
Un lien symbolique.
.sp
.IR FTS_SLNONE " :"
Un lien symbolique pointant dans le vide.
Le contenu du champ 
.B fts_statp
contient les caractéristiques du lien lui-même.
.TP
.B fts_accpath
Un chemin permettant d'accéder au fichier depuis le répertoire courrant.
.TP
.B fts_path
Le chemin d'accès au fichier à partir du point de départ du parcours.
Il contient en préfixe le chemin fourni lors de l'invocation de
.BR fts_open .
.TP
.B fts_pathlen
La longueur de la chaîne pointée par
.BR fts_path .
.TP
.B fts_name
Le nom du fichier.
.TP
.B fts_namelen
La longueur de la chaîne pointée par
.BR fts_name .
.TP
.B fts_level
La profondeur où le fichier a été trouvé dans l'arborescence, numérotée de -1 à N.
La structure 
.B FTSENT
représentant le parent du point de départ est numérotée -1.
La structure
.B FTSENT
représentant la racine de départ elle-même est numérotée 0.
.TP
.B fts_errno
Dans une structure
.B  FTSENT
renvoyée par un appel
.BR fts_children ()
ou
.BR fts_read (),
dont le champ
.B fts_info
contient
.IR FTS_DNR ,
.I  FTS_ERR
ou
.IR FTS_NS ,
le champ
.B  fts_errno
est rempli avec la valeur de la variable externe
.I  errno
indiquant la cause de l'erreur.
Dans les autres cas, le contenu du champ
.B fts_errno
est indéfini.
.TP
.B fts_number
Ce champ est mis à la disposition des programmes applicatifs, et
n'est modifié par aucune fonction de la famille
.BR fts .
Il est toutefois initialisé à zéro.
.TP
.B fts_pointer
Ce champ est mis à la disposition des programmes applicatifs, et
n'est modifié par aucune fonction de la famille
.BR fts .
Il est toutefois initialisé à NULL.
.TP
.B fts_parent
Un pointeur sur la structure
.Fa FTSENT
référençant le fichier dans la hiérarchie imédiatement
au dessus du fichier en cours, c'est à dire le répertoire auquel il appartient.
Une structure
.B fts_parent
pour le point d'entrée initial est également fournie, mais seuls ses membres
.BR fts_level ,
.B fts_number
et
.BR fts_pointer
sont garantis d'être initialisés.
.TP
.B fts_link
Au retour de la fonction
.BR fts_children (),
le champ
.B  fts_link
pointe sur la structure suivante dans la liste chaînée des membres du répertoires,
liste terminée par un NULL.
Dans les autres situations, le contenu du champ
.B  fts_link
est indéterminé.
.TP
.B fts_cycle
Si un répertoire introduit une boucle dans la hiérarchie (voir
.IR FTS_DC ),
soit à cause d'un lien physique entre deux répertoires, soit à cause d'un lien
symbolique pointant vers un répertoire, le champ
.B fts_cycle
pointera vers la structure
.B  FTSENT
de la hiérarchie qui référence le même fichier que celui représenté par la structure
.BR FTSENT .
Sinon, le contenu du champ
.B  fts_cycle
est indéfini.
.TP
.B fts_statp
Un pointeur vers les informations fournies par
.BR stat (2)
pour le fichier.
.PP
Un unique buffer est utilisé pour tous les chemins d'accès de tous les fichiers
de la hiérarchie.
Ainsi, les champs
.B  fts_path
et
.B fts_accpath
ne sont assurés d'être terminés par un caractère nul
.B que
pour le dernier fichier renvoyé par
.BR fts_read .
.\" To use these fields to reference any files represented by other
.\" .B FTSENT
.\" structures will require that the path buffer be modified using the
.\" information contained in that
.\" .B  FTSENT
.\" structure's
.\" .B  fts_pathlen
.\" field.
.\" Any such modifications should be undone before further calls to
.\" .B  fts_read
.\" are attempted.
Le champ
.B fts_name
est toujour terminé par un caractère nul.
.SH FTS_OPEN
La fonction
.B fts_open
reçoit un pointeur vers une table de chaînes de caractères représentant
un ou plusieurs chemins décrivant la hiérarchie de fichiers à traverser.
Cette table doit se terminer par un pointeur
.BR NULL .
.PP
Il existe un certain nombre d'options, dont au moins une est obligatoire 
.RB ( FTS_LOGICAL
ou
.BR FTS_PHYSICAL ).
Les options sont sélectionnées par un
.B OU
logique entre les valeurs suivantes :
.TP
.IR FTS_COMFOLLOW " :"
Tout lien symbolique spécifié comme racine du parcours sera immédiatement
suivi (déréférencé), que l'option
.I  FTS_LOGICAL
soit aussi indiquée ou non.
.TP
.IR FTS_LOGICAL " :"
Renvoyer des structures
.B  FTSENT
concernant les cibles des liens symboliques plutôt que
les liens eux-mêmes. Avec cette options, les seuls liens
symboliques pour lesquels une structure
.B  FTSENT
est renvoyée sont ceux pointant dans le vide.
Il
.B faut
préciser soit
.IR  FTS_LOGICAL ,
soit
.IR  FTS_PHYSICAL .
.TP
.IR FTS_NOCHDIR " :"
Pour optimiser les performances, les fonctions
.B  fts
changent de répertoire au cours de la traversée de la hiérarchie de fichiers.
En contrepartie l'application ne peut pas savoir à l'avance où elle se
trouve durant la traversée. L'option
.I  FTS_NOCHDIR
supprime cette optimisation et les fonctions
.B  fts
ne changeront pas de répertoire de travail.
Remarquez que les applications ne doivent pas modifier elles-même le répertoire
de travail et essayer d'accéder aux fichiers sans que l'option
.I  FTS_NOCHDIR
ne soit spécifiée et que des chemins d'accès absolus soit transmis à
.BR  fts_open .
.TP
.IR FTS_NOSTAT " :"
Par défaut, les structures
.B  FTSENT
renvoyées contiennent les caractéristiques (voir le champ
.BR statp )
de chaque fichier visité.
Cette option relâche cette contrainte pour optimiser les performances,
en autorisant les fonctions 
.B  fts
à remplir le champ
.B  fts_info
avec
.I  FTS_NSOK
et laisser le contenu du membre
.B  statp
indéfini.
.TP
.IR FTS_PHYSICAL " :"
Les structures
.B  FTSENT
renvoyées concerneront les liens symboliques eux-mêmes
et non pas leurs cibles.
Il
.B faut
indiquer soit
.IR FTS_LOGICAL ,
soit
.I  FTS_PHYSICAL
à la fonction
.BR fts_open .
.TP
.IR FTS_SEEDOT " :"
Par défaut, à moins d'être fournis explicitement en argument à
.B  fts_open ,
tout fichier nommé
.B .
ou
.B  ..
rencontré dans la hiérarchie est ignoré.
Avec cette option, les routines
.B  fts
renvoient des structures
.B  FTSENT
pour ces fichiers.
.TP
.IR FTS_XDEV " :"
Cette option empêche
.B  fts
de descendre dans les répertoires se trouvant sur un périphérique différent
de celui dans lequel le parcours a commencé.
.PP
L'argument
.I  compar
spécifie une fonction définie par l'utilisateur pour ordonner la traversée de la hiérarchie.
Elle prend en argument deux pointeurs sur des pointeurs sur des structures
.BR  FTSENT ,
et doit renvoyer une valeur négative, nulle, ou positive pour indiquer que le fichier
représenté par le premier argument doit venir avant, à n'importe quel moment, ou après
le fichier référencé par le second argument.
Les champs
.BR fts_accpath ,
.B  fts_path
et
.B  fts_pathlen
des structures
.B  FTSENT
ne doivent
.B  jamais
être utilisés dans cette comparaison.
Si le champ
.B  fts_info
contient
.I  FTS_NS
ou
.IR FTS_NSOK ,
le membre
.B  fts_statp
ne doit pas être utilisé non plus.
Si l'argument
.I  compar
est
.IR  NULL ,
l'ordre de traversée des répertoires est celui de l'argument
.B  path_argv
pour les racines, et l'ordre interne des répertoires pour le reste.
.SH FTS_READ
La fonction
.B  fts_read
renvoie un pointeur sur une structure
.B  FTSENT
décrivant un fichier de la hiérarchie.
Les répertoires lisibles et ne causant pas de boucles sont parcourus au moins
deux foix, une fois en phase pré-order, et une en phase post-order.
Les autres fichiers ne sont examinés qu'une seule fois.
Les liens physiques entre répertoires qui ne causent pas de boucles, ou les liens
symboliques vers des liens symboliques peuvent entrainer des fichiers visités plus
d'une fois, ou des répertoires plus de deux fois.
.PP
Si tous les membres de la hiérarchie ont été examinés,
.B  fts_read
renvoie
.I  NULL
et remplit la variable externe
.I  errno
avec un 0.
Si une erreur sans rapport avec un fichier particulier se produit,
.B  fts_read
renvoie
.I  NULL
et remplit
.B  errno
en conséquence.
Si une erreur concernant le fichier en cours se produit, un pointeur sur une structure
.B  FTSENT
est renvoyé, et
.I  errno
peut ou non être rempli (voir
.B  fts_info ) .
.PP
Les structures
.B  FTSENT
renvoyées par
.B  fts_read
peuvent être écrasées après un appel à
.B  fts_close
sur le même descripteur de hiérarchie ou après un appel à
.B  fts_read
sur la même hiérarchie, sauf si elles représentent un répertoire, auquel cas
elles ne seront pas écrasées avant l'appel
.B  fts_read
renvoyant la structure
.B  FTSENT
du répertoire en phase post-order.
.SH FTS_CHILDREN
La fonction
.B  fts_children
renvoie un pointeur sur la structure
.B  FTSENT
décrivant la première entrée d'un liste chaînée terminée par un NULL et
représentant les fichiers se trouvant dans le répertoire indiqué par la dernière structure
.B  FTSENT
renvoyée par un appel
.BR  fts_read .
La liste est chaînée par le biais du membre
.B  fts_link
de la structure
.BR FTSEN ,
et est ordonnée suivant la routine de comparaison fournie par l'utilisateur, si elle existe.
Des appels répétés à
.B  fts_children
recréeront la liste chaînée.
.PP
Un cas particulier se présente si
.B  fts_read
n'a pas encore été appelé pour cette hiérarchie. Alors,
.B  fts_children
renverra un pointeur sur les fichiers du répertoire logique transmis
.BR  fts_open ,
c'est à dire les arguments fournis à
.B  fts_open .
Sinon, si la structure
.B  FTSENT
la plus récemment renvoyée par
.B  fts_read
n'est pas un répertoire visité en phase pré-order, ou si le répertoire
ne contient aucun fichier, 
.B  fts_children
renvoie
.I  NULL
et met la variable externe
.I  errno
à zéro.
Si une erreur se produit,
.B  fts_children
renvoie
.I  NULL
et remplit
.I  errno
comme il se doit.
.PP
Les structures
.B  FTSENT
renvoyées par 
.B  fts_children
peuvent être écrasées après un appel
.BR fts_children ,
.B  fts_close
ou
.B  fts_read
sur la même hiérarchie de fichiers.
.PP
.I  Option
peut contenir l'une des valeurs suivantes\ :
.TP
.IR FTS_NAMEONLY " :"
Seuls les noms des fichiers sont nécessaires. Le contenu des membres
des structures de la liste chaînée est indéfini sauf pour
.B  fts_name
et
.BR  fts_namelen .
.SH FTS_SET
La fonction
.B  fts_set
permet à l'application de paramétrer le traitement à venir du fichier
.B  f
sur la hiérarchie.
.BR  ftsp .
La fonction
.B  fts_set
renvoie 0 si elle réussit, et -1 si une erreur se produit.
.I  Option
doit contenir l'une des valeurs suivantes\ :
.TP
.IR FTS_AGAIN " :"
Re-visiter à nouveau le fichier. N'importe quel type de fichier peut être re-visité.
L'appel suivant de
.B  fts_read
renverra le fichier indiqué.
Les membres 
.B  fts_stat
et
.B  fts_info
de la structure seront réinitialisés à ce moment, mais aucun autre champ
ne sera modifié.
Cette option n'a de sens que pour le dernier fichier renvoyé par
.BR  fts_read .
L'utilisation habituelle de cette possibilité concerne les répertoires en
phase post-order, qui sont alors ré-examinés (aussi bien en phase pré-order
que post-order), ainsi que leurs descendants.
.TP
.IR FTS_FOLLOW " :"
Le fichier référencé doit être un lien symbolique. Si ce fichier est le dernier renvoyé par
.B  fts_read ,
alors l'appel suivant de
.B  fts_read
renverra le fichier, avec les champs
.B  fts_info
et
.B  fts_statp
réinitialisés pour représenter la cible du lien symbolique plutôt que le lien lui-même.
Si le fichier est le dernier renvoyé par
.BR  fts_children ,
alors les membres
.B  fts_info
et 
.B  fts_statp
de la structure, lorsqu'elle sera renvoyée par
.BR  fts_read ,
représenteront la cible du lien symbolique plutôt que le lien lui-même.
Dans tous les cas, si la cible du lien symbolique n'existe pas, les membres
de la structure ne seront pas modifiés, et le champ
.B  fts_info
contiendra
.IR FTS_SLNONE .
Si la cible du lien est un répertoire, il y aura un retour pré-order, suivi
d'un retour pour chaque descendant, suivi d'un retour post-order.
.TP
.IR FTS_SKIP " :"
Aucun descendant de ce fichier ne sera visité.
Le fichier doit être le dernier renvoyé par
.B  fts_children
ou
.BR fts_read .
.SH FTS_CLOSE
La fonction
.B  fts_close
ferme un descripteur
.I  fts
de hiérarchie de fichier, et restitue le répertoire de travail qui était en vigueur lors de l'appel
.BR  fts_open .
La fonction
.B  fts_close
renvoie 0 si elle réussit, et -1 en cas d'erreur.
.SH ERREURS
La fonction
.B  fts_open
peut échouer, et mettre dans 
.I  errno
l'une des erreurs indiquées pour les fonctions
.BR open (2)
et
.BR malloc (3).
.PP
La fonction
.B  fts_close
peut échouer, et mettre dans 
.I  errno
l'une des erreurs indiquées pour les fonctions
.BR chdir (2)
et
.BR close (2).
.PP
Les fonctions
.B  fts_read
et
.B  fts_children
peuvent échouer, et mettre dans 
.I  errno
l'une des erreurs indiquées pour les fonctions
.BR chdir (2),
.BR malloc (3),
.BR opendir (3),
.BR readdir (3)
et
.BR stat (2).
.PP
De plus
.BR fts_children ,
.B  fts_open
et
.B  fts_set
peuvent échouer, et mettre dans 
.I  errno
l'une des erreurs suivantes\ :
.TP
.IR EINVAL
Une option est invalide.
.SH "VOIR AUSSI"
.BR find (1),
.BR chdir (2),
.BR stat (2),
.BR qsort (3)
.SH "CONFORMITÉ"
BSD 4.4. La famille de fonctions
.B  fts
sera peut être incluse dans une future mise à jour de 
.BR -p1003.1-88 .
.SH DISPONIBILITÉ	
Ces fonctions sont disponibles sous Linux depuis la bibliothèque GlibC 2.
.SH TRADUCTION
Christophe Blaess, 2000-2003.


