.\" Copyright (c) 1980, 1991 Regents of the University of California.
.\" All rights reserved.
.\"
.\" This code is derived from software contributed to Berkeley by
.\" the American National Standards Committee X3, on Information
.\" Processing Systems.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)setbuf.3	6.10 (Berkeley) 6/29/91
.\"
.\" Converted for Linux, Mon Nov 29 14:55:24 1993, faith@cs.unc.edu
.\" Added section to BUGS, Sun Mar 12 22:28:33 MET 1995,
.\"                   Thomas.Koenig@ciw.uni-karlsruhe.de
.\"
.\"
.\" Traduction 07/11/1996 par Christophe Blaess (ccb@club-internet.fr)
.\"
.\" Màj 06/06/2001 LDP-1.36
.\" Màj 16/01/2002 LDP-1.38
.\" Màj 21/07/2003 LDP-1.56
.\" Màj 14/12/2005 LDP-1.65
.\"
.TH SETBUF 3 "21 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
setbuf, setbuffer, setlinebuf, setvbuf \- Agir sur les buffers d'un flux.
.SH SYNOPSIS
.na
.B #include <stdio.h>
.sp
.BI "void setbuf (FILE *" stream ", char *" buf );
.br
.BI "void setbuffer (FILE *" stream ", char *" buf ", size_t "  size );
.br
.BI "void setlinebuf (FILE *" stream );
.br
.BI "int setvbuf (FILE *" stream ", char *" buf ", int " mode
.BI ", size_t " size );
.ad
.SH DESCRIPTION
Les trois types de buffers disponibles sont les suivants\ :
pas de buffers, buffers de blocs, et buffers de lignes.
Quand un flux de
sortie n'a pas de buffer, les données apparaissent dans le fichier destination,
ou sur le terminal, dès qu'elles sont écrites.
Avec les buffers par blocs, une certaine quantité de données est conservée
avant d'être écrite en tant que bloc.
Avec les buffers de lignes, les
caractères sont conservés jusqu'à ce qu'un saut de ligne soit transmis,
ou que l'on réclame une lecture sur un flux attaché au terminal (typiquement
stdin).
La fonction
.BR fflush (3)
peut être utilisée pour forcer l'écriture à n'importe quel moment.
(Voir
.BR fclose (3).)

Normalement tous les fichiers utilisent des buffers de blocs. Quand une première
opération d'entrée/sortie se déroule sur un fichier,
.BR malloc (3)
est appelé, et un buffer est créé. Si le flux se rapporte à un terminal (comme
.I stdout
habituellement) il s'agit d'un buffer de ligne.
Le flux standard de sortie d'erreur
.I stderr
n'a jamais de buffer par défaut.
.PP
La fonction
.B setvbuf
peut être utilisée sur n'importe quel flux ouvert pour modifier
son type de buffer.
La paramètre
.I mode
doit correspondre à l'une des constantes symboliques suivantes\ :
.RS
.TP
.B _IONBF
pas de buffer
.TP
.B _IOLBF
buffer de ligne
.TP
.B _IOFBF
buffer complet
.RE
.PP
À l'exception des fichiers sans buffers, l'argument
.I buf
doit pointer sur un buffer contenant au moins
.I size
octets. Ce nouveau buffer sera utilisé à la place de l'ancien. Si l'argument
.I buf
est
.BR NULL ,
seul le mode est affecté. Un nouveau buffer sera alloué automatiquement lors
de la prochaine opération de lecture ou d'écriture.
La fonction
.B setvbuf
ne peut être utilisée qu'après l'ouverture du flux, et avant toute opération
dessus.
.PP
Les trois autres appels sont, en fait, simplement des alias pour l'appel de
.BR setvbuf .
la fonction
.B setbuf
est exactement équivalente à
.PP
.RS
setvbuf(stream, buf, buf ? _IOFBF : _IONBF, BUFSIZ);
.RE
.PP
La fonction
.B setbuffer
est identique, sauf que la taille du buffer est indiquée par l'appelant plutôt
que la valeur par défaut
.BR BUFSIZ .
La fonction
.B setlinebuf
est exactement équivalente à\ :
.PP
.RS
setvbuf(stream, (char *)NULL, _IOLBF, 0);
.RE
.SH "VALEUR RENVOYÉE"
La fonction
.B setvbuf
renvoie zéro si elle réussit.
Elle peut renvoyer n'importe quelle valeur en cas d'échec, mais toujours une valeur non-nulle si le
.I mode
est invalide, ou si la requête ne peut pas être honorée. Elle peut remplir
.I errno
en cas d'erreur.
Les autres fonctions ne renvoient rien.
.RE
.SH CONFORMITÉ
Les fonctions
.B setbuf
et
.B setvbuf
sont conformes à ANSI X3.159-1989 («\ ANSI C\ »).
.SH BOGUES
Les fonctions
.B setbuffer
et
.B setlinebuf
ne sont pas portables sur les systèmes BSD antérieurs à 4.2BSD, et sont
disponibles sous Linux depuis la LibC 4.5.21. Sur les systèmes 4.2BSD et 4.3BSD,
.B setbuf
utilise toujours une taille de buffer non-optimale, et doit être évitée.
.P
Il faut toujours s'assurer que
.I buf
et son contenu existent encore au moment de la fermeture du flux
(qui se produit automatiquement à la fin du programme).
.P
Par exemple, ceci est INCORRECT\ :
.nf
.sp
#include <stdio.h>

int
main (void)
{
    char   buf [BUFSIZ];

    setbuf (stdin, buf);
    printf ("Hello, world!\\n");
    return (0);
}
.fi
.sp
.SH "VOIR AUSSI"
.BR fclose (3),
.BR fflush (3),
.BR fopen (3),
.BR fread (3),
.BR malloc (3),
.BR printf (3),
.BR puts (3)
.SH TRADUCTION
Christophe Blaess, 1996-2003.
