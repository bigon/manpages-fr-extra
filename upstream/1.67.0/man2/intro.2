.\"
.\" Copyright (c) 1993 Michael Haardt (u31b3hs@pool.informatik.rwth-aachen.de), Fri Apr  2 11:32:09 MET DST 1993
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139,
.\" USA.
.\"
.\" Tue Jul  6 12:42:46 MDT 1993 (dminer@nyx.cs.du.edu)
.\" Added "Calling Directly" and supporting paragraphs
.\"
.\" Modified Sat Jul 24 15:19:12 1993 by Rik Faith (faith@cs.unc.edu)
.\"
.\" Modified 21 Aug 1994 by Michael Chastain (mec@shell.portal.com):
.\"   Added explanation of arg stacking when 6 or more args.
.\"
.\" Modified 10 June 1995 by Andries Brouwer (aeb@cwi.nl)
.\"
.\"
.\" Traduction  10/10/1996 Christophe BLAESS (ccb@club-internet.fr)
.\" Màj 08/04/1997
.\" Màj 21/09/1998 LDP-1.20
.\" Màj 18/07/2003 LDP-1.56
.\" Màj 04/07/2005 LDP-1.61
.\" Màj 20/07/2005 LDP-1.64
.\" Màj 14/12/2005 LDP-1.65
.\"
.TH INTRO 2 "18 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
intro, _syscall \- Introduction à la section des appels-système.
.SH DESCRIPTION
Ce chapitre décrit les appels-système de Linux.
Pour avoir une liste des appels-système disponibles dans Linux 2,
voyez la page
.BR syscalls (2).
.SS "Appel Direct"
Dans la plupart des cas il n'est pas nécessaire d'invoquer directement
un appel-système, mais il arrive parfois que la bibliothèque C standard
n'implémente pas une fonction utile.
.SS "Synopsis"
#include <linux/unistd.h>

une macro _syscall

L'appel système désiré

.SS Setup
La chose la plus importante à connaître concernant un appel-système est son
prototype. Vous devez connaître le nombre d'arguments, leurs types, et le type
de retour de la fonction. Il y a 6 macros simplifiant l'appel effectif au système.
Elles ont la forme\ :
.sp
.RS
.RI _syscall X ( type , name , type1 , arg1 , type2 , arg2 ,...)
.RS
.HP
avec \fIX\fP dans l'intervalle 0\(en5, correspondant au nombre d'arguments
de l'appel-système.
.HP
\fItype\fP est le type de la valeur renvoyée par l'appel-système.
.HP
\fIname\fP est le nom de l'appel-système.
.HP
\fItypeN\fP est le type du Nième argument.
.HP
\fIargN\fP est le nom du Nième argument.
.RE
.RE
.sp
Ces macros créent une fonction appelée \fIname\fP avec les arguments
spécifiés. Une fois inclus le  _syscall() dans le fichier source,
on effectue l'appel-système avec \fIname\fP.
.SH EXEMPLE
.nf
.sp
#include <stdio.h>
#include <errno.h>
#include <linux/unistd.h>	/* les macros _syscallX */
#include <linux/kernel.h>	/* pour struct sysinfo  */

_syscall1(int, sysinfo, struct sysinfo *, info);

/*
 * Note : Si vous copiez directement depuis le source nroff
 * de cette page, n'oubliez pas d'enlever les backslashes
 * supplémentaires dans les printf.
 */

int main(void)
{
	struct sysinfo s_info;
	int error;

	error = sysinfo(&s_info);
	printf("code d'erreur = %d\\n", error);
        printf("Uptime = %lds\\nCharge: 1 min %lu / 5 min %lu / 15 min %lu\\n"
                "RAM : totale %lu / libre %lu / partagée %lu\\n"
                "Mémoire dans buffers = %lu\\nSwap : total %lu / libre %lu\\n"
                "Nombre de processus = %d\\n",
		s_info.uptime, s_info.loads[0],
		s_info.loads[1], s_info.loads[2],
		s_info.totalram, s_info.freeram,
		s_info.sharedram, s_info.bufferram,
		s_info.totalswap, s_info.freeswap,
		s_info.procs);
	return(0);
}
.fi
.SH "EXEMPLE D'EXÉCUTION"
.nf
code d'erreur = 0
uptime = 502034s
Charge: 1 min 13376 / 5 min 5504 / 15 min 1152
RAM: totale 15343616 / libre 827392 / partagée 8237056
Mémoire dans buffers = 5066752
Swap: total 27881472 / libre 24698880
Nombre de processus = 40
.fi
.SH NOTES
La macro _syscall()
. B ne
crée
.B pas
de prototype. Il faut le fournir vous-même, principalement en C++.
.sp
Les appels-système ne renvoient pas nécessairement des code d'erreurs tous
positifs ou négatifs. Vous devez lire les sources pour vérifier le retour en
erreur. Généralement, ce sont des codes d'erreur négatifs, par exemple
\-\fBEPERM\fP. La macro _syscall() renverra le résultat \fIr\fP de l'appel-système
quand \fIr\fP est positif ou nul, mais renverra \-1 sinon, en positionnant
.I errno
à \-\fIr\fP quand  \fIr\fP est négatif.
Pour les codes d'erreur, voir
.BR errno (3).
.sp
Certains appels-système, comme
.BR mmap ,
nécessitent plus de cinq arguments. Ceci est géré en plaçant les
arguments sur la pile et en passant un pointeur sur le bloc d'arguments.
.sp
La méthose préférée pour invoquer des appels systèmes que la GlibC ne
connait pas encore est de passer par
.BR syscall (2).
.SH CONFORMITÉ
Dans ce paragraphe, des abréviations indiquent les variantes d'Unix,
ou des standards dont les appels-système sont conformes à la description
donnée dans ces pages de manuel. Il s'agit de\ :
.TP
SVr4
System V Release 4 Unix, comme indiqué dans "Programmer's Reference
Manual: Operating System API (Intel processors)" (Prentice-Hall
1992, ISBN 0-13-951294-2)
.TP
SVID
System V Interface Definition, comme décrit dans "The System V Interface
Definition, Fourth Edition", disponible
ftp://ftp.fpk.novell.com/pub/unix-standards/svid sous forme de fichier Postscript.
.TP
POSIX.1
IEEE 1003.1-1990 part 1, connu également sous le nom de
ISO/IEC 9945-1:1990s, ou le nom "IEEE Portable
Operating System Interface for Computing Environments", comme indiqué dans
Donald Lewine "POSIX Programmer's Guide" (O'Reilly & Associates,
Inc., 1991, ISBN 0-937175-73-0.
.TP
POSIX.1b
IEEE Std 1003.1b-1993 (POSIX.1b standard) décrivant les options temps-réel
des systèmes d'exploitations portables, aussi connu sous le nom de
ISO/IEC 9945-1:1996, indiqué dans
"Programming for the real world - POSIX.4"
de Bill O. Gallmeister (O'Reilly & Associates, Inc. ISBN 1-56592-074-0).
.TP
SUS, SUSv2
Single Unix Specification.
(Développées par X/Open et l'Open Group. Voir
http://www.UNIX-systems.org/version2/ .)
.TP
4.3BSD/4.4BSD
Les distributions 4.3 et 4.4 de l'Unix Berkeley BSD était compatible
avec 4.3.
.TP
V7
Version 7, l'Unix ancestral des Laboratoires Bell.
.SH FICHIERS
.I /usr/include/linux/unistd.h
.SH "VOIR AUSSI"
.BR syscall (2),
.BR errno (3)
.SH TRADUCTION
Christophe Blaess, 1996-2003.
