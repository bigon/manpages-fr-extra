.\" Copyright (c) 1993 Luigi P. Bai (lpb@softint.com) July 28, 1993
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Wed Jul 28 10:57:35 1993, Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Nov 28 16:43:30 1993, Rik Faith (faith@cs.unc.edu)
.\"          with material from Giorgio Ciucci (giorgio@crcc.it)
.\" Portions Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\"
.\" Traduction 16/10/1996 par Christophe Blaess (ccb@club-internet.fr)
.\" Mise a Jour 15/04/97
.\" Mise a Jour 10/10/99
.\" Mise à jour 04/06/2001 LDP-man-pages-1.36
.\" Mise à jour 18/07/2003 LDP-man-pages-1.56
.TH SHMGET 2 "18 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
shmget \- Allouer un segment de mémoire partagée.
.SH SYNOPSIS
.ad l
.B #include <sys/ipc.h>
.sp
.B #include <sys/shm.h>
.sp
.BI "int shmget(key_t " clé ", int " size ", int " shmflg );
.ad b
.SH DESCRIPTION
.B shmget()
renvoie l'identificateur du segment de mémoire partagée
associé à la valeur de l'argument
.IR clé .
Un nouveau segment mémoire, de taille 
.I size
arrondie au multiple supérieur de
.BR PAGE_SIZE ,
est créé si
.I clé
a la valeur
.B IPC_PRIVATE
ou si aucun segment de mémoire partagée n'est associé à
.IR clé ,
et
.B IPC_CREAT
est présent dans
.I shmflg.
.PP
.I shmflg
est composé de\ :
.TP 12
.B IPC_CREAT
pour créer un nouveau segment. Sinon
.B shmget()
recherchera le segment associé à \fIclé\fP, vérifiera que
l'appelant a la permission de recevoir l'identifiant \fIshmid\fP 
associé au segment, et contrôlera que le segment n'est pas
détruit.
.TP
.B IPC_EXCL
est utilisé avec \fBIPC_CREAT\fP pour garantir l'échec si
le segment existe déjà.
.TP
.B mode d'accès (les 9 bits de poids faibles)
indiquant les permissions pour le propriétaire, le groupe et
les autres.
Actuellement la permission d'exécution n'est pas utilisée 
par le système.
.PP
Si un nouveau segment est créé, les permissions d'accès de
.I shmflg
sont copiées dans le membre
.I shm_perm
de la structure
.I shmid_ds
décrivant le segment. Cette structure est définie ainsi :
.PP
.in +0.5i
.nf
struct shmid_ds {
  struct          ipc_perm shm_perm; /* Permissions d'accès       */
  int             shm_segsz;         /* Taille segment en octets  */
  time_t          shm_atime;         /* Heure dernier attachement */
  time_t          shm_dtime;         /* Heure dernier détachement */
  time_t          shm_ctime;         /* Heure dernier changement  */
  unsigned short  shm_cpid;          /* PID du créateur           */
  unsigned short  shm_lpid;          /* PID du dernier opérateur  */
  short           shm_nattch;        /* Nombre d'attachements     */
};
.fi
.in -0.5i
.PP
.in +0.5i
.nf
struct ipc_perm {
  key_t  key;
  ushort uid;   /* UID et GID effectifs du propriétaire    */
  ushort gid;
  ushort cuid;  /* UID et GID effectif du créateur         */
  ushort cgid;
  ushort mode;  /* Mode d'accès sur 9 bits de poids faible */
  ushort seq;   /* Numéro de séquence                      */
};
.fi
.PP
De plus, durant la création, le système initialise la structure
.B shmid_ds
associée au segment comme suit\ :
.IP
.B shm_perm.cuid
et
.B shm_perm.uid
contiennent l'UID effectif de l'appelant.
.IP
.B shm_perm.cgid
et 
.B shm_perm.gid
contiennent le GID effectif de l'appelant.
.IP
Les 9 bits de poids faibles de
.B shm_perm.mode
contiennent les 9 bits de poids faibles de
.IR shmflg .
.IP
.B shm_segsz
prend la valeur
.IR size.
.IP
.BR shm_lpid ,
.BR shm_nattch ,
.B shm_atime
et
.B shm_dtime
sont mis à 
.BR 0.
.IP
.B shm_ctime
contient l'heure actuelle
.PP
Si le segment de mémoire existe déjà, les permissions d'accès sont
vérifiées, et un contrôle à lieu pour voir s'il est marqué pour destruction.
.PP
.SH "AUTRES APPELS SYSTÈMES"
.TP
.B fork()
Après un
.B fork()
le fils hérite des segments de mémoire partagée.
.TP
.B exec()
Après un
.B exec()
tous les segments de mémoire partagée sont détachés (pas détruits).
.TP
.B exit()
Lors d'un
.B exit()
tous les segments de mémoire partagée sont détachés (pas détruits).
.PP
.SH "VALEUR RENVOYÉE"
Un identificateur de segment 
.IR shmid 
valide est renvoyé en cas de réussite, sinon \-1 est renvoyé et
.I errno
contient le code d'erreur.
.SH ERREURS
.TP 12
.B EINVAL
\fBSHMMIN\fP > \fIsize\fP ou
\fIsize\fP > \fBSHMMAX\fP, ou \fIsize\fP plus grand que la taille du segment.
.TP
.B EEXIST
On a indiqué
.B IPC_CREAT | IPC_EXCL
et le segment existe déjà.
.TP
.B ENOSPC
Tous les ID de mémoire partagée sont utilisés, ou l'allocation
d'un segment partagé de taille
.I size
dépasserait les limites de mémoire partagée du système.
.TP
.B ENOENT
Aucun segment n'est associé à \fIclé\fP, et 
.B IPC_CREAT
n'etait pas indiqué.
.TP
.B EACCES
L'appelant n'a pas les autorisations d'accès au segment.
.TP
.B ENOMEM
Pas assez de mémoire.
.SH NOTES
.B IPC_PRIVATE
n'est pas une option mais une valeur de type
.BR key_t .
Si cette valeur spéciale est utilisée comme
.IR clé ,
l'appel système ignore tout sauf les 9 bits de poids faibles
de
.I shmflg
et tente de créer un nouveau segment.
.PP
Les limites suivantes influent sur l'appel système
.BR shmget " :"
.TP 11
.B SHMALL
Nombre maximal de pages de mémoire partagée sur le système.
.TP
.B SHMMAX
Taille maximale d'un segment partagé (actuellement 4 Mo).
.TP
.B SHMMIN
Taille minimale d'un segment partagé.
(actuellement 1 octet, bien que
.B PAGE_SIZE
soit la valeur effectivement utilisée).
.TP
.B SHMMNI
Nombre maximal de segments de mémoire partagée sur le système 
(actuellement 4096, mais 128 avant Linux 2.3.99).
.PP
Il n'y a pas de limite pour le nombre de segments partagés par
processus (sauf SHMMNI).
.SH BOGUES
Le choix du nom IPC_PRIVATE est plutôt malheureux, il aurait mieux
valu utiliser IPC_NEW.
.SH CONFORMITÉ
SVr4, SVID. SVr4 mentionne une condition d'erreur supplémentaire EEXIST. 
Jusqu'au noyau 2.3.30, Linux renvoyait l'erreur EIDRM pour un
.B shmget
sur un segment de mémoire marqué pour destruction.
.SH "VOIR AUSSI"
.BR ftok (3),
.BR ipc (5),
.BR shmctl (2),
.BR shmat (2),
.BR shmdt (2).
.SH TRADUCTION
Christophe Blaess, 1996-2003.
