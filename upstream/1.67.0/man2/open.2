.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"                               1993 Michael Haardt, Ian Jackson.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Wed Jul 21 22:42:16 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Aug 21 18:18:14 1994: Michael Haardt's NFS diffs were
.\"          applied by hand (faith@cs.unc.edu).
.\"
.\" Traduction  10/10/1996 Christophe BLAESS (ccb@club-internet.fr)
.\" Màj 25/01/1997
.\" Màj 08/04/1997
.\" Màj 10/12/1997 LDP-1.18)
.\" Màj 18/05/1999 LDP-1.23)
.\" Màj 30/05/2001 LDP-1.36)
.\" Màj 18/07/2003 LDP-1.56)
.\" Màj 25/07/2003 LDP-1.57
.\" Màj 30/07/2003 LDP-1.58
.\" Màj 04/07/2005 LDP-1.61
.\" Màj 23/12/2005 LDP-1.67
.\"
.TH OPEN 2 "30 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
open, creat \- Ouvrir ou créer éventuellement un fichier.
.SH SYNOPSIS
.nf
.B #include <sys/types.h>
.B #include <sys/stat.h>
.B #include <fcntl.h>
.sp
.BI "int open(const char *" pathname ", int " flags );
.BI "int open(const char *" pathname ", int " flags ", mode_t " mode );
.BI "int creat(const char *" pathname ", mode_t " mode );
.fi
.SH DESCRIPTION
L'appel-système
.B open()
sert à convertir un chemin d'accès en descripteur de fichier (un petit entier
non négatif utilisable pour les opérations d'entrées/sorties ultérieures telles
.BR read ", " write ", etc.)."
Lorsque l'appel-système réussit, le descripteur renvoyé sera le plus petit
descripteur de fichier non encore ouvert pour le processus. Cet appel crée
un nouveau descripteur, non-partagé avec les autres processus. Toutefois, le
partage de fichiers ouverts peut se produire avec
l'appel-système
.BR fork (2)).
Le nouveau descripteur de fichier est configuré pour rester ouvert au travers
des fonctions exec (voir
.BR fntl (2)).
Le pointeur de position dans le fichier est placé à son début.

Le paramètre
.I flags
est l'un des éléments
.BR O_RDONLY ", " O_WRONLY " ou " O_RDWR
qui réclament respectivement l'ouverture du fichier en lecture seule,
écriture seule, ou lecture/écriture.
À cette valeur peut être ajouté un ou plusieurs attributs avec un
.IR "OU binaire" \ :
.TP
.B O_CREAT
Créer le fichier s'il n'existe pas.
Le possesseur (UID) du fichier est renseigné avec l'UID effectif du processus.
Le groupe propriétaire (GID) du fichier est le GID effectif du processus
ou le GID du répertoire parent (ceci dépend du système de
fichiers, des options de montage, du mode du répertoire parent, etc.) Voir
par exemple les options de montage
.I bsdgroups
et
.I sysvgroups
du système de fichiers ext2, décrites dans la page
.BR mount (8)).
.TP
.B O_EXCL
En conjonction avec
.BR O_CREAT ,
déclenchera une erreur si le fichier existe, et
.B open
échouera. On considère qu'un lien symbolique existe, quelque soit l'endroit où
il pointe.
.B O_EXCL
ne fonctionne pas sur les systèmes de fichiers NFS. Les programmes qui
ont besoin de cette fonctionnalité pour verrouiller des tâches risquent
de rencontrer une concurrence critique (race condition). La solution consiste
à créer un fichier unique sur le même système de fichiers (par exemple avec le
PID et le nom de l'hôte), utiliser
.BR link (2)
pour créer un lien sur un fichier de verrouillage et d'utiliser
.BR stat (2)
sur ce fichier unique pour vérifier si le nombre de liens a augmenté
jusqu'à 2. Ne pas utiliser la valeur de retour de \fBlink()\fP.
.TP
.B O_NOCTTY
Si
.I pathname
correspond à un périphérique de terminal \(em voir
.BR tty (4)
\(em, il ne deviendra pas le terminal contrôlant le processus
même si celui\-ci n'est attaché à aucun autre terminal.
.TP
.B O_TRUNC
Si le fichier existe, est un fichier régulier, et est ouvert en écriture
(O_RDWR ou O_WRONLY), il sera tronqué à une longueur nulle. Si le fichier
est une FIFO ou un périphérique terminal, l'attribut O_TRUNC est ignoré.
Sinon, le comportement de O_TRUNC n'est pas précisé. Sur de nombreuses versions
de Linux, il sera ignoré\ ; sur d'autres versions il déclenchera une erreur).
.TP
.B O_APPEND
Le fichier est ouvert en mode «\ ajout\ ». Initialement, et avant chaque
.BR write ,
la tête de lecture/écriture est placée à la fin du fichier
comme avec
.BR lseek .
Il y a un risque d'endommager le fichier lorsque
.B O_APPEND
est utilisé, sur un système de fichiers NFS, si plusieurs processus
tentent d'ajouter des données simultanément au même fichier.
Ceci est dû au fait que NFS ne supporte pas l'opération d'ajout de données
dans un fichier, aussi le noyau client est obligé de la simuler, avec un
risque de concurrence des tâches.
.TP
.BR O_NONBLOCK " ou " O_NDELAY
Le fichier est ouvert en mode «\ non-bloquant\ ». Ni la fonction
.B open
ni aucune autre opération ultérieure sur ce fichier
ne laissera le processus appelant en attente. Pour la manipulation des
FIFO (tubes nommés), voir également
.BR fifo (4).
Ce mode n'a pas nécessairement d'effet sur autre chose que les FIFO.
.TP
.B O_SYNC
Le fichier est ouvert en écriture synchronisée. Chaque appel à
.BR write
sur le fichier bloquera le processus appelant jusqu'à ce que les
données aient été écrites physiquement sur le support matériel
(voir la section RESTRICTIONS plus bas).
.TP
.B O_NOFOLLOW
Si
.I pathname
est un lien symbolique, l'ouverture échoue. Ceci est une extension
FreeBSD, qui fut ajoutée à Linux dans la version 2.1.126.
Les liens symboliques se trouvant dans le chemin d'accès proprement
dit seront suivis normalement. Les en-têtes de glibc 2.0.100 et
suivant contiennent une définition de cet attribut.
\fILes noyaux antérieurs au 2.1.126 ignorent simplement cet attribut
si vous l'utilisez\fP.
.TP
.B O_DIRECTORY
Si
.I pathname
n'est pas un répertoire, l'ouverture échoue. Cet attribut est spécifique
à Linux et fut ajouté dans la version 2.1.126 du noyau, pour éviter
des problèmes de dysfonctionnement si \fIopendir\fP(3) est invoqué
sur une FIFO ou un périphérique de bande. Cet attribut ne devrait
jamais être utilisé ailleurs que dans l'implémentation de \fBopendir\fP.
.TP
.B O_DIRECT
Essayer de minimiser les effets du cache d'entrée-sortie sur ce fichier.
Ceci dégradera en général les performances, mais est utilisé dans des
situations spéciales, lorsque les applications ont leur propres caches.
Les entrées-sorties dans le fichier se font directement depuis l'espace
utilisateur, elles sont synchrones (à la fin de
.BR read (2)
ou
.BR write (2),
les données ont obligatoirement été transférées). La taille des transferts,
l'alignement du buffer et la position dans le fichier doivent être des
multiples de la taille de blocs logiques du système de fichiers.
.\" Alignment should satisfy requirements for the underlying device
.\" There may be coherency problems.
.br
Une interface à la sémantique similaire pour les périphériques de type
bloc est décrite à la page
.BR raw (8).
.TP
.B O_ASYNC
Déclencher un signal (SIGIO par défaut, mais peut être changé via
.BR fcntl (2))
lorsque la lecture ou l'écriture deviennent possibles sur ce descripteur.
Ceci n'est possible que pour les terminaux, pseudo-terminaux et sockets.
Voir
.BR fcntl (2)
pour plus de détails.
.TP
.B O_LARGEFILE
Sur les systèmes 32 bits qui supportent les Systèmes de Fichiers Larges,
autoriser quand même l'ouverture des fichiers dont la taille ne peut
pas être représentée sur 31 bits.
.PP
Certains de ces attributs optionnels peuvent être modifiés
par la suite avec la fonction
.BR fcntl .

L'argument
.I mode
indique les permissions à utiliser si un nouveau fichier est créé.
Cette valeur est modifiée par le
.BR umask
du processus\ : la véritable valeur utilisée est
.BR "(mode & ~umask)" .
Notez que ce mode ne s'applique qu'aux accès ultérieurs du fichier
nouvellement créé. L'appel
.B open
qui crée un fichier dont le mode est en lecture seule fournira quand même
un descripteur de fichier en lecture et écriture.
.PP
Les constantes symboliques suivantes sont disponibles pour
.IR mode \ :
.TP
.B S_IRWXU
00700 L'utilisateur (propriétaire du fichier) a les
autorisations de lecture, écriture, exécution.
.TP
.B S_IRUSR (S_IREAD)
00400 L'utilisateur a l'autorisation de lecture.
.TP
.B S_IWUSR (S_IWRITE)
00200 L'utilisateur a l'autorisation d'écriture.
.TP
.B S_IXUSR (S_IEXEC)
00100 L'utilisateur a l'autorisation d'exécution.
.TP
.B S_IRWXG
00070 Le groupe a les autorisations de lecture, écriture, exécution.
.TP
.B S_IRGRP
00040 Le groupe a l'autorisation de lecture.
.TP
.B S_IWGRP
00020 Le groupe a l'autorisation d'écriture.
.TP
.B S_IXGRP
00010 Le groupe a l'autorisation d'exécution.
.TP
.B S_IRWXO
00007 Tout le monde a les autorisations de lecture, écriture, exécution.
.TP
.B S_IROTH
00004 Tout le monde a l'autorisation de lecture.
.TP
.B S_IWOTH
00002 Tout le monde a l'autorisation d'écriture.
.TP
.B S_IXOTH
00001 Tout le monde a l'autorisation d'exécution.
.PP
Le
.I mode
devrait toujours être indiqué quand
.B O_CREAT
est dans les attributs
.IR flags ,
(il est ignoré dans les autres cas).

.B creat
est équivalent à
.B open
avec l'attribut
.I flags
égal à
.BR "O_CREAT | O_WRONLY | O_TRUNC" .
.SH "VALEUR RENVOYÉE"
.BR open " et " creat
renvoient le nouveau descripteur de fichier s'ils réussissent,
ou \-1 s'ils échouent, auquel cas
.I errno
contient le code d'erreur.
Notez que
.B open
peut ouvrir des fichiers spéciaux mais
.B creat
ne peut pas en créer,
il faut utiliser
.BR mknod (2)
à la place.
.LP
Sur les systèmes de fichiers NFS, où la correspondance d'UID est activée,
\fBopen\fP peut renvoyer un descripteur de fichier alors qu'une requête
\fBread\fP(2) par exemple sera refusée avec le code d'erreur \fBEACCES\fP.
En effet, c'est parce que le client a effectué \fBopen\fP en vérifiant les
autorisations d'accès, mais la correspondance d'UID est calculée par
le serveur au moment des requêtes de lecture ou d'écriture.

Si un fichier est créé, ses horodatages atime, ctime, mtime sont fixés à
l'heure actuelle, ainsi que ctime et mtime du répertoire parent.
Sinon, si le fichier est modifié à cause de l'attribut O_TRUNC, ses
champs ctime et mtime sont remplis avec l'heure actuelle.

.SH ERREURS
.TP
.B EEXIST
.I pathname
existe déjà et
.BR O_CREAT " et " O_EXCL
ont été indiqués.
.TP
.B EISDIR
On a demandé une écriture alors que
.I pathname
correspond à un répertoire (en fait,
.B O_WRONLY
ou
.B O_RDWR
ont été demandés).
.TP
.B EACCES
L'accès demandé au fichier est interdit, ou l'un des répertoires
du chemin
.IR pathname
ne permet pas de consultation, ou le fichier n'existe pas mais
le répertoire parent ne permet pas l'écriture.
.TP
.B ENAMETOOLONG
.IR pathname " est trop long."
.TP
.B ENOENT
O_CREAT est absent et le fichier n'existe pas.
Ou un répertoire du chemin d'accès
.I pathname
n'existe pas, ou est un lien symbolique pointant nulle part.
.TP
.B ENOTDIR
Un élément du chemin d'accès
.I pathname
n'est pas un répertoire, ou l'attribut \fBO_DIRECTORY\fP est
utilisé et
.I pathname
n'est pas un répertoire.
.TP
.B ENXIO
O_NONBLOCK | O_WRONLY est indiqué, le fichier est une FIFO et le
processus n'a pas de fichier ouvert en lecture.
Ou le fichier est un noeud spécial et il n'y a pas de périphérique
correspondant.
.TP
.B ENODEV
.I pathname
correspond à un fichier spécial et il n'y a pas de périphérique correspondant.
.TP
.B EROFS
Un accès en écriture est demandé alors que
.I pathname
réside sur un système de fichiers en lecture seule.
.TP
.B ETXTBSY
On a demandé une écriture alors que
.I pathname
correspond à un fichier exécutable actuellement utilisé.
.TP
.B EFAULT
.IR pathname " pointe en dehors de l'espace d'adressage accessible."
.TP
.B ELOOP
.I pathname
contient une référence circulaire (à travers un lien symbolique), ou
l'attribut \fBO_NOFOLLOW\fP est indiqué et
.I pathname
est un lien symbolique.
.TP
.B ENOSPC
.I pathname
devrait être créé mais le périphérique concerné n'a plus assez de
place pour un nouveau fichier.
.TP
.B ENOMEM
Pas assez de mémoire pour le noyau.
.TP
.B EMFILE
Le processus a déjà ouvert le nombre maximal de fichiers.
.TP
.B ENFILE
La limite du nombre total de fichiers ouverts sur le système est atteinte.
.SH NOTE
Sous Linux, le drapeau O_NONBLOCK indique que l'on veut ouvrir mais pas
nécessairement dans l'intention de lire ou d'écrire. Il est typiquement
utilisé pour ouvrir des périphériques dans le but de récupérer un
descripteur de fichier pour l'utiliser avec
.BR ioctl (2).
.SH "CONFORMITÉ"
SVr4, SVID, POSIX, X/OPEN, BSD 4.3.
Les attributs
.B O_NOFOLLOW
et
.B O_DIRECTORY
sont spécifiques à Linux.
Il faut définir la constante symbolique
.B _GNU_SOURCE
pour avoir leurs définitions.
L'effet (indéfini) de
.B O_RDONLY | O_TRUNC
varie suivant les implémentations. Sur de nombreux systèmes, le ficier est
effectivement tronqué.
.LP
L'attribut
.B O_DIRECT
a été introduit par SGI IRIX, qui a des restritions d'alignement identiques à
Linux. IRIX a aussi un appel fcntl(2) pour obtenir les alignements et tailles
appropriés. FreeBSD 4.x a introduit un attribut du même nom, mais sans
les restrictions d'alignement. Le support a été ajouté
dans Linux 2.4.10.
Les noyaux plus anciens ignorent simplement cet attribut.
.SH BOGUES
«\ Ce qui m'a toujours dérangé avec O_DIRECT est que toute l'interface est
stupide et a probablement été conçue par un singe dérangé, sous l'influence
de substances psychotropes puissantes\ ». -- Linus.
.SH RESTRICTIONS
Plusieurs problèmes se posent avec le protocole NFS, concernant
entre autres
.BR O_SYNC ", et " O_NDELAY " .

POSIX fournit trois variantes différentes des entrées/sorties
synchronisées correspondant aux attributs \fBO_SYNC\fR,
\fBO_DSYNC\fR et \fBO_RSYNC\fR.
Actuellement (2.1.130) elles sont toutes équivalentes sous Linux.

.SH "VOIR AUSSI"
.BR read (2),
.BR write (2),
.BR fcntl (2),
.BR close (2),
.BR link (2),
.BR mknod (2),
.BR mount (2),
.BR stat (2),
.BR umask (2),
.BR unlink (2),
.BR socket (2),
.BR fopen (3),
.BR fifo (4)

.SH TRADUCTION
Christophe Blaess, 1996-2003.
