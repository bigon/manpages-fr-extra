.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (c) 1992 Drew Eckhardt (drew@cs.colorado.edu), March 28, 1992
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified by Michael Haardt (u31b3hs@pool.informatik.rwth-aachen.de)
.\" Modified Sat Jul 24 13:22:07 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 21 Aug 1994 by Michael Chastain (mec@shell.portal.com):
.\"   Referenced 'clone(2)'.
.\" Modified 10 June 1995 by Andries Brouwer (aeb@cwi.nl)
.\"
.\" 
.\" Traduction  9/10/1996 Christophe BLAESS (ccb@club-internet.fr)
.\" Mise à jour 09/06/99
.\" màj 26/06/2000 LDP 1.30
.\" màj 30/05/2001 LDP 1.36
.\" màj 18/07/2003 LDP 1.36
.TH FORK 2 "18 juillet 2003" LDP "Manuel du programmeur Linux"
.SH NOM
fork \- Créer un processus fils.
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <unistd.h>
.sp
.B pid_t fork(void);
.SH DESCRIPTION
.B fork
crée un processus fils qui diffère du processus parent uniquement par ses
valeurs PID et PPID et par le fait que toutes les statistiques d'utilisation
des ressources sont remises à zéro. Les verrouillages de fichiers, et les signaux en
attente ne sont pas hérités.
.PP
Sous Linux,
.B fork
est implementé en utilisant une méthode de copie à l'écriture. 
Ceci consiste à ne faire la véritable duplication d'une page
mémoire que lorsqu'un processus en modifie une instance. Tant
qu'aucun des deux processus n'écrit dans une page donnée, celle-ci
n'est pas vraiment dupliquée.
Ainsi les
seules pénalisations induites par fork sont le temps et la mémoire 
nécessaires à la copie de
la table des pages du parent ainsi que la création d'une structure de
tâche pour le fils.
.SH "VALEUR RENVOYÉE"
En cas de succès, le PID du fils est renvoyé au processus parent, et 
0 est renvoyé au processus fils. En cas d'échec \-1 est renvoyé dans le
contexte du parent, aucun processus fils n'est créé, et
.I errno
contient le code d'erreur.
.SH ERREURS
.TP
.B EAGAIN
.B fork
ne peut pas allouer assez de mémoire pour copier la table des pages du
père et une structure de tâche pour le fils.
.TP
.B ENOMEM
.B fork
a échoué car le noyau n'a plus assez de mémoire.

.SH "EXEMPLE"
.nf
    pid_t   pid;

    pid = fork ();

    if (pid > 0) {
         /* Processus père      */
    } else if (pid == 0) {
         /* Processus fils      */
    } else {
         /* Traitement d'erreur */
    }
.fi
.PP
.SH "CONFORMITÉ"
L'appel-système
.B fork
est conforme à SVr4, SVID, POSIX, X/OPEN, BSD 4.3.
.SH "VOIR AUSSI"
.BR clone (2),
.BR execve (2),
.BR vfork (2),
.BR wait (2).

.SH TRADUCTION
Christophe Blaess, 1996-2003.
