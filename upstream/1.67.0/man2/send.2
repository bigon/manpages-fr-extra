.\" Copyright (c) 1983, 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     $Id: send.2,v 1.9 2000/12/20 18:10:31 ak Exp $
.\"
.\" Modified Sat Jul 24 01:15:33 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Tue Oct 22 17:55:49 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Oct 1998 by Andi Kleen
.\" Modified Oct 2003 by aeb
.\"
.\" Traduction 15/10/1996 par Christophe Blaess (ccb@club-internet.fr)
.\" Màj 08/04/1997
.\" Màj 18/05/1999 LDP-1.23)
.\" Màj 03/09/2000 LDP-1.31)
.\" Màj 04/06/2001 LDP-1.36)
.\" Màj 18/07/2003 LDP-1.56)
.\" Màj 04/07/2005 LDP-1.61
.\"
.TH SEND 2 "18 octobre 2003" LDP "Manuel du programmeur Linux"
.SH NOM
send, sendto, sendmsg \- Envoyer un message sur une socket.
.SH SYNOPSIS
.B #include <sys/types.h>
.br
.B #include <sys/socket.h>
.sp
.BI "int send(int " s ", const void *" buf ", size_t " len ,
.BI "int " flags );
.sp
.BI "int sendto(int " s ", const void *" buf ", size_t " len ,
.BI "int " flags ", const struct sockaddr *" to ", socklen_t " tolen );
.sp
.BI "int sendmsg(int " s ", const struct msghdr *" msg ,
.BI "int " flags );
.SH DESCRIPTION
Les appels systèmes
.BR send ,
.BR sendto ,
et
.B sendmsg
permettent de transmettre un message à destination d'une
autre socket.
L'appel
.B send
ne peut être utilisé qu'avec les sockets
.I connectées
(ainsi, le destinataire visé est connu).
La seule différence entre
.B send
et
.B write
est la présence de
.IR flags .
Avec aucun paramètre
.IR flags ,
.B send
est équivalent à
.BR write .
Également,
.RI send( s , buf , len )
est équivalent à
.RI sendto( s , buf , len ,NULL,0).
.PP
Le paramètre
.I s
est le descripteur de fichier de la socket émettrice.
.PP
Si
.B sendto
est utilisée sur une socket en mode connexion (SOCK_STREAM, SOCK_SEQPACKET),
les paramètres
.I to
et
.I tolen
sont ignorés (et l'erreur EISCONN peut être retournée s'il n'y pas NULL ou 0),
et l'erreur ENOTCONN est retournée lorsque la socket n'est pas actuellement
connectée. Autrement, l'adresse de la cible est fournie par
.IR to " , " tolen
spécifiant sa taille.
Pour
.BR sendmsg ,
l'adresse de la cible est fournie par
.IR msg.msg_name " , " msg.msg_namelen
spécifiant sa taille.
.PP
Pour
.B send
et
.BR sendto ,
le message se trouve dans
.I buf
et a pour longueur
.IR len .
Pour
.BR sendmsg ,
le message est pointé par les éléments du tableau
.IR msg.msg_iov .
L'appel
.B sendmsg
permet également l'envoi de métadonnée
(également connue comme donnée de contrôle).
.PP
Si le message est trop long pour être transmis intégralement
au protocole sous\-jacent, l'erreur
.B EMSGSIZE
sera déclenchée et rien ne sera émis.
.PP
Aucune indication d'échec de distribution n'est
fournie par
.BR send .
Seules les erreurs locales sont détectées, et indiquées
par une valeur de retour \-1.
.PP
Si la socket ne dispose pas de la place suffisante pour
le message, alors
.B send
va bloquer, à moins que la socket ait été configurée en mode
d'entrées-sorties non\-bloquantes auquel cas elle renverra
.BR EAGAIN .
On peut utiliser l'appel système
.BR select (2)
pour vérifier s'il est possible d'émettre des données.
.PP
Le paramètre
.I flags
est un OU bit à bit de zéro ou plusieurs des options suivantes\ :
.TP
.B MSG_OOB
est utilisée pour émettre des données
.I hors\-bande
sur une socket qui l'autorise (par ex\ : de type
.BR SOCK_STREAM ).
Le protocole sous\-jacent doit également autoriser l'émission
de données
.I hors\-bande.
.TP
.B MSG_EOR
Interrompt un enregistrement (lorsque cette notion est supportée, comme pour
les sockets de type
.BR SOCK_SEQPACKET ).
.TP
.B MSG_DONTROUTE
est utilisé pour empêcher la transmission d'un paquet vers une passerelle,
n'envoyer de données que vers les hôtes directement connectés au réseau.
Ceci n'est normalement employé que par les programmes de diagnostique
ou de routage. Cette option n'est définie que pour les familles de
protocoles employant le routage, pas les sockets par paquets.
.TP
.B MSG_DONTWAIT
active le mode non-bloquant. Une opération qui devrait bloquer renverra
.B EAGAIN
à la place (Cela peut être également paramétré avec l'option
.B O_NONBLOCK
de la fonction
.B F_SETFL
de
.BR fcntl(2)).
.TP
.B MSG_NOSIGNAL
demande de ne pas envoyer de signal
.B SIGPIPE
d'erreur sur les sockets connectées lorsque le correspondant coupe
la connexion. L'erreur
.B EPIPE
est toutefois renvoyée.
.TP
.BR MSG_CONFIRM " (Depuis Linux 2.3)
Indiquer à la couche de liaison qu'une réponse correcte a été reçue du
correspondant. Si la couche de liaison n'a pas cette confirmation, elle
va ré-interroger régulièrement le voisinage (par exemple avec un ARP unicast).
Seulement valide pour les sockets
.B SOCK_DGRAM
et
.B SOCK_RAW
et uniquement implémenté pour IPv4 et IPv6. Voir
.BR arp (7)
pour plus de détails.
.PP
La définition de la structure
.I msghdr
se trouve ci-dessous. Voir
.BR recv (2)
pour une description exacte de ses champs.
.IP
.RS
.nf
.ta 4n 17n 33n
struct msghdr {
        void            * msg_name;     /* optional address */
        socklen_t       msg_namelen;    /* size of address */
        struct iovec    * msg_iov;      /* scatter/gather array */
        size_t          msg_iovlen;     /* # elements in msg_iov */
        void            * msg_control;  /* ancillary data, see below */
        socklen_t       msg_controllen; /* ancillary data buffer len */
        int             msg_flags;      /* flags on received message */
};
.ta
.fi
.RE
.PP
On peut transmettre des informations de service en employant les membres
.I msg_control
et
.IR msg_controllen .
La longueur maximale du buffer de service que le noyau peut gérer est limité
par socket par la valeur
.B net.core.optmem_max
de sysctl(). Voir
.BR socket (7).
.\" Still to be documented:
.\"  Send file descriptors and user credentials using the
.\"  msg_control* fields.
.\"  The flags returned in msg_flags.
.SH "VALEUR RENVOYÉE"
Ces appels systèmes renvoient le nombre de caractères
émis, ou \-1 s'ils échouent, auquel cas
.I errno
contient le code d'erreur.
.SH ERREURS
Voici les erreurs standards engendrées par la couche socket. Des erreurs
supplémentaires peuvent être déclenchées par les protocoles sous-jacents.
Voir leurs pages de manuel respectives.
.TP
.BR EAGAIN " ou " EWOULDBLOCK
La socket est non\-bloquante et l'opération demandée bloquerait.
.TP
.B EBADF
Descripteur de socket invalide.
.TP
.B ECONNRESET
Connexion ré-initialisée par le pair.
.TP
.B EDESTADDRREQ
La socket n'est pas en mode connexion et aucune adresse de pair n'a été
positionnée.
.TP
.B EFAULT
Un paramètre pointe en dehors de l'espace d'adressage accessible.
.TP
.B EINTR
Un signal a été reçu avant que la moindre donnée n'ait été transmise.
.TP
.B EINVAL
Un argument invalide a été transmis.
.TP
.B EISCONN
La socket en mode connexion est déjà connectée mais un destinataire a été
spécifié. (Maintenant, soit cette erreur est retournée, soit la spécification
du destinataire est ignorée.)
.TP
.B EMSGSIZE
Le type de socket
.\" (e.g., SOCK_DGRAM )
nécessite une émission intégrale du message mais la taille
de celui\-ci ne le permet pas.
.TP
.B ENOBUFS
La file d'émission de l'interface réseau est pleine. Ceci
indique généralement une panne de l'interface réseau, mais
peut également être dû à un engorgement passager. Ceci ne doit
pas se produire sous Linux, les paquets sont silencieusement éliminés.
.TP
.B ENOMEM
Pas assez de mémoire pour le noyau.
.TP
.B ENOTCONN
La socket n'est pas connectée et aucune cible n'a été fournie.
.TP
.B ENOTSOCK
L'argument
.I s
n'est pas une socket.
.TP
.B EOPNOTSUPP
Au moins un bit de l'argument
.I flags
n'est pas approprié pour le type de socket.
.TP
.B EPIPE
L'écriture est impossible (correspondant absent). Dans ce cas, le processus
recevra également un signal
.B SIGPIPE
sauf s'il a activée l'option
.BR MSG_NOSIGNAL .
.SH CONFORMITÉ
BSD 4.4, SVr4, POSIX 1003.1-2001.
Ces appels système sont apparus dans BSD 4.2.
.LP
POSIX décrit seulement les drapeaux
.B MSG_OOB
et
.BR MSG_EOR .
Le drapeau
.B MSG_CONFIRM
est une extension Linux.
.SH NOTE
Les prototypes fournis plus haut suivent les Spécifications Single Unix,
tout comme glibc2. L'argument
.I flags
était un «\ int\ » dans BSD 4.*, mais «\ unsigned int\ » dans libc4 et libc5.
L'argument
.I len
était un  «\ int\ » dans BSD 4.* et libc4, mais un «\ size_t\ » dans libc5;
L'argument
.I tolen
était un «\ int\ » dans BSD 4.*, libc4 et libc5.
Voir aussi les notes accompagnant la page
.BR accept (2).
.SH BOGUES
Linux peut retourner EPIPE au lieu de ENOTCONN.

.SH "VOIR AUSSI"
.BR fcntl (2),
.BR recv (2),
.BR select (2),
.BR getsockopt (2),
.BR sendfile (2),
.BR socket (2),
.BR write (2),
.BR socket (7),
.BR ip (7),
.BR tcp (7),
.BR udp (7)
.SH TRADUCTION
Christophe Blaess, 1996-2003.
