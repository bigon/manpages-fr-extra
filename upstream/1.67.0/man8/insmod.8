\" Copyright (c) 1996 Free Software Foundation, Inc.
.\" Ce programme est distribué en accord avec la Licence Publique Générale Gnu.
.\" Voir le fichier COPYING dans le répertoire des sources du noyau.
.\" MàJ 30/07/21 modutils-2.4.22
.TH INSMOD 8 "30 juillet 2003" modutils "Manuel de l'administrateur Linux"
.SH NOM
insmod \- Charge des modules dans le noyau.
.hy 0
.SH SYNOPSIS
.B insmod
[\-fhkLmnpqrsSvVxXyYN] [\-e\ \fIpersist_name\fR] [\-o\ \fImodule_name\fR]
[\-O\ \fIblob_name\fR] [\-P\ \fIprefix\fR] \fImodule\fR
[\ \fBsymbol\fR=\fIvalue\fR\ ...\ ]
.SH DESCRIPTION
.B insmod
charge un module dans le noyau en cours d'utilisation.
.PP
.B insmod
essaie de lier un module dans le noyau en cours d'exécution en résolvant les noms
de symboles à partir de la table des symboles exportés par le noyau.
.PP
Si le nom du fichier objet est donné sans répertoire et sans extension,
.B insmod
cherchera le module dans quelques répertoires par défaut.
La variable d'environnement MODPATH peut surcharger ces répertoires par défaut.
Si un fichier de configuration comme /etc/modules.conf existe, il surchargera
les chemins indiqués dans \fBMODPATH\fP.
.PP
La variable d'environnement MODULECONF peut sélectionner un fichier de
configuration différent de \fI/etc/modules.conf\fP (ou
\fI/etc/conf.modules\fR (à éviter)).
Cette variable d'environnement prévaudra sur toutes les définitions précédentes.
.PP
Quand la variable d'environnement
.B UNAME_MACHINE
est remplie, modutils l'utilisera à la place du champ "machine" de
l'appel-système uname(). Ceci est surtout utile si vous compilez des modules
64 bits dans un espace utilisateur 32 bits ou
inversement\ ; remplissez
.B UNAME_MACHINE
avec le type de modules construits.
La version actuelle de modutils ne supporte pas la construction croisée complète
de modules, elle est limitée au choix entre 32 et 64 bits de l'architecture
hôte.
.SS OPTIONS
.TP
\fB\-e\fR \fIpersist_name\fR, \fB\-\-persist\fR=\fIpersist_name\fR 
Indique où les données persistantes du modules doivent être lues au chargement
et écrite lorsque cette instance du module est déchargée. Cette option est
ignorée silencieusement si le module n'a pas de données persistantes. Les
données persistantes ne sont lues par \fBinsmod\fR que si cette option est
présente. Par défaut \fBinsmod\fR ne traite pas les données persistantes.
.TP
.B ""
Sous forme raccourcie, \fB\-e\ ""\fR\ (une chaîne vide) est interprété par
\fBinsmod\fR comme la valeur de \fBpersistdir\fR définie dans
\fImodules.conf\fR, suivie du nom du fichier du module par rapport au chemin
de recherche où il a été trouvé, en éliminant toute extension
".gz", ".o" ou ".mod".  Si \fBmodules.conf\fR spécifie
"\fBpersistdir\ =\fR" (\fBpersistdir\fR est un champ vide) alors ce raccourci
est ignoré silencieusement.  (Voir \fBmodules.conf\fR (5).)
.TP 
.BR \-f ", " \-\-force
Tentera de charger un module même si la version du noyau en cours et celle pour
laquelle le module a été compilé le module ne correspondent pas. Ceci ne
surcharge que la vérification du numéro de noyau, et n'a aucun effet sur la
vérification des noms de symbole. Si le nom d'un symbole du module ne correspond
pas au noyau, il n'y a aucun moyen de forcer \fBinsmod\fP à le charger.
.TP
.BR \-h ", " \-\-help
Affiche une page d'aide et se termine.
.TP
.BR \-k ", " \-\-autoclean 
Marque le module pour auto-nettoyage. Ceci permettra à
\fBkerneld\fP(8) d'enlever les modules qui ne sont pas utilisés
durant une certaine période - habituellement une minute.
.TP 
.BR \-L ", " \-\-lock 
Utiliser \fBflock\fR(2) pour empêcher deux chargements simultanés du même module.
.TP
.BR \-m ", " \-\-map 
Affiche la carte de chargement, rendant plus facile le débogage en cas de
panique du noyau.
.TP 
.BR \-n ", " \-\-noload
Fausse exécution. Tout faire, mais ne rien charger dans le noyau. Avec option
\fB\-m\fR ou \fB\-O\fR, l'exécution produira les fichiers carte ou blob.
Comme le module n'est pas chargé, l'adresse réelle du noyau est inconuue,
ainsi les fichiers utilisent une adresse de chargement arbitraire
0x12340000.
.TP
\fB\-o\fR \fImodule_name\fR, \fB\-\-name\fR=\fImodule_name\fR
Indique explicitement le nom du module, plutôt que d'utiliser le celui déduit
du fichier objet.
.TP
\fB\-O\fR \fIblob_name\fR, \fB\-\-blob\fR=\fIblob_name\fR
Sauver le fichier objet dans \fIblob_name\fR. Le résultat est un blob binaire
(pas d'en-tête ELF) montrant exactement ce qui est chargé dans noyau
après manipulation et déplacemen des sections.
L' option \fB\-m\fR est recommandée pour obtenir une carte de cet objet.
.TP
.BR \-p ", " \-\-probe
Vérifie si le module peut être chargé avec succès. Cela inclut la position du
fichier objet dans le chemin des modules, la vérification
des numéros de versions, et la résolution des commandes. Elle ne vérifie pas
les déplacements et ne produit pas de fichier blob.
.TP
\fB\-P\fR \fIprefix\fR, \fB\-\-prefix\fR=\fIprefix\fR
Cette option sert pour les modules avec numéros de version, et les noyaux smp
ou bigmem, car ces modules ont un préfixe supplémentaire ajouté aux noms des
symboles. Si le noyau a été construit avec les numéros de versions pour les
symboles, alors \fBinsmodfP extraiera automatiquement le préfixé de la définition
de "get_module_symbol" ou "inter_module_get", l'un des deux doit exister dans
tous les noyaux qui supportent les modules. Si le noyau n'a pas de version
pour les symboles, mais que le module en a, alors
l'utilisateur doit fournir l'option
.BR \-P .
.TP
.BR \-q ", " \-\-quiet
Ne pas afficher la listes des commandes non résolues.
Ne pas signaler les problèmes de numéros de versions.
Les problèmes ne seront visibles que dans le statut de sortie de \fBinsmod\fR.
.TP
.BR \-r ", " \-\-root
.TP
.B ""
Certains utilisateurs compilent les modules sans droits root et les installent
en étant root. Ceci risque de créer des modules n'appartenant pas à root, même
si le répertoire des modules est propriété du root.
Si un tel compte utilisateur est piraté, un intrus peut modifier ces modules
et les utiliser pour obtenir un accès root.
.TP
.B ""
Par défaut, modutils rejettera les demandes d'utilisation d'un module qui
n'appartient à root. L'option \fB-r\fR supprimera l'erreur et autorisera le
chargement de module n'appartenant pas à root. \fBNote\ :\fR la valeur par
défaut pour la vérification d'appartenance à root peut être modifiée dans
la configuration de modutils.
.TP
.I ""
\fBL'utilisation de -r ou la configuration "pas de vérification root" 
est un danger pour la sécurité et est
déconseillée.\fR
.TP
.BR \-s ", " \-\-syslog
Envoie les messages à \fBsyslog\fP(3) plutôt que sur le terminal.
.TP
.BR \-S ", " \-\-kallsyms
Force le module chargé à avoir des données \fBkallsyms\fR, même si le noyau ne
le supporte pas. Cette option sert sur les petits systèmes où le noyau est 
chargé sans données \fBkallsyms\fR, mais que les modules ont besoin de
\fBkallsyms\fR pour le débogage. Configuration par défaut sur Red Hat Linux.
.TP
.BR \-v ", " \-\-verbose
Rends insmod plus volubile.
.TP
.BR \-V ", " \-\-version
Affiche le numéro de version de \fBinsmod\fR.
.TP
.BR \-X ", " \-\-export "; " \-x ", " \-\-noexport
Respectivement, exporter ou non tous les symboles externes du module. La valeur
par défaut est l'exportation des symboles. Cette noption n'est effective que
si le module n'exporte pas explicitement sa propre table de symbole,
ce qui est déconseillé.
.TP
.BR \-Y ", " \-\-ksymoops "; " \-y ", " \-\-noksymoops
Respectivement ajoute ou non les symboles ksymoops à ksyms. Ces symboles servent
à ksymoops pour aider au débogage si il y a un problème (Oops) dans le module.
La valeur par défaut est de définir les symboles \fBksymoops\fR. Cette option
est indépendante de  \fB\-X\fR/\fB\-x\fR.
.TP
.B ""
Les symboles \fBksymoops\fR ajoutent environ 260 octets par module chargé. À
moins d'être vraiment à court de mémoire pour le noyau et de tenter de réduire
ksyms au minimum, utilisez la configuration par défaut pour être plus à l'aise
au débogage. Les symboles \fBksymoops\fR sont nécessaires pour la sauvegarde
de données persistantes de modules.
.TP
.BR \-N ", " \-\-numeric-only
Ne vérifie que la partie numérique de la version du module par rapport à celle
du noyau, c'est-à-dire ignore le suffixe EXTRAVERSION pour savoir si le module
appartient au noyau.
Cette option est automatiquement active pour les noyaux à partir du 2.5, et
optionnel pour les précédents.
.SS "PARAMÈTRES DES MODULES"
Des modules acceptent des paramètres au chargement pour adapter leur action.
Ces paramètres sont souvent des ports E/S et des numéros d'IRQ variant d'une
machine à l'autre et ne peuvent être déterminés à partir du matériel.
.PP
Dans les modules pour les noyau 2.0, tout symbole d'entier ou de pointeur
caractère peut être manipulé comme un paramètre et être modifié. Depuis les
noyaux 2.1, les symboles sont explicitement marqués comme des paramètres, afin
que seules des données spécifiques soient modifiables. De plus le type est
indiqué pour vérifier la valeur fournie au chargement.
.PP
Pour les entiers, les valeurs peuvent être en base 10, 8 ou 16, comme en C\ :
17, O21 ou Ox11. Les éléments de tableau sont fournis en séquence, séparés par
des virgules. Des éléments peuvent être `sautés'
en omettant leur valeur.
.PP
Dans les modules 2.0, les valeurs ne débutant pas par un nombre sont considérées
comme des chaînes. Depuis les 2.1, l'information sur le type de paramètre indique
si la valeur doit être considérée comme une chaîne. Si la valeur commence par
un guillemet
 (\fB"\fP),
.\" juste pour la coloration syntaxique : on ferme le guillemet précédent.
 la chaîne est interprétée comme en C, avec séquence d'échappement
et le reste. Notez que depuis la ligne de commande du shell, les guillemets
doivent être protégés pour éviter leur interprétation par ce dernier.
.SS "SYMBOLES ET MODULES SOUS LICENCE GPL"
Depuis le noyau 2.4.10, les modules doivent avoir une chaîne indiquant leur
licence, définie par \fBMODULE_LICENSE()\fR. Plusieurs chaînes sont reconnues
comme étant compatibles GPL, tout autre chaîne de licence ou l'absence de
licence est considérée comme propriétaire. Voir
\fIinclude/linux/module.h\fR pour une liste des chaînes compatibles GPL.
.PP
Si le noyau supporte l'attribut \fI/proc/sys/kernel/tainted\fR, alors
\fBinsmod\fR fera un OU entre l'attribut et '1' au chargement d'un module sans
licence GPL. Un avertissement sera affiché si le noyau supporte le mode taché
(tainted) et qu'on charge un module sans licence. Un avertissement est fourni
pour tout module ayant \fBMODULE_LICENSE()\fR non compatible GPL, même sur les
noyaux anciens ne supportant pas l'entachement. Ceci limite les avertissements
quand les modutils récents sont utilisés sur des noyaux anciens.
.PP
Le mode \fBinsmod\ \-f\fR (force) fera un OU entre l'attribut tainted et '2'
sur les noyaux supportant l'entachment. Ceci déclenche toujours un avertissement.
.PP
Certains développeurs du noyau réclament que les symboles exportés par leur code
ne soit utilisés que dans des modules avec une licence compatible GPL. Ces
symboles sont exportés avec \fBEXPORT_SYMBOL_GPL\fR plutôt qu'avec le normal
\fBEXPORT_SYMBOL\fR. Les symboles GPL-seulement exportés par le noyau et d'autres
modules ne sont visibles que des modules ayant une licence compatible GPL. Ils
apparaissent dans \fI/proc/ksyms\fR avec le préfixe '\fBGPLONLY_\fR'.
\fBinsmod\fR ignore le préfixe \fBGPLONLY_\fR des symboles en chargeant un module
avec une licence compatible GPL, afin que le module fasse référence au nom du
symbole sans le préfixe. Les symboles GPL-seulement ne sont pas rendus
disponibles aux modules sans licence compatible GPL, ou sans licence
indiquée.
.SS "AIDE KSYMOOPS"
Pour aider au débogage des problèmes du noyau avec des modules, \fBinsmod\fP
ajoute par défaut des symboles dans ksyms, voir l'option \fB-Y\fP.
Ces symboles débutent avec \fB__insmod_modulename_\fP. Le \fImodulename\fP est
nécessaire pour rendre les symboles uniques, il est possible de charger le même
objet plusieurs fois sous différents noms de modules.
Actuellement les commandes définies sont\ :
.TP
.B __insmod_modulename_Oobjectfile_Mmtime_Vversion
\fIobjectfile\fP est le nom du fichier depuis lequel l'objet a été chargé.
Ceci garanti que ksymoops peut accéder correctement au code de l'objet.
\fImtime\fP est l'horodatage en hexadécimal de la dernière modification du
fichier en hexadécimal, zéro si \fBstat\fP(2) a échoué. \fIversion\fP est la
version du noyau pour lequel le module a été compilé, -1 si la version n'est
pas disponible. Le symbole _0 est l'adresse de début de l'en-tête du module.
.TP
.B __insmod_modulename_Ssectionname_Llength
Ce symbole apparaît au début des sections ELF sélectionnées,
actuellement .text, .rodata, .data .bss, et .sbss. Elle apparaît seulement si la
section a une taille non-nulle. \fIsectionname\fP est le nom de la section ELF,
\fIlength\fP  est la longueur en décimal de la section. Ces symboles aident
ksymoops à déterminer les adresses des sections dans lesquelles aucun symbole
n'est disponible.
.TP
.B __insmod_modulename_Ppersistent_filename
Créé par \fBinsmod\fR seulement si le module a un ou plusieurs paramètres qui
sont marqués comme données persistantes, et si un fichier de sauvegarde
(voir\fB\-e\fR, plus haut) est disponible.
.PP
L'autre problème avec le débogage des problèmes du noyau dans les modules est
que le contenu de \fI/proc/ksyms\fR et \fI/proc/modules\fR peut changer entre
l'instant du Oops et le moment où vous analysez le fichier journal. Pour pallier
ce problème, si le répertoire \fI/var/log/ksymoops\fR existe alors \fBinsmod\fR
et \fBrmmod\fR copieront automatiquement \fI/proc/ksyms\fR et \fI/proc/modules\fR
dans \fI/var/log/ksymoops\fR avec le préfixe `date\ +%Y%m%d%H%M%S`.
L'administrateur système peut indiquer à ksymoops quel fichier employer pour
déboguer un Oops. Il n'y a pas d'option pour désactiver cette copie automatique,
si vous ne voulez pas qu'elle se produise, il ne faut pas créer de répertoire
\fI/var/log/ksymoops\fR. Si le répertoire existe, il doit appartenir à root,
avoir le mode 644 ou 600 et vous devriez lancer chaque jour le script suivant,
installé comme \fBinsmod_clean_ksymoops\fR.
.PP
.ne 8
.nf
  #!/bin/sh
  # Supprime la sauvegarde de ksyms et des modules sans accès depuis 2 jours
  if [ -d /var/log/ksymoops ]
  then
	  set -e
	  # S'assurer qu'il y en a toujours au moins une version
	  d=`date +%Y%m%d%H%M%S`
	  cp -a /proc/ksyms /var/log/ksymoops/${d}.ksyms
	  cp -a /proc/modules /var/log/ksymoops/${d}.modules
	  find /var/log/ksymoops -type f -atime +2 -exec rm {} \\;
  fi
.SH "VOIR AUSSI"
.BR rmmod (8), 
.BR modprobe (8), 
.BR depmod (8), 
.BR lsmod (8),
.BR ksyms (8),
.BR modules (2),
.BR genksyms (8), 
.BR kerneld (8),
.BR ksymoops (noyau).
.SH HISTORIQUE
Le support des modules a été conçu par Illustre Anonyme
.br
La version initiale pour Linux a été faite par Bas Laarhoven <bas@vimec.nl>
.br
La version 0.99.14 a été faite par Jon Tombs <jon@gtex02.us.es>
.br
Complétée par Bjorn Ekwall <bj0rn@blox.se>
.br
Aide ELF originelle de Eric Youngdale <eric@aib.com>
.br
Réécrite pour 2.1.17 par Richard Henderson <rth@tamu.edu>
.br
Complétée par Bjorn Ekwall <bj0rn@blox.se> pour modutils-2.2.*, Mars 1999
.br
Support pour ksymoops par Keith Owens <kaos@ocs.com.au>, Mai 1999
.br
Mainteneur actuel\ :  Keith Owens <kaos@ocs.com.au>.
.SH TRADUCTION
Jérome Signouret, 2000.
.br
Christophe Blaess, 2003.
