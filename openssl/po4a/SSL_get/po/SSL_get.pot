# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2014-08-07 01:31-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: =head1
#: C/ssl/SSL_get_SSL_CTX.pod:3 C/ssl/SSL_get_ciphers.pod:3 C/ssl/SSL_get_client_CA_list.pod:3 C/ssl/SSL_get_current_cipher.pod:3 C/ssl/SSL_get_default_timeout.pod:3 C/ssl/SSL_get_error.pod:3 C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:3 C/ssl/SSL_get_ex_new_index.pod:3 C/ssl/SSL_get_fd.pod:3 C/ssl/SSL_get_peer_cert_chain.pod:3 C/ssl/SSL_get_peer_certificate.pod:3 C/ssl/SSL_get_psk_identity.pod:32 C/ssl/SSL_get_rbio.pod:3 C/ssl/SSL_get_session.pod:3 C/ssl/SSL_get_verify_result.pod:3 C/ssl/SSL_get_version.pod:3
msgid "NAME"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_SSL_CTX.pod:5
msgid "SSL_get_SSL_CTX - get the SSL_CTX from which an SSL is created"
msgstr ""

#. type: =head1
#: C/ssl/SSL_get_SSL_CTX.pod:7 C/ssl/SSL_get_ciphers.pod:7 C/ssl/SSL_get_client_CA_list.pod:7 C/ssl/SSL_get_current_cipher.pod:8 C/ssl/SSL_get_default_timeout.pod:7 C/ssl/SSL_get_error.pod:7 C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:8 C/ssl/SSL_get_ex_new_index.pod:7 C/ssl/SSL_get_fd.pod:7 C/ssl/SSL_get_peer_cert_chain.pod:7 C/ssl/SSL_get_peer_certificate.pod:7 C/ssl/SSL_get_psk_identity.pod:37 C/ssl/SSL_get_rbio.pod:7 C/ssl/SSL_get_session.pod:7 C/ssl/SSL_get_verify_result.pod:7 C/ssl/SSL_get_version.pod:7
msgid "SYNOPSIS"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_SSL_CTX.pod:9 C/ssl/SSL_get_ciphers.pod:9 C/ssl/SSL_get_client_CA_list.pod:9 C/ssl/SSL_get_current_cipher.pod:10 C/ssl/SSL_get_default_timeout.pod:9 C/ssl/SSL_get_error.pod:9 C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:10 C/ssl/SSL_get_ex_new_index.pod:9 C/ssl/SSL_get_fd.pod:9 C/ssl/SSL_get_peer_cert_chain.pod:9 C/ssl/SSL_get_peer_certificate.pod:9 C/ssl/SSL_get_psk_identity.pod:39 C/ssl/SSL_get_rbio.pod:9 C/ssl/SSL_get_session.pod:9 C/ssl/SSL_get_verify_result.pod:9 C/ssl/SSL_get_version.pod:9
#, no-wrap
msgid ""
" #include <openssl/ssl.h>\n"
"\n"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_SSL_CTX.pod:11
#, no-wrap
msgid ""
" SSL_CTX *SSL_get_SSL_CTX(const SSL *ssl);\n"
"\n"
msgstr ""

#. type: =head1
#: C/ssl/SSL_get_SSL_CTX.pod:13 C/ssl/SSL_get_ciphers.pod:14 C/ssl/SSL_get_client_CA_list.pod:14 C/ssl/SSL_get_current_cipher.pod:22 C/ssl/SSL_get_default_timeout.pod:13 C/ssl/SSL_get_error.pod:13 C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:14 C/ssl/SSL_get_ex_new_index.pod:27 C/ssl/SSL_get_fd.pod:15 C/ssl/SSL_get_peer_cert_chain.pod:13 C/ssl/SSL_get_peer_certificate.pod:13 C/ssl/SSL_get_psk_identity.pod:45 C/ssl/SSL_get_rbio.pod:14 C/ssl/SSL_get_session.pod:15 C/ssl/SSL_get_verify_result.pod:13 C/ssl/SSL_get_version.pod:13
msgid "DESCRIPTION"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_SSL_CTX.pod:15
msgid ""
"SSL_get_SSL_CTX() returns a pointer to the SSL_CTX object, from which B<ssl> "
"was created with L<SSL_new(3)|SSL_new(3)>."
msgstr ""

#. type: =head1
#: C/ssl/SSL_get_SSL_CTX.pod:18 C/ssl/SSL_get_ciphers.pod:33 C/ssl/SSL_get_client_CA_list.pod:25 C/ssl/SSL_get_current_cipher.pod:34 C/ssl/SSL_get_default_timeout.pod:29 C/ssl/SSL_get_error.pod:28 C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:35 C/ssl/SSL_get_fd.pod:23 C/ssl/SSL_get_peer_cert_chain.pod:31 C/ssl/SSL_get_peer_certificate.pod:34 C/ssl/SSL_get_psk_identity.pod:53 C/ssl/SSL_get_rbio.pod:20 C/ssl/SSL_get_session.pod:51 C/ssl/SSL_get_verify_result.pod:35 C/ssl/SSL_get_version.pod:18
msgid "RETURN VALUES"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_SSL_CTX.pod:20
msgid "The pointer to the SSL_CTX object is returned."
msgstr ""

#. type: =head1
#: C/ssl/SSL_get_SSL_CTX.pod:22 C/ssl/SSL_get_ciphers.pod:37 C/ssl/SSL_get_client_CA_list.pod:47 C/ssl/SSL_get_current_cipher.pod:39 C/ssl/SSL_get_default_timeout.pod:33 C/ssl/SSL_get_error.pod:106 C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:56 C/ssl/SSL_get_ex_new_index.pod:52 C/ssl/SSL_get_fd.pod:40 C/ssl/SSL_get_peer_cert_chain.pod:48 C/ssl/SSL_get_peer_certificate.pod:50 C/ssl/SSL_get_rbio.pod:36 C/ssl/SSL_get_session.pod:67 C/ssl/SSL_get_verify_result.pod:51 C/ssl/SSL_get_version.pod:50
msgid "SEE ALSO"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_SSL_CTX.pod:24
msgid "L<ssl(3)|ssl(3)>, L<SSL_new(3)|SSL_new(3)>"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ciphers.pod:5
msgid "SSL_get_ciphers, SSL_get_cipher_list - get list of available SSL_CIPHERs"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_ciphers.pod:11
#, no-wrap
msgid ""
" STACK_OF(SSL_CIPHER) *SSL_get_ciphers(const SSL *ssl);\n"
" const char *SSL_get_cipher_list(const SSL *ssl, int priority);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ciphers.pod:16
msgid ""
"SSL_get_ciphers() returns the stack of available SSL_CIPHERs for B<ssl>, "
"sorted by preference. If B<ssl> is NULL or no ciphers are available, NULL is "
"returned."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ciphers.pod:20
msgid ""
"SSL_get_cipher_list() returns a pointer to the name of the SSL_CIPHER listed "
"for B<ssl> with B<priority>. If B<ssl> is NULL, no ciphers are available, or "
"there are less ciphers than B<priority> available, NULL is returned."
msgstr ""

#. type: =head1
#: C/ssl/SSL_get_ciphers.pod:25 C/ssl/SSL_get_default_timeout.pod:18 C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:19 C/ssl/SSL_get_peer_cert_chain.pod:22 C/ssl/SSL_get_peer_certificate.pod:18 C/ssl/SSL_get_session.pod:26 C/ssl/SSL_get_verify_result.pod:18
msgid "NOTES"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ciphers.pod:27
msgid ""
"The details of the ciphers obtained by SSL_get_ciphers() can be obtained "
"using the L<SSL_CIPHER_get_name(3)|SSL_CIPHER_get_name(3)> family of "
"functions."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ciphers.pod:30
msgid ""
"Call SSL_get_cipher_list() with B<priority> starting from 0 to obtain the "
"sorted list of available ciphers, until NULL is returned."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ciphers.pod:35
msgid "See DESCRIPTION"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ciphers.pod:39
msgid ""
"L<ssl(3)|ssl(3)>, L<SSL_CTX_set_cipher_list(3)|SSL_CTX_set_cipher_list(3)>, "
"L<SSL_CIPHER_get_name(3)|SSL_CIPHER_get_name(3)>"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_client_CA_list.pod:5
msgid "SSL_get_client_CA_list, SSL_CTX_get_client_CA_list - get list of client CAs"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_client_CA_list.pod:11
#, no-wrap
msgid ""
" STACK_OF(X509_NAME) *SSL_get_client_CA_list(const SSL *s);\n"
" STACK_OF(X509_NAME) *SSL_CTX_get_client_CA_list(const SSL_CTX *ctx); \n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_client_CA_list.pod:16
msgid ""
"SSL_CTX_get_client_CA_list() returns the list of client CAs explicitly set "
"for B<ctx> using "
"L<SSL_CTX_set_client_CA_list(3)|SSL_CTX_set_client_CA_list(3)>."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_client_CA_list.pod:19
msgid ""
"SSL_get_client_CA_list() returns the list of client CAs explicitly set for "
"B<ssl> using SSL_set_client_CA_list() or B<ssl>'s SSL_CTX object with "
"L<SSL_CTX_set_client_CA_list(3)|SSL_CTX_set_client_CA_list(3)>, when in "
"server mode. In client mode, SSL_get_client_CA_list returns the list of "
"client CAs sent from the server, if any."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_client_CA_list.pod:27
msgid ""
"SSL_CTX_set_client_CA_list() and SSL_set_client_CA_list() do not return "
"diagnostic information."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_client_CA_list.pod:30
msgid ""
"SSL_CTX_add_client_CA() and SSL_add_client_CA() have the following return "
"values:"
msgstr ""

#. type: =item
#: C/ssl/SSL_get_client_CA_list.pod:35
msgid "STACK_OF(X509_NAMES)"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_client_CA_list.pod:37
msgid ""
"List of CA names explicitly set (for B<ctx> or in server mode) or send by "
"the server (client mode)."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_client_CA_list.pod:40 C/ssl/SSL_get_peer_cert_chain.pod:37 C/ssl/SSL_get_peer_certificate.pod:40 C/ssl/SSL_get_rbio.pod:26 C/ssl/SSL_get_session.pod:57
msgid "NULL"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_client_CA_list.pod:42
msgid ""
"No client CA list was explicitly set (for B<ctx> or in server mode) or the "
"server did not send a list of CAs (client mode)."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_client_CA_list.pod:49
msgid ""
"L<ssl(3)|ssl(3)>, "
"L<SSL_CTX_set_client_CA_list(3)|SSL_CTX_set_client_CA_list(3)>, "
"L<SSL_CTX_set_client_cert_cb(3)|SSL_CTX_set_client_cert_cb(3)>"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_current_cipher.pod:5
msgid ""
"SSL_get_current_cipher, SSL_get_cipher, SSL_get_cipher_name, "
"SSL_get_cipher_bits, SSL_get_cipher_version - get SSL_CIPHER of a connection"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_current_cipher.pod:12
#, no-wrap
msgid ""
" SSL_CIPHER *SSL_get_current_cipher(const SSL *ssl);\n"
" #define SSL_get_cipher(s) \\\n"
"                SSL_CIPHER_get_name(SSL_get_current_cipher(s))\n"
" #define SSL_get_cipher_name(s) \\\n"
"                SSL_CIPHER_get_name(SSL_get_current_cipher(s))\n"
" #define SSL_get_cipher_bits(s,np) \\\n"
"                SSL_CIPHER_get_bits(SSL_get_current_cipher(s),np)\n"
" #define SSL_get_cipher_version(s) \\\n"
"                SSL_CIPHER_get_version(SSL_get_current_cipher(s))\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_current_cipher.pod:24
msgid ""
"SSL_get_current_cipher() returns a pointer to an SSL_CIPHER object "
"containing the description of the actually used cipher of a connection "
"established with the B<ssl> object."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_current_cipher.pod:28
msgid ""
"SSL_get_cipher() and SSL_get_cipher_name() are identical macros to obtain "
"the name of the currently used cipher. SSL_get_cipher_bits() is a macro to "
"obtain the number of secret/algorithm bits used and SSL_get_cipher_version() "
"returns the protocol name.  See "
"L<SSL_CIPHER_get_name(3)|SSL_CIPHER_get_name(3)> for more details."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_current_cipher.pod:36
msgid ""
"SSL_get_current_cipher() returns the cipher actually used or NULL, when no "
"session has been established."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_current_cipher.pod:41
msgid "L<ssl(3)|ssl(3)>, L<SSL_CIPHER_get_name(3)|SSL_CIPHER_get_name(3)>"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_default_timeout.pod:5
msgid "SSL_get_default_timeout - get default session timeout value"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_default_timeout.pod:11
#, no-wrap
msgid ""
" long SSL_get_default_timeout(const SSL *ssl);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_default_timeout.pod:15
msgid ""
"SSL_get_default_timeout() returns the default timeout value assigned to "
"SSL_SESSION objects negotiated for the protocol valid for B<ssl>."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_default_timeout.pod:20
msgid ""
"Whenever a new session is negotiated, it is assigned a timeout value, after "
"which it will not be accepted for session reuse. If the timeout value was "
"not explicitly set using L<SSL_CTX_set_timeout(3)|SSL_CTX_set_timeout(3)>, "
"the hardcoded default timeout for the protocol will be used."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_default_timeout.pod:26
msgid ""
"SSL_get_default_timeout() return this hardcoded value, which is 300 seconds "
"for all currently supported protocols (SSLv2, SSLv3, and TLSv1)."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_default_timeout.pod:31
msgid "See description."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_default_timeout.pod:35
msgid ""
"L<ssl(3)|ssl(3)>, "
"L<SSL_CTX_set_session_cache_mode(3)|SSL_CTX_set_session_cache_mode(3)>, "
"L<SSL_SESSION_get_time(3)|SSL_SESSION_get_time(3)>, "
"L<SSL_CTX_flush_sessions(3)|SSL_CTX_flush_sessions(3)>, "
"L<SSL_get_default_timeout(3)|SSL_get_default_timeout(3)>"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:5
msgid "SSL_get_error - obtain result code for TLS/SSL I/O operation"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_error.pod:11
#, no-wrap
msgid ""
" int SSL_get_error(const SSL *ssl, int ret);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:15
msgid ""
"SSL_get_error() returns a result code (suitable for the C \"switch\" "
"statement) for a preceding call to SSL_connect(), SSL_accept(), "
"SSL_do_handshake(), SSL_read(), SSL_peek(), or SSL_write() on B<ssl>.  The "
"value returned by that TLS/SSL I/O function must be passed to "
"SSL_get_error() in parameter B<ret>."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:21
msgid ""
"In addition to B<ssl> and B<ret>, SSL_get_error() inspects the current "
"thread's OpenSSL error queue.  Thus, SSL_get_error() must be used in the "
"same thread that performed the TLS/SSL I/O operation, and no other OpenSSL "
"function calls should appear in between.  The current thread's error queue "
"must be empty before the TLS/SSL I/O operation is attempted, or "
"SSL_get_error() will not work reliably."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:30 C/ssl/SSL_get_verify_result.pod:37
msgid "The following return values can currently occur:"
msgstr ""

#. type: =item
#: C/ssl/SSL_get_error.pod:34
msgid "SSL_ERROR_NONE"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:36
msgid ""
"The TLS/SSL I/O operation completed.  This result code is returned if and "
"only if B<ret E<gt> 0>."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_error.pod:39
msgid "SSL_ERROR_ZERO_RETURN"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:41
msgid ""
"The TLS/SSL connection has been closed.  If the protocol version is SSL 3.0 "
"or TLS 1.0, this result code is returned only if a closure alert has "
"occurred in the protocol, i.e. if the connection has been closed "
"cleanly. Note that in this case B<SSL_ERROR_ZERO_RETURN> does not "
"necessarily indicate that the underlying transport has been closed."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_error.pod:48
msgid "SSL_ERROR_WANT_READ, SSL_ERROR_WANT_WRITE"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:50
msgid ""
"The operation did not complete; the same TLS/SSL I/O function should be "
"called again later.  If, by then, the underlying B<BIO> has data available "
"for reading (if the result code is B<SSL_ERROR_WANT_READ>)  or allows "
"writing data (B<SSL_ERROR_WANT_WRITE>), then some TLS/SSL protocol progress "
"will take place, i.e. at least part of an TLS/SSL record will be read or "
"written.  Note that the retry may again lead to a B<SSL_ERROR_WANT_READ> or "
"B<SSL_ERROR_WANT_WRITE> condition.  There is no fixed upper limit for the "
"number of iterations that may be necessary until progress becomes visible at "
"application protocol level."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:61
msgid ""
"For socket B<BIO>s (e.g. when SSL_set_fd() was used), select() or poll() on "
"the underlying socket can be used to find out when the TLS/SSL I/O function "
"should be retried."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:65
msgid ""
"Caveat: Any TLS/SSL I/O function can lead to either of "
"B<SSL_ERROR_WANT_READ> and B<SSL_ERROR_WANT_WRITE>.  In particular, "
"SSL_read() or SSL_peek() may want to write data and SSL_write() may want to "
"read data.  This is mainly because TLS/SSL handshakes may occur at any time "
"during the protocol (initiated by either the client or the server); "
"SSL_read(), SSL_peek(), and SSL_write() will handle any pending handshakes."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_error.pod:72
msgid "SSL_ERROR_WANT_CONNECT, SSL_ERROR_WANT_ACCEPT"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:74
msgid ""
"The operation did not complete; the same TLS/SSL I/O function should be "
"called again later. The underlying BIO was not connected yet to the peer and "
"the call would block in connect()/accept(). The SSL function should be "
"called again when the connection is established. These messages can only "
"appear with a BIO_s_connect() or BIO_s_accept() BIO, respectively.  In order "
"to find out, when the connection has been successfully established, on many "
"platforms select() or poll() for writing on the socket file descriptor can "
"be used."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_error.pod:83
msgid "SSL_ERROR_WANT_X509_LOOKUP"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:85
msgid ""
"The operation did not complete because an application callback set by "
"SSL_CTX_set_client_cert_cb() has asked to be called again.  The TLS/SSL I/O "
"function should be called again later.  Details depend on the application."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_error.pod:90
msgid "SSL_ERROR_SYSCALL"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:92
msgid ""
"Some I/O error occurred.  The OpenSSL error queue may contain more "
"information on the error.  If the error queue is empty (i.e. ERR_get_error() "
"returns 0), B<ret> can be used to find out more about the error: If B<ret == "
"0>, an EOF was observed that violates the protocol.  If B<ret == -1>, the "
"underlying B<BIO> reported an I/O error (for socket I/O on Unix systems, "
"consult B<errno> for details)."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_error.pod:99
msgid "SSL_ERROR_SSL"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:101
msgid ""
"A failure in the SSL library occurred, usually a protocol error.  The "
"OpenSSL error queue contains more information on the error."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:108
msgid "L<ssl(3)|ssl(3)>, L<err(3)|err(3)>"
msgstr ""

#. type: =head1
#: C/ssl/SSL_get_error.pod:110
msgid "HISTORY"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_error.pod:112
msgid "SSL_get_error() was added in SSLeay 0.8."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:5
msgid ""
"SSL_get_ex_data_X509_STORE_CTX_idx - get ex_data index to access SSL "
"structure from X509_STORE_CTX"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:12
#, no-wrap
msgid ""
" int SSL_get_ex_data_X509_STORE_CTX_idx(void);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:16
msgid ""
"SSL_get_ex_data_X509_STORE_CTX_idx() returns the index number under which "
"the pointer to the SSL object is stored into the X509_STORE_CTX object."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:21
msgid ""
"Whenever a X509_STORE_CTX object is created for the verification of the "
"peers certificate during a handshake, a pointer to the SSL object is stored "
"into the X509_STORE_CTX object to identify the connection affected.  To "
"retrieve this pointer the X509_STORE_CTX_get_ex_data() function can be used "
"with the correct index. This index is globally the same for all "
"X509_STORE_CTX objects and can be retrieved using "
"SSL_get_ex_data_X509_STORE_CTX_idx(). The index value is set when "
"SSL_get_ex_data_X509_STORE_CTX_idx() is first called either by the "
"application program directly or indirectly during other SSL setup functions "
"or during the handshake."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:32
msgid ""
"The value depends on other index values defined for X509_STORE_CTX objects "
"before the SSL index is created."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:39 C/ssl/SSL_get_fd.pod:34
msgid "E<gt>=0"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:41
msgid "The index value to access the pointer."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:43
msgid "E<lt>0"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:45
msgid "An error occurred, check the error stack for a detailed error message."
msgstr ""

#. type: =head1
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:49 C/ssl/SSL_get_ex_new_index.pod:47
msgid "EXAMPLES"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:51
msgid ""
"The index returned from SSL_get_ex_data_X509_STORE_CTX_idx() allows to "
"access the SSL object for the connection to be accessed during the "
"verify_callback() when checking the peers certificate. Please check the "
"example in L<SSL_CTX_set_verify(3)|SSL_CTX_set_verify(3)>,"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:58
msgid ""
"L<ssl(3)|ssl(3)>, L<SSL_CTX_set_verify(3)|SSL_CTX_set_verify(3)>, "
"L<CRYPTO_set_ex_data(3)|CRYPTO_set_ex_data(3)>"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_new_index.pod:5
msgid ""
"SSL_get_ex_new_index, SSL_set_ex_data, SSL_get_ex_data - internal "
"application specific data functions"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_ex_new_index.pod:11
#, no-wrap
msgid ""
" int SSL_get_ex_new_index(long argl, void *argp,\n"
"                CRYPTO_EX_new *new_func,\n"
"                CRYPTO_EX_dup *dup_func,\n"
"                CRYPTO_EX_free *free_func);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_ex_new_index.pod:16
#, no-wrap
msgid ""
" int SSL_set_ex_data(SSL *ssl, int idx, void *arg);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_ex_new_index.pod:18
#, no-wrap
msgid ""
" void *SSL_get_ex_data(const SSL *ssl, int idx);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_ex_new_index.pod:20
#, no-wrap
msgid ""
" typedef int new_func(void *parent, void *ptr, CRYPTO_EX_DATA *ad,\n"
"                int idx, long argl, void *argp);\n"
" typedef void free_func(void *parent, void *ptr, CRYPTO_EX_DATA *ad,\n"
"                int idx, long argl, void *argp);\n"
" typedef int dup_func(CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from, void "
"*from_d,\n"
"                int idx, long argl, void *argp);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_new_index.pod:29
msgid ""
"Several OpenSSL structures can have application specific data attached to "
"them.  These functions are used internally by OpenSSL to manipulate "
"application specific data attached to a specific structure."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_new_index.pod:33
msgid ""
"SSL_get_ex_new_index() is used to register a new index for application "
"specific data."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_new_index.pod:36
msgid ""
"SSL_set_ex_data() is used to store application data at B<arg> for B<idx> "
"into the B<ssl> object."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_new_index.pod:39
msgid ""
"SSL_get_ex_data() is used to retrieve the information for B<idx> from "
"B<ssl>."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_new_index.pod:42
msgid ""
"A detailed description for the B<*_get_ex_new_index()> functionality can be "
"found in L<RSA_get_ex_new_index(3)|RSA_get_ex_new_index(3)>.  The "
"B<*_get_ex_data()> and B<*_set_ex_data()> functionality is described in "
"L<CRYPTO_set_ex_data(3)|CRYPTO_set_ex_data(3)>."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_new_index.pod:49
msgid ""
"An example on how to use the functionality is included in the example "
"verify_callback() in L<SSL_CTX_set_verify(3)|SSL_CTX_set_verify(3)>."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_ex_new_index.pod:54
msgid ""
"L<ssl(3)|ssl(3)>, L<RSA_get_ex_new_index(3)|RSA_get_ex_new_index(3)>, "
"L<CRYPTO_set_ex_data(3)|CRYPTO_set_ex_data(3)>, "
"L<SSL_CTX_set_verify(3)|SSL_CTX_set_verify(3)>"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_fd.pod:5
msgid "SSL_get_fd - get file descriptor linked to an SSL object"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_fd.pod:11
#, no-wrap
msgid ""
" int SSL_get_fd(const SSL *ssl);\n"
" int SSL_get_rfd(const SSL *ssl);\n"
" int SSL_get_wfd(const SSL *ssl);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_fd.pod:17
msgid ""
"SSL_get_fd() returns the file descriptor which is linked to B<ssl>.  "
"SSL_get_rfd() and SSL_get_wfd() return the file descriptors for the read or "
"the write channel, which can be different. If the read and the write channel "
"are different, SSL_get_fd() will return the file descriptor of the read "
"channel."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_fd.pod:25 C/ssl/SSL_get_peer_cert_chain.pod:33 C/ssl/SSL_get_peer_certificate.pod:36 C/ssl/SSL_get_rbio.pod:22 C/ssl/SSL_get_session.pod:53
msgid "The following return values can occur:"
msgstr ""

#. type: =item
#: C/ssl/SSL_get_fd.pod:29
msgid "-1"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_fd.pod:31
msgid ""
"The operation failed, because the underlying BIO is not of the correct type "
"(suitable for file descriptors)."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_fd.pod:36
msgid "The file descriptor linked to B<ssl>."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_fd.pod:42
msgid "L<SSL_set_fd(3)|SSL_set_fd(3)>, L<ssl(3)|ssl(3)> , L<bio(3)|bio(3)>"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_cert_chain.pod:5
msgid "SSL_get_peer_cert_chain - get the X509 certificate chain of the peer"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_peer_cert_chain.pod:11
#, no-wrap
msgid ""
" STACK_OF(X509) *SSL_get_peer_cert_chain(const SSL *ssl);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_cert_chain.pod:15
msgid ""
"SSL_get_peer_cert_chain() returns a pointer to STACK_OF(X509) certificates "
"forming the certificate chain of the peer. If called on the client side, the "
"stack also contains the peer's certificate; if called on the server side, "
"the peer's certificate must be obtained separately using "
"L<SSL_get_peer_certificate(3)|SSL_get_peer_certificate(3)>.  If the peer did "
"not present a certificate, NULL is returned."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_cert_chain.pod:24
msgid ""
"The peer certificate chain is not necessarily available after reusing a "
"session, in which case a NULL pointer is returned."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_cert_chain.pod:27
msgid ""
"The reference count of the STACK_OF(X509) object is not incremented.  If the "
"corresponding session is freed, the pointer must not be used any longer."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_cert_chain.pod:39
msgid ""
"No certificate was presented by the peer or no connection was established or "
"the certificate chain is no longer available when a session is reused."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_peer_cert_chain.pod:42
msgid "Pointer to a STACK_OF(X509)"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_cert_chain.pod:44
msgid "The return value points to the certificate chain presented by the peer."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_cert_chain.pod:50
msgid "L<ssl(3)|ssl(3)>, L<SSL_get_peer_certificate(3)|SSL_get_peer_certificate(3)>"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_certificate.pod:5
msgid "SSL_get_peer_certificate - get the X509 certificate of the peer"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_peer_certificate.pod:11
#, no-wrap
msgid ""
" X509 *SSL_get_peer_certificate(const SSL *ssl);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_certificate.pod:15
msgid ""
"SSL_get_peer_certificate() returns a pointer to the X509 certificate the "
"peer presented. If the peer did not present a certificate, NULL is returned."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_certificate.pod:20
msgid ""
"Due to the protocol definition, a TLS/SSL server will always send a "
"certificate, if present. A client will only send a certificate when "
"explicitly requested to do so by the server (see "
"L<SSL_CTX_set_verify(3)|SSL_CTX_set_verify(3)>). If an anonymous cipher is "
"used, no certificates are sent."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_certificate.pod:26
msgid ""
"That a certificate is returned does not indicate information about the "
"verification state, use L<SSL_get_verify_result(3)|SSL_get_verify_result(3)> "
"to check the verification state."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_certificate.pod:30
msgid ""
"The reference count of the X509 object is incremented by one, so that it "
"will not be destroyed when the session containing the peer certificate is "
"freed. The X509 object must be explicitly freed using X509_free()."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_certificate.pod:42
msgid "No certificate was presented by the peer or no connection was established."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_peer_certificate.pod:44
msgid "Pointer to an X509 certificate"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_certificate.pod:46
msgid "The return value points to the certificate presented by the peer."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_peer_certificate.pod:52
msgid ""
"L<ssl(3)|ssl(3)>, L<SSL_get_verify_result(3)|SSL_get_verify_result(3)>, "
"L<SSL_CTX_set_verify(3)|SSL_CTX_set_verify(3)>"
msgstr ""

#. type: =end
#: C/ssl/SSL_get_psk_identity.pod:3 C/ssl/SSL_get_psk_identity.pod:30
msgid "comment"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_psk_identity.pod:5
msgid "Copyright 2005 Nokia. All rights reserved."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_psk_identity.pod:7
msgid ""
"The portions of the attached software (\"Contribution\") is developed by "
"Nokia Corporation and is licensed pursuant to the OpenSSL open source "
"license."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_psk_identity.pod:11
msgid ""
"The Contribution, originally written by Mika Kousa and Pasi Eronen of Nokia "
"Corporation, consists of the \"PSK\" (Pre-Shared Key) ciphersuites support "
"(see RFC 4279) to OpenSSL."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_psk_identity.pod:15
msgid ""
"No patent licenses or other rights except those expressly stated in the "
"OpenSSL open source license shall be deemed granted or received expressly, "
"by implication, estoppel, or otherwise."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_psk_identity.pod:19
msgid ""
"No assurances are provided by Nokia that the Contribution does not infringe "
"the patent or other intellectual property rights of any third party or that "
"the license provides you with all the necessary rights to make use of the "
"Contribution."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_psk_identity.pod:24
msgid ""
"THE SOFTWARE IS PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND. IN ADDITION "
"TO THE DISCLAIMERS INCLUDED IN THE LICENSE, NOKIA SPECIFICALLY DISCLAIMS ANY "
"LIABILITY FOR CLAIMS BROUGHT BY YOU OR ANY OTHER ENTITY BASED ON "
"INFRINGEMENT OF INTELLECTUAL PROPERTY RIGHTS OR OTHERWISE."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_psk_identity.pod:34
msgid ""
"SSL_get_psk_identity, SSL_get_psk_identity_hint - get PSK client identity "
"and hint"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_psk_identity.pod:41
#, no-wrap
msgid ""
" const char *SSL_get_psk_identity_hint(const SSL *ssl);\n"
" const char *SSL_get_psk_identity(const SSL *ssl);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_psk_identity.pod:47
msgid ""
"SSL_get_psk_identity_hint() is used to retrieve the PSK identity hint used "
"during the connection setup related to SSL object B<ssl>. Similarly, "
"SSL_get_psk_identity() is used to retrieve the PSK identity used during the "
"connection setup."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_psk_identity.pod:55
msgid ""
"If non-B<NULL>, SSL_get_psk_identity_hint() returns the PSK identity hint "
"and SSL_get_psk_identity() returns the PSK identity. Both are "
"B<NULL>-terminated. SSL_get_psk_identity_hint() may return B<NULL> if no PSK "
"identity hint was used during the connection setup."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_psk_identity.pod:60
msgid ""
"Note that the return value is valid only during the lifetime of the SSL "
"object B<ssl>."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_rbio.pod:5
msgid "SSL_get_rbio - get BIO linked to an SSL object"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_rbio.pod:11
#, no-wrap
msgid ""
" BIO *SSL_get_rbio(SSL *ssl);\n"
" BIO *SSL_get_wbio(SSL *ssl);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_rbio.pod:16
msgid ""
"SSL_get_rbio() and SSL_get_wbio() return pointers to the BIOs for the read "
"or the write channel, which can be different. The reference count of the BIO "
"is not incremented."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_rbio.pod:28
msgid "No BIO was connected to the SSL object"
msgstr ""

#. type: =item
#: C/ssl/SSL_get_rbio.pod:30
msgid "Any other pointer"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_rbio.pod:32
msgid "The BIO linked to B<ssl>."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_rbio.pod:38
msgid "L<SSL_set_bio(3)|SSL_set_bio(3)>, L<ssl(3)|ssl(3)> , L<bio(3)|bio(3)>"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_session.pod:5
msgid "SSL_get_session - retrieve TLS/SSL session data"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_session.pod:11
#, no-wrap
msgid ""
" SSL_SESSION *SSL_get_session(const SSL *ssl);\n"
" SSL_SESSION *SSL_get0_session(const SSL *ssl);\n"
" SSL_SESSION *SSL_get1_session(SSL *ssl);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_session.pod:17
msgid ""
"SSL_get_session() returns a pointer to the B<SSL_SESSION> actually used in "
"B<ssl>. The reference count of the B<SSL_SESSION> is not incremented, so "
"that the pointer can become invalid by other operations."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_session.pod:21
msgid "SSL_get0_session() is the same as SSL_get_session()."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_session.pod:23
msgid ""
"SSL_get1_session() is the same as SSL_get_session(), but the reference count "
"of the B<SSL_SESSION> is incremented by one."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_session.pod:28
msgid ""
"The ssl session contains all information required to re-establish the "
"connection without a new handshake."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_session.pod:31
msgid ""
"SSL_get0_session() returns a pointer to the actual session. As the reference "
"counter is not incremented, the pointer is only valid while the connection "
"is in use. If L<SSL_clear(3)|SSL_clear(3)> or L<SSL_free(3)|SSL_free(3)> is "
"called, the session may be removed completely (if considered bad), and the "
"pointer obtained will become invalid. Even if the session is valid, it can "
"be removed at any time due to timeout during "
"L<SSL_CTX_flush_sessions(3)|SSL_CTX_flush_sessions(3)>."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_session.pod:39
msgid ""
"If the data is to be kept, SSL_get1_session() will increment the reference "
"count, so that the session will not be implicitly removed by other "
"operations but stays in memory. In order to remove the session "
"L<SSL_SESSION_free(3)|SSL_SESSION_free(3)> must be explicitly called once to "
"decrement the reference count again."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_session.pod:45
msgid ""
"SSL_SESSION objects keep internal link information about the session cache "
"list, when being inserted into one SSL_CTX object's session cache.  One "
"SSL_SESSION object, regardless of its reference count, must therefore only "
"be used with one SSL_CTX object (and the SSL objects created from this "
"SSL_CTX object)."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_session.pod:59
msgid "There is no session available in B<ssl>."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_session.pod:61
msgid "Pointer to an SSL"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_session.pod:63
msgid "The return value points to the data of an SSL session."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_session.pod:69
msgid ""
"L<ssl(3)|ssl(3)>, L<SSL_free(3)|SSL_free(3)>, L<SSL_clear(3)|SSL_clear(3)>, "
"L<SSL_SESSION_free(3)|SSL_SESSION_free(3)>"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_verify_result.pod:5
msgid "SSL_get_verify_result - get result of peer certificate verification"
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_verify_result.pod:11
#, no-wrap
msgid ""
" long SSL_get_verify_result(const SSL *ssl);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_verify_result.pod:15
msgid ""
"SSL_get_verify_result() returns the result of the verification of the X509 "
"certificate presented by the peer, if any."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_verify_result.pod:20
msgid ""
"SSL_get_verify_result() can only return one error code while the "
"verification of a certificate can fail because of many reasons at the same "
"time. Only the last verification error that occurred during the processing "
"is available from SSL_get_verify_result()."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_verify_result.pod:25
msgid ""
"The verification result is part of the established session and is restored "
"when a session is reused."
msgstr ""

#. type: =head1
#: C/ssl/SSL_get_verify_result.pod:28
msgid "BUGS"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_verify_result.pod:30
msgid ""
"If no peer certificate was presented, the returned result code is "
"X509_V_OK. This is because no verification error occurred, it does however "
"not indicate success. SSL_get_verify_result() is only useful in connection "
"with L<SSL_get_peer_certificate(3)|SSL_get_peer_certificate(3)>."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_verify_result.pod:41
msgid "X509_V_OK"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_verify_result.pod:43
msgid "The verification succeeded or no peer certificate was presented."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_verify_result.pod:45
msgid "Any other value"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_verify_result.pod:47
msgid "Documented in L<verify(1)|verify(1)>."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_verify_result.pod:53
msgid ""
"L<ssl(3)|ssl(3)>, L<SSL_set_verify_result(3)|SSL_set_verify_result(3)>, "
"L<SSL_get_peer_certificate(3)|SSL_get_peer_certificate(3)>, "
"L<verify(1)|verify(1)>"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_version.pod:5
msgid "SSL_get_version - get the protocol version of a connection."
msgstr ""

#. type: verbatim
#: C/ssl/SSL_get_version.pod:11
#, no-wrap
msgid ""
" const char *SSL_get_version(const SSL *ssl);\n"
"\n"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_version.pod:15
msgid ""
"SSL_get_version() returns the name of the protocol used for the connection "
"B<ssl>."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_version.pod:20
msgid "The following strings can be returned:"
msgstr ""

#. type: =item
#: C/ssl/SSL_get_version.pod:24
msgid "SSLv2"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_version.pod:26
msgid "The connection uses the SSLv2 protocol."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_version.pod:28
msgid "SSLv3"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_version.pod:30
msgid "The connection uses the SSLv3 protocol."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_version.pod:32
msgid "TLSv1"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_version.pod:34
msgid "The connection uses the TLSv1.0 protocol."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_version.pod:36
msgid "TLSv1.1"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_version.pod:38
msgid "The connection uses the TLSv1.1 protocol."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_version.pod:40
msgid "TLSv1.2"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_version.pod:42
msgid "The connection uses the TLSv1.2 protocol."
msgstr ""

#. type: =item
#: C/ssl/SSL_get_version.pod:44
msgid "unknown"
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_version.pod:46
msgid "This indicates that no version has been set (no connection established)."
msgstr ""

#. type: textblock
#: C/ssl/SSL_get_version.pod:52
msgid "L<ssl(3)|ssl(3)>"
msgstr ""
