# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2013-05-26 15:51-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: =head1
#: C/apps/asn1parse.pod:3 C/crypto/ASN1_OBJECT_new.pod:3 C/crypto/ASN1_STRING_length.pod:3 C/crypto/ASN1_STRING_new.pod:3 C/crypto/ASN1_STRING_print_ex.pod:3 C/crypto/ASN1_generate_nconf.pod:3
msgid "NAME"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:5
msgid "asn1parse - ASN.1 parsing tool"
msgstr ""

#. type: =head1
#: C/apps/asn1parse.pod:7 C/crypto/ASN1_OBJECT_new.pod:7 C/crypto/ASN1_STRING_length.pod:9 C/crypto/ASN1_STRING_new.pod:8 C/crypto/ASN1_STRING_print_ex.pod:7 C/crypto/ASN1_generate_nconf.pod:7
msgid "SYNOPSIS"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:9
msgid ""
"B<openssl> B<asn1parse> [B<-inform PEM|DER>] [B<-in filename>] [B<-out "
"filename>] [B<-noout>] [B<-offset number>] [B<-length number>] [B<-i>] "
"[B<-oid filename>] [B<-strparse offset>] [B<-genstr string>] [B<-genconf "
"file>]"
msgstr ""

#. type: =head1
#: C/apps/asn1parse.pod:22 C/crypto/ASN1_OBJECT_new.pod:14 C/crypto/ASN1_STRING_length.pod:26 C/crypto/ASN1_STRING_new.pod:16 C/crypto/ASN1_STRING_print_ex.pod:16 C/crypto/ASN1_generate_nconf.pod:14
msgid "DESCRIPTION"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:24
msgid ""
"The B<asn1parse> command is a diagnostic utility that can parse ASN.1 "
"structures. It can also be used to extract data from ASN.1 formatted data."
msgstr ""

#. type: =head1
#: C/apps/asn1parse.pod:27
msgid "OPTIONS"
msgstr ""

#. type: =item
#: C/apps/asn1parse.pod:31
msgid "B<-inform> B<DER|PEM>"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:33
msgid ""
"the input format. B<DER> is binary format and B<PEM> (the default) is base64 "
"encoded."
msgstr ""

#. type: =item
#: C/apps/asn1parse.pod:36
msgid "B<-in filename>"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:38
msgid "the input file, default is standard input"
msgstr ""

#. type: =item
#: C/apps/asn1parse.pod:40
msgid "B<-out filename>"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:42
msgid ""
"output file to place the DER encoded data into. If this option is not "
"present then no data will be output. This is most useful when combined with "
"the B<-strparse> option."
msgstr ""

#. type: =item
#: C/apps/asn1parse.pod:46
msgid "B<-noout>"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:48
msgid "don't output the parsed version of the input file."
msgstr ""

#. type: =item
#: C/apps/asn1parse.pod:50
msgid "B<-offset number>"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:52
msgid "starting offset to begin parsing, default is start of file."
msgstr ""

#. type: =item
#: C/apps/asn1parse.pod:54
msgid "B<-length number>"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:56
msgid "number of bytes to parse, default is until end of file."
msgstr ""

#. type: =item
#: C/apps/asn1parse.pod:58
msgid "B<-i>"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:60
msgid "indents the output according to the \"depth\" of the structures."
msgstr ""

#. type: =item
#: C/apps/asn1parse.pod:62
msgid "B<-oid filename>"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:64
msgid ""
"a file containing additional OBJECT IDENTIFIERs (OIDs). The format of this "
"file is described in the NOTES section below."
msgstr ""

#. type: =item
#: C/apps/asn1parse.pod:67
msgid "B<-strparse offset>"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:69
msgid ""
"parse the contents octets of the ASN.1 object starting at B<offset>. This "
"option can be used multiple times to \"drill down\" into a nested structure."
msgstr ""

#. type: =item
#: C/apps/asn1parse.pod:72
msgid "B<-genstr string>, B<-genconf file>"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:74
msgid ""
"generate encoded data based on B<string>, B<file> or both using "
"L<ASN1_generate_nconf(3)|ASN1_generate_nconf(3)> format. If B<file> only is "
"present then the string is obtained from the default section using the name "
"B<asn1>. The encoded data is passed through the ASN1 parser and printed out "
"as though it came from a file, the contents can thus be examined and written "
"to a file using the B<out> option."
msgstr ""

#. type: =head2
#: C/apps/asn1parse.pod:83
msgid "OUTPUT"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:85
msgid "The output will typically contain lines like this:"
msgstr ""

#. type: verbatim
#: C/apps/asn1parse.pod:87
#, no-wrap
msgid ""
"  0:d=0  hl=4 l= 681 cons: SEQUENCE          \n"
"\n"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:89 C/apps/asn1parse.pod:102
msgid "....."
msgstr ""

#. type: verbatim
#: C/apps/asn1parse.pod:91
#, no-wrap
msgid ""
"  229:d=3  hl=3 l= 141 prim: BIT STRING        \n"
"  373:d=2  hl=3 l= 162 cons: cont [ 3 ]        \n"
"  376:d=3  hl=3 l= 159 cons: SEQUENCE          \n"
"  379:d=4  hl=2 l=  29 cons: SEQUENCE          \n"
"  381:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 Subject Key "
"Identifier\n"
"  386:d=5  hl=2 l=  22 prim: OCTET STRING      \n"
"  410:d=4  hl=2 l= 112 cons: SEQUENCE          \n"
"  412:d=5  hl=2 l=   3 prim: OBJECT            :X509v3 Authority Key "
"Identifier\n"
"  417:d=5  hl=2 l= 105 prim: OCTET STRING      \n"
"  524:d=4  hl=2 l=  12 cons: SEQUENCE          \n"
"\n"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:104
msgid ""
"This example is part of a self signed certificate. Each line starts with the "
"offset in decimal. B<d=XX> specifies the current depth. The depth is "
"increased within the scope of any SET or SEQUENCE. B<hl=XX> gives the header "
"length (tag and length octets) of the current type. B<l=XX> gives the length "
"of the contents octets."
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:110
msgid "The B<-i> option can be used to make the output more readable."
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:112
msgid "Some knowledge of the ASN.1 structure is needed to interpret the output."
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:114
msgid ""
"In this example the BIT STRING at offset 229 is the certificate public key.  "
"The contents octets of this will contain the public key information. This "
"can be examined using the option B<-strparse 229> to yield:"
msgstr ""

#. type: verbatim
#: C/apps/asn1parse.pod:118
#, no-wrap
msgid ""
"    0:d=0  hl=3 l= 137 cons: SEQUENCE          \n"
"    3:d=1  hl=3 l= 129 prim: INTEGER           "
":E5D21E1F5C8D208EA7A2166C7FAF9F6BDF2059669C60876DDB70840F1A5AAFA59699FE471F379F1DD6A487E7D5409AB6A88D4A9746E24B91D8CF55DB3521015460C8EDE44EE8A4189F7A7BE77D6CD3A9AF2696F486855CF58BF0EDF2B4068058C7A947F52548DDF7E15E96B385F86422BEA9064A3EE9E1158A56E4A6F47E5897\n"
"  135:d=1  hl=2 l=   3 prim: INTEGER           :010001\n"
"\n"
msgstr ""

#. type: =head1
#: C/apps/asn1parse.pod:122 C/crypto/ASN1_OBJECT_new.pod:23 C/crypto/ASN1_STRING_length.pod:53 C/crypto/ASN1_STRING_new.pod:26 C/crypto/ASN1_STRING_print_ex.pod:29
msgid "NOTES"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:124
msgid ""
"If an OID is not part of OpenSSL's internal table it will be represented in "
"numerical form (for example 1.2.3.4). The file passed to the B<-oid> option "
"allows additional OIDs to be included. Each line consists of three columns, "
"the first column is the OID in numerical format and should be followed by "
"white space. The second column is the \"short name\" which is a single word "
"followed by white space. The final column is the rest of the line and is the "
"\"long name\". B<asn1parse> displays the long name. Example:"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:132
msgid "C<1.2.3.4\tshortName\tA long name>"
msgstr ""

#. type: =head1
#: C/apps/asn1parse.pod:134 C/crypto/ASN1_generate_nconf.pod:165
msgid "EXAMPLES"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:136
msgid "Parse a file:"
msgstr ""

#. type: verbatim
#: C/apps/asn1parse.pod:138
#, no-wrap
msgid ""
" openssl asn1parse -in file.pem\n"
"\n"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:140
msgid "Parse a DER file:"
msgstr ""

#. type: verbatim
#: C/apps/asn1parse.pod:142
#, no-wrap
msgid ""
" openssl asn1parse -inform DER -in file.der\n"
"\n"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:144
msgid "Generate a simple UTF8String:"
msgstr ""

#. type: verbatim
#: C/apps/asn1parse.pod:146
#, no-wrap
msgid ""
" openssl asn1parse -genstr 'UTF8:Hello World'\n"
"\n"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:148
msgid "Generate and write out a UTF8String, don't print parsed output:"
msgstr ""

#. type: verbatim
#: C/apps/asn1parse.pod:150
#, no-wrap
msgid ""
" openssl asn1parse -genstr 'UTF8:Hello World' -noout -out utf8.der\n"
"\n"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:152
msgid "Generate using a config file:"
msgstr ""

#. type: verbatim
#: C/apps/asn1parse.pod:154
#, no-wrap
msgid ""
" openssl asn1parse -genconf asn1.cnf -noout -out asn1.der\n"
"\n"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:156
msgid "Example config file:"
msgstr ""

#. type: verbatim
#: C/apps/asn1parse.pod:158
#, no-wrap
msgid ""
" asn1=SEQUENCE:seq_sect\n"
"\n"
msgstr ""

#. type: verbatim
#: C/apps/asn1parse.pod:160
#, no-wrap
msgid ""
" [seq_sect]\n"
"\n"
msgstr ""

#. type: verbatim
#: C/apps/asn1parse.pod:162
#, no-wrap
msgid ""
" field1=BOOL:TRUE\n"
" field2=EXP:0, UTF8:some random string\n"
"\n"
msgstr ""

#. type: =head1
#: C/apps/asn1parse.pod:166
msgid "BUGS"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:168
msgid ""
"There should be options to change the format of output lines. The output of "
"some ASN.1 types is not well handled (if at all)."
msgstr ""

#. type: =head1
#: C/apps/asn1parse.pod:171 C/crypto/ASN1_OBJECT_new.pod:37 C/crypto/ASN1_STRING_length.pod:77 C/crypto/ASN1_STRING_new.pod:38 C/crypto/ASN1_STRING_print_ex.pod:87 C/crypto/ASN1_generate_nconf.pod:257
msgid "SEE ALSO"
msgstr ""

#. type: textblock
#: C/apps/asn1parse.pod:173
msgid "L<ASN1_generate_nconf(3)|ASN1_generate_nconf(3)>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_OBJECT_new.pod:5
msgid "ASN1_OBJECT_new, ASN1_OBJECT_free, - object allocation functions"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_OBJECT_new.pod:9 C/crypto/ASN1_STRING_length.pod:11 C/crypto/ASN1_STRING_new.pod:10 C/crypto/ASN1_STRING_print_ex.pod:9 C/crypto/ASN1_generate_nconf.pod:9
#, no-wrap
msgid ""
" #include <openssl/asn1.h>\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_OBJECT_new.pod:11
#, no-wrap
msgid ""
" ASN1_OBJECT *ASN1_OBJECT_new(void);\n"
" void ASN1_OBJECT_free(ASN1_OBJECT *a);\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_OBJECT_new.pod:16
msgid ""
"The ASN1_OBJECT allocation routines, allocate and free an ASN1_OBJECT "
"structure, which represents an ASN1 OBJECT IDENTIFIER."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_OBJECT_new.pod:19
msgid "ASN1_OBJECT_new() allocates and initializes a ASN1_OBJECT structure."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_OBJECT_new.pod:21
msgid "ASN1_OBJECT_free() frees up the B<ASN1_OBJECT> structure B<a>."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_OBJECT_new.pod:25
msgid ""
"Although ASN1_OBJECT_new() allocates a new ASN1_OBJECT structure it is "
"almost never used in applications. The ASN1 object utility functions such as "
"OBJ_nid2obj() are used instead."
msgstr ""

#. type: =head1
#: C/crypto/ASN1_OBJECT_new.pod:29 C/crypto/ASN1_STRING_length.pod:75 C/crypto/ASN1_STRING_new.pod:31 C/crypto/ASN1_generate_nconf.pod:250
msgid "RETURN VALUES"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_OBJECT_new.pod:31
msgid ""
"If the allocation fails, ASN1_OBJECT_new() returns B<NULL> and sets an error "
"code that can be obtained by L<ERR_get_error(3)|ERR_get_error(3)>.  "
"Otherwise it returns a pointer to the newly allocated structure."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_OBJECT_new.pod:35
msgid "ASN1_OBJECT_free() returns no value."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_OBJECT_new.pod:39
msgid ""
"L<ERR_get_error(3)|ERR_get_error(3)>, "
"L<d2i_ASN1_OBJECT(3)|d2i_ASN1_OBJECT(3)>"
msgstr ""

#. type: =head1
#: C/crypto/ASN1_OBJECT_new.pod:41 C/crypto/ASN1_STRING_length.pod:81 C/crypto/ASN1_STRING_new.pod:42 C/crypto/ASN1_STRING_print_ex.pod:92 C/crypto/ASN1_generate_nconf.pod:261
msgid "HISTORY"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_OBJECT_new.pod:43
msgid ""
"ASN1_OBJECT_new() and ASN1_OBJECT_free() are available in all versions of "
"SSLeay and OpenSSL."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:5
msgid ""
"ASN1_STRING_dup, ASN1_STRING_cmp, ASN1_STRING_set, ASN1_STRING_length, "
"ASN1_STRING_length_set, ASN1_STRING_type, ASN1_STRING_data - ASN1_STRING "
"utility functions"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_STRING_length.pod:13
#, no-wrap
msgid ""
" int ASN1_STRING_length(ASN1_STRING *x);\n"
" unsigned char * ASN1_STRING_data(ASN1_STRING *x);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_STRING_length.pod:16
#, no-wrap
msgid ""
" ASN1_STRING * ASN1_STRING_dup(ASN1_STRING *a);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_STRING_length.pod:18
#, no-wrap
msgid ""
" int ASN1_STRING_cmp(ASN1_STRING *a, ASN1_STRING *b);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_STRING_length.pod:20
#, no-wrap
msgid ""
" int ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_STRING_length.pod:22
#, no-wrap
msgid ""
" int ASN1_STRING_type(ASN1_STRING *x);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_STRING_length.pod:24
#, no-wrap
msgid ""
" int ASN1_STRING_to_UTF8(unsigned char **out, ASN1_STRING *in);\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:28
msgid "These functions allow an B<ASN1_STRING> structure to be manipulated."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:30
msgid "ASN1_STRING_length() returns the length of the content of B<x>."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:32
msgid ""
"ASN1_STRING_data() returns an internal pointer to the data of B<x>.  Since "
"this is an internal pointer it should B<not> be freed or modified in any "
"way."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:36
msgid "ASN1_STRING_dup() returns a copy of the structure B<a>."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:38
msgid ""
"ASN1_STRING_cmp() compares B<a> and B<b> returning 0 if the two are "
"identical. The string types and content are compared."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:41
msgid ""
"ASN1_STRING_set() sets the data of string B<str> to the buffer B<data> or "
"length B<len>. The supplied data is copied. If B<len> is -1 then the length "
"is determined by strlen(data)."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:45
msgid ""
"ASN1_STRING_type() returns the type of B<x>, using standard constants such "
"as B<V_ASN1_OCTET_STRING>."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:48
msgid ""
"ASN1_STRING_to_UTF8() converts the string B<in> to UTF8 format, the "
"converted data is allocated in a buffer in B<*out>. The length of B<out> is "
"returned or a negative error code. The buffer B<*out> should be free using "
"OPENSSL_free()."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:55
msgid ""
"Almost all ASN1 types in OpenSSL are represented as an B<ASN1_STRING> "
"structure. Other types such as B<ASN1_OCTET_STRING> are simply typedefed to "
"B<ASN1_STRING> and the functions call the B<ASN1_STRING> equivalents.  "
"B<ASN1_STRING> is also used for some B<CHOICE> types which consist entirely "
"of primitive string types such as B<DirectoryString> and B<Time>."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:62
msgid ""
"These functions should B<not> be used to examine or modify B<ASN1_INTEGER> "
"or B<ASN1_ENUMERATED> types: the relevant B<INTEGER> or B<ENUMERATED> "
"utility functions should be used instead."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:66
msgid ""
"In general it cannot be assumed that the data returned by ASN1_STRING_data()  "
"is null terminated or does not contain embedded nulls. The actual format of "
"the data will depend on the actual string type itself: for example for and "
"IA5String the data will be ASCII, for a BMPString two bytes per character in "
"big endian format, UTF8String will be in UTF8 format."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:72
msgid ""
"Similar care should be take to ensure the data is in the correct format when "
"calling ASN1_STRING_set()."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_length.pod:79 C/crypto/ASN1_STRING_new.pod:40 C/crypto/ASN1_generate_nconf.pod:259
msgid "L<ERR_get_error(3)|ERR_get_error(3)>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_new.pod:5
msgid ""
"ASN1_STRING_new, ASN1_STRING_type_new, ASN1_STRING_free - ASN1_STRING "
"allocation functions"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_STRING_new.pod:12
#, no-wrap
msgid ""
" ASN1_STRING * ASN1_STRING_new(void);\n"
" ASN1_STRING * ASN1_STRING_type_new(int type);\n"
" void ASN1_STRING_free(ASN1_STRING *a);\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_new.pod:18
msgid ""
"ASN1_STRING_new() returns an allocated B<ASN1_STRING> structure. Its type is "
"undefined."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_new.pod:21
msgid ""
"ASN1_STRING_type_new() returns an allocated B<ASN1_STRING> structure of type "
"B<type>."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_new.pod:24
msgid "ASN1_STRING_free() frees up B<a>."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_new.pod:28
msgid ""
"Other string types call the B<ASN1_STRING> functions. For example "
"ASN1_OCTET_STRING_new() calls ASN1_STRING_type(V_ASN1_OCTET_STRING)."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_new.pod:33
msgid ""
"ASN1_STRING_new() and ASN1_STRING_type_new() return a valid ASN1_STRING "
"structure or B<NULL> if an error occurred."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_new.pod:36
msgid "ASN1_STRING_free() does not return a value."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_new.pod:44 C/crypto/ASN1_STRING_print_ex.pod:94
msgid "TBA"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:5
msgid "ASN1_STRING_print_ex, ASN1_STRING_print_ex_fp - ASN1_STRING output routines."
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_STRING_print_ex.pod:11
#, no-wrap
msgid ""
" int ASN1_STRING_print_ex(BIO *out, ASN1_STRING *str, unsigned long "
"flags);\n"
" int ASN1_STRING_print_ex_fp(FILE *fp, ASN1_STRING *str, unsigned long "
"flags);\n"
" int ASN1_STRING_print(BIO *out, ASN1_STRING *str);\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:18
msgid ""
"These functions output an B<ASN1_STRING> structure. B<ASN1_STRING> is used "
"to represent all the ASN1 string types."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:21
msgid ""
"ASN1_STRING_print_ex() outputs B<str> to B<out>, the format is determined by "
"the options B<flags>. ASN1_STRING_print_ex_fp() is identical except it "
"outputs to B<fp> instead."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:25
msgid ""
"ASN1_STRING_print() prints B<str> to B<out> but using a different format to "
"ASN1_STRING_print_ex(). It replaces unprintable characters (other than CR, "
"LF)  with '.'."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:31
msgid ""
"ASN1_STRING_print() is a legacy function which should be avoided in new "
"applications."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:33
msgid ""
"Although there are a large number of options frequently "
"B<ASN1_STRFLGS_RFC2253> is suitable, or on UTF8 terminals "
"B<ASN1_STRFLGS_RFC2253 & ~ASN1_STRFLGS_ESC_MSB>."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:36
msgid "The complete set of supported options for B<flags> is listed below."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:38
msgid ""
"Various characters can be escaped. If B<ASN1_STRFLGS_ESC_2253> is set the "
"characters determined by RFC2253 are escaped. If B<ASN1_STRFLGS_ESC_CTRL> is "
"set control characters are escaped. If B<ASN1_STRFLGS_ESC_MSB> is set "
"characters with the MSB set are escaped: this option should B<not> be used "
"if the terminal correctly interprets UTF8 sequences."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:44
msgid "Escaping takes several forms."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:46
msgid ""
"If the character being escaped is a 16 bit character then the form "
"\"\\UXXXX\" is used using exactly four characters for the hex "
"representation. If it is 32 bits then \"\\WXXXXXXXX\" is used using eight "
"characters of its hex representation. These forms will only be used if UTF8 "
"conversion is not set (see below)."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:51
msgid ""
"Printable characters are normally escaped using the backslash '\\' "
"character. If B<ASN1_STRFLGS_ESC_QUOTE> is set then the whole string is "
"instead surrounded by double quote characters: this is arguably more "
"readable than the backslash notation. Other characters use the \"\\XX\" "
"using exactly two characters of the hex representation."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:57
msgid ""
"If B<ASN1_STRFLGS_UTF8_CONVERT> is set then characters are converted to UTF8 "
"format first. If the terminal supports the display of UTF8 sequences then "
"this option will correctly display multi byte characters."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:61
msgid ""
"If B<ASN1_STRFLGS_IGNORE_TYPE> is set then the string type is not "
"interpreted at all: everything is assumed to be one byte per character. This "
"is primarily for debugging purposes and can result in confusing output in "
"multi character strings."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:65
msgid ""
"If B<ASN1_STRFLGS_SHOW_TYPE> is set then the string type itself is printed "
"out before its value (for example \"BMPSTRING\"), this actually uses "
"ASN1_tag2str()."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:68
msgid ""
"The content of a string instead of being interpreted can be \"dumped\": this "
"just outputs the value of the string using the form #XXXX using hex format "
"for each octet."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:72
msgid "If B<ASN1_STRFLGS_DUMP_ALL> is set then any type is dumped."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:74
msgid ""
"Normally non character string types (such as OCTET STRING) are assumed to be "
"one byte per character, if B<ASN1_STRFLGS_DUMP_UNKNOWN> is set then they "
"will be dumped instead."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:78
msgid ""
"When a type is dumped normally just the content octets are printed, if "
"B<ASN1_STRFLGS_DUMP_DER> is set then the complete encoding is dumped instead "
"(including tag and length octets)."
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_STRING_print_ex.pod:82
#, no-wrap
msgid ""
"B<ASN1_STRFLGS_RFC2253> includes all the flags required by RFC2253. It is\n"
"equivalent to:\n"
" ASN1_STRFLGS_ESC_2253 | ASN1_STRFLGS_ESC_CTRL | ASN1_STRFLGS_ESC_MSB |\n"
" ASN1_STRFLGS_UTF8_CONVERT | ASN1_STRFLGS_DUMP_UNKNOWN "
"ASN1_STRFLGS_DUMP_DER\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_STRING_print_ex.pod:89
msgid ""
"L<X509_NAME_print_ex(3)|X509_NAME_print_ex(3)>, "
"L<ASN1_tag2str(3)|ASN1_tag2str(3)>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:5
msgid "ASN1_generate_nconf, ASN1_generate_v3 - ASN1 generation functions"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:11
#, no-wrap
msgid ""
" ASN1_TYPE *ASN1_generate_nconf(char *str, CONF *nconf);\n"
" ASN1_TYPE *ASN1_generate_v3(char *str, X509V3_CTX *cnf);\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:16
msgid ""
"These functions generate the ASN1 encoding of a string in an B<ASN1_TYPE> "
"structure."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:19
msgid ""
"B<str> contains the string to encode B<nconf> or B<cnf> contains the "
"optional configuration information where additional strings will be read "
"from. B<nconf> will typically come from a config file wherease B<cnf> is "
"obtained from an B<X509V3_CTX> structure which will typically be used by "
"X509 v3 certificate extension functions. B<cnf> or B<nconf> can be set to "
"B<NULL> if no additional configuration will be used."
msgstr ""

#. type: =head1
#: C/crypto/ASN1_generate_nconf.pod:27
msgid "GENERATION STRING FORMAT"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:29
msgid ""
"The actual data encoded is determined by the string B<str> and the "
"configuration information. The general format of the string is:"
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:35
msgid "B<[modifier,]type[:value]>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:39
msgid ""
"That is zero or more comma separated modifiers followed by a type followed "
"by an optional colon and a value. The formats of B<type>, B<value> and "
"B<modifier> are explained below."
msgstr ""

#. type: =head2
#: C/crypto/ASN1_generate_nconf.pod:43
msgid "SUPPORTED TYPES"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:45
msgid ""
"The supported types are listed below. Unless otherwise specified only the "
"B<ASCII> format is permissible."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:50
msgid "B<BOOLEAN>, B<BOOL>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:52
msgid ""
"This encodes a boolean type. The B<value> string is mandatory and should be "
"B<TRUE> or B<FALSE>. Additionally B<TRUE>, B<true>, B<Y>, B<y>, B<YES>, "
"B<yes>, B<FALSE>, B<false>, B<N>, B<n>, B<NO> and B<no> are acceptable."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:57
msgid "B<NULL>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:59
msgid "Encode the B<NULL> type, the B<value> string must not be present."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:61
msgid "B<INTEGER>, B<INT>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:63
msgid ""
"Encodes an ASN1 B<INTEGER> type. The B<value> string represents the value of "
"the integer, it can be preceded by a minus sign and is normally interpreted "
"as a decimal value unless the prefix B<0x> is included."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:68
msgid "B<ENUMERATED>, B<ENUM>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:70
msgid ""
"Encodes the ASN1 B<ENUMERATED> type, it is otherwise identical to "
"B<INTEGER>."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:73
msgid "B<OBJECT>, B<OID>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:75
msgid ""
"Encodes an ASN1 B<OBJECT IDENTIFIER>, the B<value> string can be a short "
"name, a long name or numerical format."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:78
msgid "B<UTCTIME>, B<UTC>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:80
msgid ""
"Encodes an ASN1 B<UTCTime> structure, the value should be in the format "
"B<YYMMDDHHMMSSZ>."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:83
msgid "B<GENERALIZEDTIME>, B<GENTIME>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:85
msgid ""
"Encodes an ASN1 B<GeneralizedTime> structure, the value should be in the "
"format B<YYYYMMDDHHMMSSZ>."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:88
msgid "B<OCTETSTRING>, B<OCT>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:90
msgid ""
"Encodes an ASN1 B<OCTET STRING>. B<value> represents the contents of this "
"structure, the format strings B<ASCII> and B<HEX> can be used to specify the "
"format of B<value>."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:94
msgid "B<BITSTRING>, B<BITSTR>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:96
msgid ""
"Encodes an ASN1 B<BIT STRING>. B<value> represents the contents of this "
"structure, the format strings B<ASCII>, B<HEX> and B<BITLIST> can be used to "
"specify the format of B<value>."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:100
msgid ""
"If the format is anything other than B<BITLIST> the number of unused bits is "
"set to zero."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:103
msgid ""
"B<UNIVERSALSTRING>, B<UNIV>, B<IA5>, B<IA5STRING>, B<UTF8>, B<UTF8String>, "
"B<BMP>, B<BMPSTRING>, B<VISIBLESTRING>, B<VISIBLE>, B<PRINTABLESTRING>, "
"B<PRINTABLE>, B<T61>, B<T61STRING>, B<TELETEXSTRING>, B<GeneralString>, "
"B<NUMERICSTRING>, B<NUMERIC>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:109
msgid ""
"These encode the corresponding string types. B<value> represents the "
"contents of this structure. The format can be B<ASCII> or B<UTF8>."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:112
msgid "B<SEQUENCE>, B<SEQ>, B<SET>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:114
msgid ""
"Formats the result as an ASN1 B<SEQUENCE> or B<SET> type. B<value> should be "
"a section name which will contain the contents. The field names in the "
"section are ignored and the values are in the generated string format. If "
"B<value> is absent then an empty SEQUENCE will be encoded."
msgstr ""

#. type: =head2
#: C/crypto/ASN1_generate_nconf.pod:122
msgid "MODIFIERS"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:124
msgid ""
"Modifiers affect the following structure, they can be used to add EXPLICIT "
"or IMPLICIT tagging, add wrappers or to change the string format of the "
"final type and value. The supported formats are documented below."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:131
msgid "B<EXPLICIT>, B<EXP>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:133
msgid ""
"Add an explicit tag to the following structure. This string should be "
"followed by a colon and the tag value to use as a decimal value."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:137
msgid ""
"By following the number with B<U>, B<A>, B<P> or B<C> UNIVERSAL, "
"APPLICATION, PRIVATE or CONTEXT SPECIFIC tagging can be used, the default is "
"CONTEXT SPECIFIC."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:141
msgid "B<IMPLICIT>, B<IMP>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:143
msgid "This is the same as B<EXPLICIT> except IMPLICIT tagging is used instead."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:146
msgid "B<OCTWRAP>, B<SEQWRAP>, B<SETWRAP>, B<BITWRAP>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:148
msgid ""
"The following structure is surrounded by an OCTET STRING, a SEQUENCE, a SET "
"or a BIT STRING respectively. For a BIT STRING the number of unused bits is "
"set to zero."
msgstr ""

#. type: =item
#: C/crypto/ASN1_generate_nconf.pod:152
msgid "B<FORMAT>"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:154
msgid ""
"This specifies the format of the ultimate value. It should be followed by a "
"colon and one of the strings B<ASCII>, B<UTF8>, B<HEX> or B<BITLIST>."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:157
msgid ""
"If no format specifier is included then B<ASCII> is used. If B<UTF8> is "
"specified then the value string must be a valid B<UTF8> string. For B<HEX> "
"the output must be a set of hex digits. B<BITLIST> (which is only valid for "
"a BIT STRING) is a comma separated list of the indices of the set bits, all "
"other bits are zero."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:167
msgid "A simple IA5String:"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:169
#, no-wrap
msgid ""
" IA5STRING:Hello World\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:171
msgid "An IA5String explicitly tagged:"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:173
#, no-wrap
msgid ""
" EXPLICIT:0,IA5STRING:Hello World\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:175
msgid "An IA5String explicitly tagged using APPLICATION tagging:"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:177
#, no-wrap
msgid ""
" EXPLICIT:0A,IA5STRING:Hello World\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:179
msgid "A BITSTRING with bits 1 and 5 set and all others zero:"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:181
#, no-wrap
msgid ""
" FORMAT:BITLIST,BITSTRING:1,5\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:183
msgid ""
"A more complex example using a config file to produce a SEQUENCE consiting "
"of a BOOL an OID and a UTF8String:"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:186
#, no-wrap
msgid ""
" asn1 = SEQUENCE:seq_section\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:188
#, no-wrap
msgid ""
" [seq_section]\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:190
#, no-wrap
msgid ""
" field1 = BOOLEAN:TRUE\n"
" field2 = OID:commonName\n"
" field3 = UTF8:Third field\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:194
msgid ""
"This example produces an RSAPrivateKey structure, this is the key contained "
"in the file client.pem in all OpenSSL distributions (note: the field names "
"such as 'coeff' are ignored and are present just for clarity):"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:199
#, no-wrap
msgid ""
" asn1=SEQUENCE:private_key\n"
" [private_key]\n"
" version=INTEGER:0\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:203
#, no-wrap
msgid ""
" n=INTEGER:0xBB6FE79432CC6EA2D8F970675A5A87BFBE1AFF0BE63E879F2AFFB93644\\\n"
" D4D2C6D000430DEC66ABF47829E74B8C5108623A1C0EE8BE217B3AD8D36D5EB4FCA1D9\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:206 C/crypto/ASN1_generate_nconf.pod:248
#, no-wrap
msgid ""
" e=INTEGER:0x010001\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:208
#, no-wrap
msgid ""
" d=INTEGER:0x6F05EAD2F27FFAEC84BEC360C4B928FD5F3A9865D0FCAAD291E2A52F4A\\\n"
" F810DC6373278C006A0ABBA27DC8C63BF97F7E666E27C5284D7D3B1FFFE16B7A87B51D\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:211
#, no-wrap
msgid ""
" p=INTEGER:0xF3929B9435608F8A22C208D86795271D54EBDFB09DDEF539AB083DA912\\\n"
" D4BD57\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:214
#, no-wrap
msgid ""
" q=INTEGER:0xC50016F89DFF2561347ED1186A46E150E28BF2D0F539A1594BBD7FE467\\\n"
" 46EC4F\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:217
#, no-wrap
msgid ""
" exp1=INTEGER:0x9E7D4326C924AFC1DEA40B45650134966D6F9DFA3A7F9D698CD4ABEA\\\n"
" 9C0A39B9\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:220
#, no-wrap
msgid ""
" exp2=INTEGER:0xBA84003BB95355AFB7C50DF140C60513D0BA51D637272E355E397779\\\n"
" E7B2458F\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:223
#, no-wrap
msgid ""
" coeff=INTEGER:0x30B9E4F2AFA5AC679F920FC83F1F2DF1BAF1779CF989447FABC2F5\\\n"
" 628657053A\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:226
msgid ""
"This example is the corresponding public key in a SubjectPublicKeyInfo "
"structure:"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:229
#, no-wrap
msgid ""
" # Start with a SEQUENCE\n"
" asn1=SEQUENCE:pubkeyinfo\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:232
#, no-wrap
msgid ""
" # pubkeyinfo contains an algorithm identifier and the public key wrapped\n"
" # in a BIT STRING\n"
" [pubkeyinfo]\n"
" algorithm=SEQUENCE:rsa_alg\n"
" pubkey=BITWRAP,SEQUENCE:rsapubkey\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:238
#, no-wrap
msgid ""
" # algorithm ID for RSA is just an OID and a NULL\n"
" [rsa_alg]\n"
" algorithm=OID:rsaEncryption\n"
" parameter=NULL\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ASN1_generate_nconf.pod:243
#, no-wrap
msgid ""
" # Actual public key: modulus and exponent\n"
" [rsapubkey]\n"
" n=INTEGER:0xBB6FE79432CC6EA2D8F970675A5A87BFBE1AFF0BE63E879F2AFFB93644\\\n"
" D4D2C6D000430DEC66ABF47829E74B8C5108623A1C0EE8BE217B3AD8D36D5EB4FCA1D9\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:252
msgid ""
"ASN1_generate_nconf() and ASN1_generate_v3() return the encoded data as an "
"B<ASN1_TYPE> structure or B<NULL> if an error occurred."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:255
msgid ""
"The error codes that can be obtained by "
"L<ERR_get_error(3)|ERR_get_error(3)>."
msgstr ""

#. type: textblock
#: C/crypto/ASN1_generate_nconf.pod:263
msgid "ASN1_generate_nconf() and ASN1_generate_v3() were added to OpenSSL 0.9.8"
msgstr ""
