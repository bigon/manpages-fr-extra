# French translations for the openssl package
# Copyright (C) 2008, 2012, 2013 Debian French l10n team <debian-l10n-french@lists.debian.org>.
# This file is distributed under the same license as the openssl package.
#
# Nicolas François <nicolas.francois@centraliens.net>, 2008.
# David Prévot <david@tilapin.org>, 2012, 2013.
msgid ""
msgstr ""
"Project-Id-Version: openssl\n"
"POT-Creation-Date: 2014-03-03 13:15-0300\n"
"PO-Revision-Date: 2013-02-05 16:49-0400\n"
"Last-Translator: none yet\n"
"Language-Team: French <debian-l10n-french@lists.debian.org>\n"
"Language: fr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#. type: =head1
#: C/apps/errstr.pod:3 C/crypto/ERR_GET_LIB.pod:3
#: C/crypto/ERR_clear_error.pod:3 C/crypto/ERR_error_string.pod:3
#: C/crypto/ERR_get_error.pod:3 C/crypto/ERR_load_crypto_strings.pod:3
#: C/crypto/ERR_load_strings.pod:3 C/crypto/ERR_print_errors.pod:3
#: C/crypto/ERR_put_error.pod:3 C/crypto/ERR_remove_state.pod:3
#: C/crypto/ERR_set_mark.pod:3 C/crypto/err.pod:3
msgid "NAME"
msgstr "NOM"

#. type: textblock
#: C/apps/errstr.pod:5
msgid "errstr - lookup error codes"
msgstr "errstr - Recherche de codes d'erreur"

#. type: =head1
#: C/apps/errstr.pod:7 C/crypto/ERR_GET_LIB.pod:8
#: C/crypto/ERR_clear_error.pod:7 C/crypto/ERR_error_string.pod:9
#: C/crypto/ERR_get_error.pod:10 C/crypto/ERR_load_crypto_strings.pod:8
#: C/crypto/ERR_load_strings.pod:8 C/crypto/ERR_print_errors.pod:7
#: C/crypto/ERR_put_error.pod:7 C/crypto/ERR_remove_state.pod:7
#: C/crypto/ERR_set_mark.pod:7 C/crypto/err.pod:7
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

#. type: textblock
#: C/apps/errstr.pod:9
msgid "B<openssl errstr error_code>"
msgstr "B<openssl errstr code_erreur>"

#. type: =head1
#: C/apps/errstr.pod:11 C/crypto/ERR_GET_LIB.pod:18
#: C/crypto/ERR_clear_error.pod:13 C/crypto/ERR_error_string.pod:20
#: C/crypto/ERR_get_error.pod:29 C/crypto/ERR_load_crypto_strings.pod:19
#: C/crypto/ERR_load_strings.pod:18 C/crypto/ERR_print_errors.pod:14
#: C/crypto/ERR_put_error.pod:16 C/crypto/ERR_remove_state.pod:13
#: C/crypto/ERR_set_mark.pod:15 C/crypto/err.pod:47
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

#. type: textblock
#: C/apps/errstr.pod:13
msgid ""
"Sometimes an application will not load error message and only numerical "
"forms will be available. The B<errstr> utility can be used to display the "
"meaning of the hex code. The hex code is the hex digits after the second "
"colon."
msgstr ""
"Parfois une application ne fournit pas de message d'erreur, mais seulement "
"une forme numérique. L'utilitaire B<errstr> peut être utilisé pour afficher "
"la signification du code hexadécimal. Le code hexadécimal corresponds aux "
"chiffres hexadécimaux placés après le deuxième deux-points."

#. type: =head1
#: C/apps/errstr.pod:18
msgid "EXAMPLE"
msgstr "EXEMPLE"

#. type: textblock
#: C/apps/errstr.pod:20
msgid "The error code:"
msgstr "Le code d'erreur :"

#. type: verbatim
#: C/apps/errstr.pod:22
#, no-wrap
msgid ""
" 27594:error:2006D080:lib(32):func(109):reason(128):bss_file.c:107:\n"
"\n"
msgstr ""
" 27594:error:2006D080:lib(32):func(109):reason(128):bss_file.c:107:\n"
"\n"

#. type: verbatim
#: C/apps/errstr.pod:24
#, no-wrap
msgid ""
"can be displayed with:\n"
" \n"
msgstr ""
"peut être affiché avec :\n"
"\n"

#. type: verbatim
#: C/apps/errstr.pod:26
#, no-wrap
msgid ""
" openssl errstr 2006D080\n"
"\n"
msgstr ""
" openssl errstr 2006D080\n"
"\n"

#. type: textblock
#: C/apps/errstr.pod:28
msgid "to produce the error message:"
msgstr "pour produire le message d'erreur suivant :"

#. type: verbatim
#: C/apps/errstr.pod:30
#, no-wrap
msgid ""
" error:2006D080:BIO routines:BIO_new_file:no such file\n"
"\n"
msgstr ""
" error:2006D080:BIO routines:BIO_new_file:no such file\n"
"\n"

#. type: =head1
#: C/apps/errstr.pod:32 C/crypto/ERR_GET_LIB.pod:42
#: C/crypto/ERR_clear_error.pod:21 C/crypto/ERR_error_string.pod:61
#: C/crypto/ERR_get_error.pod:65 C/crypto/ERR_load_crypto_strings.pod:36
#: C/crypto/ERR_load_strings.pod:44 C/crypto/ERR_print_errors.pod:39
#: C/crypto/ERR_put_error.pod:35 C/crypto/ERR_remove_state.pod:26
#: C/crypto/ERR_set_mark.pod:30 C/crypto/err.pod:172
msgid "SEE ALSO"
msgstr "VOIR AUSSI"

#. type: textblock
#: C/apps/errstr.pod:34
msgid ""
"L<err(3)|err(3)>, L<ERR_load_crypto_strings(3)|ERR_load_crypto_strings(3)>, "
"L<SSL_load_error_strings(3)|SSL_load_error_strings(3)>"
msgstr ""
"L<err(3)|err(3)>, L<ERR_load_crypto_strings(3)|ERR_load_crypto_strings(3)>, "
"L<SSL_load_error_strings(3)|SSL_load_error_strings(3)>"

#. type: textblock
#: C/crypto/ERR_GET_LIB.pod:5
msgid ""
"ERR_GET_LIB, ERR_GET_FUNC, ERR_GET_REASON - get library, function and reason "
"code"
msgstr ""
"ERR_GET_LIB, ERR_GET_FUNC, ERR_GET_REASON - Obtenir un code de bibliothèque, "
"de fonction et de raison"

#. type: verbatim
#: C/crypto/ERR_GET_LIB.pod:10 C/crypto/ERR_clear_error.pod:9
#: C/crypto/ERR_error_string.pod:11 C/crypto/ERR_get_error.pod:12
#: C/crypto/ERR_load_crypto_strings.pod:10 C/crypto/ERR_load_strings.pod:10
#: C/crypto/ERR_print_errors.pod:9 C/crypto/ERR_put_error.pod:9
#: C/crypto/ERR_remove_state.pod:9 C/crypto/ERR_set_mark.pod:9
#: C/crypto/err.pod:9
#, no-wrap
msgid ""
" #include <openssl/err.h>\n"
"\n"
msgstr ""
" #include <openssl/err.h>\n"
"\n"

#. type: verbatim
#: C/crypto/ERR_GET_LIB.pod:12
#, no-wrap
msgid ""
" int ERR_GET_LIB(unsigned long e);\n"
"\n"
msgstr ""
" int ERR_GET_LIB(unsigned long e);\n"
"\n"

#. type: verbatim
#: C/crypto/ERR_GET_LIB.pod:14
#, no-wrap
msgid ""
" int ERR_GET_FUNC(unsigned long e);\n"
"\n"
msgstr ""
" int ERR_GET_FUNC(unsigned long e);\n"
"\n"

#. type: verbatim
#: C/crypto/ERR_GET_LIB.pod:16
#, no-wrap
msgid ""
" int ERR_GET_REASON(unsigned long e);\n"
"\n"
msgstr ""
" int ERR_GET_REASON(unsigned long e);\n"
"\n"

#. type: textblock
#: C/crypto/ERR_GET_LIB.pod:20
msgid ""
"The error code returned by ERR_get_error() consists of a library number, "
"function code and reason code. ERR_GET_LIB(), ERR_GET_FUNC()  and "
"ERR_GET_REASON() can be used to extract these."
msgstr ""
"Le code d'erreur renvoyé par B<ERR_get_error>() est constitué d'un numéro de "
"bibliothèque, d'un code de fonction et d'un code de raison. "
"B<ERR_GET_LIB>(), B<ERR_GET_FUNC>() et B<ERR_GET_REASON>() peuvent être "
"utilisés pour les extraire."

#. type: textblock
#: C/crypto/ERR_GET_LIB.pod:24
msgid ""
"The library number and function code describe where the error occurred, the "
"reason code is the information about what went wrong."
msgstr ""
"Le numéro de bibliothèque et le code de fonction décrivent où l'erreur est "
"survenue, le code de raison est l'information à propos de ce qui a mal "
"tourné."

#. type: textblock
#: C/crypto/ERR_GET_LIB.pod:27
msgid ""
"Each sub-library of OpenSSL has a unique library number; function and reason "
"codes are unique within each sub-library.  Note that different libraries may "
"use the same value to signal different functions and reasons."
msgstr ""
"Toutes les sous-bibliothèques d'OpenSSL ont un numéro de bibliothèque "
"unique ; les codes de fonction et de raison sont uniques dans chaque sous-"
"bibliothèque. Remarquez que des bibliothèques différentes peuvent utiliser "
"la même valeur pour indiquer des fonctions et raisons différentes."

#. type: textblock
#: C/crypto/ERR_GET_LIB.pod:32
msgid ""
"B<ERR_R_...> reason codes such as B<ERR_R_MALLOC_FAILURE> are globally "
"unique. However, when checking for sub-library specific reason codes, be "
"sure to also compare the library number."
msgstr ""
"Les codes de raison B<ERR_R_>I<...> comme B<ERR_R_MALLOC_FAILURE> sont "
"globalement uniques. Cependant, lors de la vérification des codes de raison "
"d'une sous-bibliothèque en particulier, assurez-vous de comparer aussi le "
"numéro de bibliothèque."

#. type: textblock
#: C/crypto/ERR_GET_LIB.pod:36
msgid "ERR_GET_LIB(), ERR_GET_FUNC() and ERR_GET_REASON() are macros."
msgstr ""
"B<ERR_GET_LIB>(), B<ERR_GET_FUNC>() et B<ERR_GET_REASON>() sont des macros."

#. type: =head1
#: C/crypto/ERR_GET_LIB.pod:38 C/crypto/ERR_clear_error.pod:17
#: C/crypto/ERR_error_string.pod:52 C/crypto/ERR_get_error.pod:61
#: C/crypto/ERR_load_crypto_strings.pod:31 C/crypto/ERR_print_errors.pod:35
#: C/crypto/ERR_put_error.pod:30 C/crypto/ERR_set_mark.pod:23
msgid "RETURN VALUES"
msgstr "VALEURS DE RETOUR"

#. type: textblock
#: C/crypto/ERR_GET_LIB.pod:40
msgid "The library number, function code and reason code respectively."
msgstr ""
"Respectivement le numéro de bibliothèque, le code de fonction et le code de "
"raison."

#. type: textblock
#: C/crypto/ERR_GET_LIB.pod:44 C/crypto/ERR_clear_error.pod:23
msgid "L<err(3)|err(3)>, L<ERR_get_error(3)|ERR_get_error(3)>"
msgstr "L<err(3)|err(3)>, L<ERR_get_error(3)|ERR_get_error(3)>"

#. type: =head1
#: C/crypto/ERR_GET_LIB.pod:46 C/crypto/ERR_clear_error.pod:25
#: C/crypto/ERR_error_string.pod:68 C/crypto/ERR_get_error.pod:70
#: C/crypto/ERR_load_crypto_strings.pod:40 C/crypto/ERR_load_strings.pod:48
#: C/crypto/ERR_print_errors.pod:46 C/crypto/ERR_put_error.pod:39
#: C/crypto/ERR_remove_state.pod:30 C/crypto/ERR_set_mark.pod:34
msgid "HISTORY"
msgstr "HISTORIQUE"

#. type: textblock
#: C/crypto/ERR_GET_LIB.pod:48
msgid ""
"ERR_GET_LIB(), ERR_GET_FUNC() and ERR_GET_REASON() are available in all "
"versions of SSLeay and OpenSSL."
msgstr ""
"B<ERR_GET_LIB>(), B<ERR_GET_FUNC>() et B<ERR_GET_REASON>() sont disponibles "
"dans toutes les versions de SSLeay et OpenSSL."

#. type: textblock
#: C/crypto/ERR_clear_error.pod:5
msgid "ERR_clear_error - clear the error queue"
msgstr "ERR_clear_error - Effacer la file des erreurs"

#. type: verbatim
#: C/crypto/ERR_clear_error.pod:11 C/crypto/err.pod:24
#, no-wrap
msgid ""
" void ERR_clear_error(void);\n"
"\n"
msgstr ""
" void ERR_clear_error(void);\n"
"\n"

#. type: textblock
#: C/crypto/ERR_clear_error.pod:15
msgid "ERR_clear_error() empties the current thread's error queue."
msgstr "ERR_clear_error() vide la file des erreurs du thread en cours."

#. type: textblock
#: C/crypto/ERR_clear_error.pod:19
msgid "ERR_clear_error() has no return value."
msgstr "ERR_clear_error() n'a pas de valeur de retour."

#. type: textblock
#: C/crypto/ERR_clear_error.pod:27
msgid "ERR_clear_error() is available in all versions of SSLeay and OpenSSL."
msgstr ""
"ERR_clear_error() est disponible dans toutes les versions de SSLeay et "
"d'OpenSSL."

#. type: textblock
#: C/crypto/ERR_error_string.pod:5
msgid ""
"ERR_error_string, ERR_error_string_n, ERR_lib_error_string, "
"ERR_func_error_string, ERR_reason_error_string - obtain human-readable error "
"message"
msgstr ""

#. type: verbatim
#: C/crypto/ERR_error_string.pod:13
#, no-wrap
msgid ""
" char *ERR_error_string(unsigned long e, char *buf);\n"
" void ERR_error_string_n(unsigned long e, char *buf, size_t len);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/ERR_error_string.pod:16
#, no-wrap
msgid ""
" const char *ERR_lib_error_string(unsigned long e);\n"
" const char *ERR_func_error_string(unsigned long e);\n"
" const char *ERR_reason_error_string(unsigned long e);\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ERR_error_string.pod:22
msgid ""
"ERR_error_string() generates a human-readable string representing the error "
"code I<e>, and places it at I<buf>. I<buf> must be at least 120 bytes long. "
"If I<buf> is B<NULL>, the error string is placed in a static buffer.  "
"ERR_error_string_n() is a variant of ERR_error_string() that writes at most "
"I<len> characters (including the terminating 0)  and truncates the string if "
"necessary.  For ERR_error_string_n(), I<buf> may not be B<NULL>."
msgstr ""

#. type: textblock
#: C/crypto/ERR_error_string.pod:31
msgid "The string will have the following format:"
msgstr ""

#. type: verbatim
#: C/crypto/ERR_error_string.pod:33
#, no-wrap
msgid ""
" error:[error code]:[library name]:[function name]:[reason string]\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/ERR_error_string.pod:35
msgid ""
"I<error code> is an 8 digit hexadecimal number, I<library name>, I<function "
"name> and I<reason string> are ASCII text."
msgstr ""

#. type: textblock
#: C/crypto/ERR_error_string.pod:38
msgid ""
"ERR_lib_error_string(), ERR_func_error_string() and "
"ERR_reason_error_string() return the library name, function name and reason "
"string respectively."
msgstr ""

#. type: textblock
#: C/crypto/ERR_error_string.pod:42
msgid ""
"The OpenSSL error strings should be loaded by calling "
"L<ERR_load_crypto_strings(3)|ERR_load_crypto_strings(3)> or, for SSL "
"applications, L<SSL_load_error_strings(3)|SSL_load_error_strings(3)> first.  "
"If there is no text string registered for the given error code, the error "
"string will contain the numeric code."
msgstr ""

#. type: textblock
#: C/crypto/ERR_error_string.pod:49
msgid ""
"L<ERR_print_errors(3)|ERR_print_errors(3)> can be used to print all error "
"codes currently in the queue."
msgstr ""

#. type: textblock
#: C/crypto/ERR_error_string.pod:54
msgid ""
"ERR_error_string() returns a pointer to a static buffer containing the "
"string if I<buf> B<== NULL>, I<buf> otherwise."
msgstr ""

#. type: textblock
#: C/crypto/ERR_error_string.pod:57
msgid ""
"ERR_lib_error_string(), ERR_func_error_string() and "
"ERR_reason_error_string() return the strings, and B<NULL> if none is "
"registered for the error code."
msgstr ""

#. type: textblock
#: C/crypto/ERR_error_string.pod:63
msgid ""
"L<err(3)|err(3)>, L<ERR_get_error(3)|ERR_get_error(3)>, "
"L<ERR_load_crypto_strings(3)|ERR_load_crypto_strings(3)>, "
"L<SSL_load_error_strings(3)|SSL_load_error_strings(3)> L<ERR_print_errors(3)|"
"ERR_print_errors(3)>"
msgstr ""
"L<err(3)|err(3)>, L<ERR_get_error(3)|ERR_get_error(3)>, "
"L<ERR_load_crypto_strings(3)|ERR_load_crypto_strings(3)>, "
"L<SSL_load_error_strings(3)|SSL_load_error_strings(3)> L<ERR_print_errors(3)|"
"ERR_print_errors(3)>"

#. type: textblock
#: C/crypto/ERR_error_string.pod:70
msgid ""
"ERR_error_string() is available in all versions of SSLeay and OpenSSL.  "
"ERR_error_string_n() was added in OpenSSL 0.9.6."
msgstr ""

#. type: textblock
#: C/crypto/ERR_get_error.pod:5
msgid ""
"ERR_get_error, ERR_peek_error, ERR_peek_last_error, ERR_get_error_line, "
"ERR_peek_error_line, ERR_peek_last_error_line, ERR_get_error_line_data, "
"ERR_peek_error_line_data, ERR_peek_last_error_line_data - obtain error code "
"and data"
msgstr ""
"ERR_get_error, ERR_peek_error, ERR_peek_last_error, ERR_get_error_line, "
"ERR_peek_error_line, ERR_peek_last_error_line, ERR_get_error_line_data, "
"ERR_peek_error_line_data, ERR_peek_last_error_line_data - Obtenir le code "
"d'erreur et les données"

#. type: verbatim
#: C/crypto/ERR_get_error.pod:14
#, no-wrap
msgid ""
" unsigned long ERR_get_error(void);\n"
" unsigned long ERR_peek_error(void);\n"
" unsigned long ERR_peek_last_error(void);\n"
"\n"
msgstr ""
" unsigned long ERR_get_error(void);\n"
" unsigned long ERR_peek_error(void);\n"
" unsigned long ERR_peek_last_error(void);\n"
"\n"

#. type: verbatim
#: C/crypto/ERR_get_error.pod:18
#, no-wrap
msgid ""
" unsigned long ERR_get_error_line(const char **file, int *line);\n"
" unsigned long ERR_peek_error_line(const char **file, int *line);\n"
" unsigned long ERR_peek_last_error_line(const char **file, int *line);\n"
"\n"
msgstr ""
" unsigned long ERR_get_error_line(const char **file, int *line);\n"
" unsigned long ERR_peek_error_line(const char **file, int *line);\n"
" unsigned long ERR_peek_last_error_line(const char **file, int *line);\n"
"\n"

#. type: verbatim
#: C/crypto/ERR_get_error.pod:22
#, no-wrap
msgid ""
" unsigned long ERR_get_error_line_data(const char **file, int *line,\n"
"         const char **data, int *flags);\n"
" unsigned long ERR_peek_error_line_data(const char **file, int *line,\n"
"         const char **data, int *flags);\n"
" unsigned long ERR_peek_last_error_line_data(const char **file, int *line,\n"
"         const char **data, int *flags);\n"
"\n"
msgstr ""
" unsigned long ERR_get_error_line_data(const char **file, int *line,\n"
"         const char **data, int *flags);\n"
" unsigned long ERR_peek_error_line_data(const char **file, int *line,\n"
"         const char **data, int *flags);\n"
" unsigned long ERR_peek_last_error_line_data(const char **file, int *line,\n"
"         const char **data, int *flags);\n"
"\n"

#. type: textblock
#: C/crypto/ERR_get_error.pod:31
msgid ""
"ERR_get_error() returns the earliest error code from the thread's error "
"queue and removes the entry. This function can be called repeatedly until "
"there are no more error codes to return."
msgstr ""
"B<ERR_get_error>() renvoie le premier code d'erreur de la file d'erreurs du "
"thread et supprime l'entrée. Cette fonction peut être appelée plusieurs fois "
"jusqu'à ce qu'il n'y ait plus de code d'erreur à renvoyer."

#. type: textblock
#: C/crypto/ERR_get_error.pod:35
msgid ""
"ERR_peek_error() returns the earliest error code from the thread's error "
"queue without modifying it."
msgstr ""
"B<ERR_peek_error>() renvoie le premier code d'erreur de la file d'erreurs du "
"thread sans la modifier."

#. type: textblock
#: C/crypto/ERR_get_error.pod:38
msgid ""
"ERR_peek_last_error() returns the latest error code from the thread's error "
"queue without modifying it."
msgstr ""
"B<ERR_peek_last_error>() renvoie le dernier code d'erreur de la file "
"d'erreurs du thread sans la modifier."

#. type: textblock
#: C/crypto/ERR_get_error.pod:41
msgid ""
"See L<ERR_GET_LIB(3)|ERR_GET_LIB(3)> for obtaining information about "
"location and reason of the error, and L<ERR_error_string(3)|"
"ERR_error_string(3)> for human-readable error messages."
msgstr ""
"Consultez L<ERR_GET_LIB(3)|ERR_GET_LIB(3)> pour obtenir des renseignements "
"sur l'emplacement et la raison de l'erreur, et L<ERR_error_string(3)|"
"ERR_error_string(3)> pour des messages d'erreur lisibles."

#. type: textblock
#: C/crypto/ERR_get_error.pod:46
msgid ""
"ERR_get_error_line(), ERR_peek_error_line() and ERR_peek_last_error_line() "
"are the same as the above, but they additionally store the file name and "
"line number where the error occurred in *B<file> and *B<line>, unless these "
"are B<NULL>."
msgstr ""
"B<ERR_get_error_line>(), B<ERR_peek_error_line>() et "
"B<ERR_peek_last_error_line>() sont similaires aux précédentes, mais stockent "
"en plus le nom de fichier et le numéro de ligne où l'erreur est survenue "
"dans *I<file> et *I<line>, à moins qu'elles ne soient B<NULL>."

#. type: textblock
#: C/crypto/ERR_get_error.pod:51
#, fuzzy
#| msgid ""
#| "ERR_get_error_line_data(), ERR_peek_error_line_data() and "
#| "ERR_get_last_error_line_data() store additional data and flags associated "
#| "with the error code in *B<data> and *B<flags>, unless these are B<NULL>. "
#| "*B<data> contains a string if *B<flags>&B<ERR_TXT_STRING>. If it has been "
#| "allocated by OPENSSL_malloc(), *B<flags>&B<ERR_TXT_MALLOCED> is true."
msgid ""
"ERR_get_error_line_data(), ERR_peek_error_line_data() and "
"ERR_get_last_error_line_data() store additional data and flags associated "
"with the error code in *B<data> and *B<flags>, unless these are B<NULL>. "
"*B<data> contains a string if *B<flags>&B<ERR_TXT_STRING> is true."
msgstr ""
"B<ERR_get_error_line_data>(), B<ERR_peek_error_line_data>() et "
"B<ERR_get_last_error_line_data>() stockent en plus des données et attributs "
"supplémentaires associés au code d'erreur dans *I<data> et *I<flags>, à "
"moins qu'elles ne soient B<NULL>. *I<data> contient une chaîne si "
"*I<flags>&B<ERR_TXT_STRING>. Si elle a été allouée par B<OPENSSL_malloc>(), "
"*I<flags>&B<ERR_TXT_MALLOCED> est vrai."

#. type: textblock
#: C/crypto/ERR_get_error.pod:57
msgid ""
"An application B<MUST NOT> free the *B<data> pointer (or any other pointers "
"returned by these functions) with OPENSSL_free() as freeing is handled "
"automatically by the error library."
msgstr ""

#. type: textblock
#: C/crypto/ERR_get_error.pod:63
msgid "The error code, or 0 if there is no error in the queue."
msgstr "Le code d'erreur, ou B<0> s'il n'y a pas d'erreur dans la file."

#. type: textblock
#: C/crypto/ERR_get_error.pod:67
msgid ""
"L<err(3)|err(3)>, L<ERR_error_string(3)|ERR_error_string(3)>, "
"L<ERR_GET_LIB(3)|ERR_GET_LIB(3)>"
msgstr ""
"L<err(3)|err(3)>, L<ERR_error_string(3)|ERR_error_string(3)>, "
"L<ERR_GET_LIB(3)|ERR_GET_LIB(3)>"

#. type: textblock
#: C/crypto/ERR_get_error.pod:72
msgid ""
"ERR_get_error(), ERR_peek_error(), ERR_get_error_line() and "
"ERR_peek_error_line() are available in all versions of SSLeay and OpenSSL. "
"ERR_get_error_line_data() and ERR_peek_error_line_data()  were added in "
"SSLeay 0.9.0.  ERR_peek_last_error(), ERR_peek_last_error_line() and "
"ERR_peek_last_error_line_data() were added in OpenSSL 0.9.7."
msgstr ""
"B<ERR_get_error>(), B<ERR_peek_error>(), B<ERR_get_error_line>() et "
"B<ERR_peek_error_line>() sont disponibles dans toutes les versions de SSLeay "
"et OpenSSL. B<ERR_get_error_line_data>() et B<ERR_peek_error_line_data>() "
"ont été ajoutées dans SSLeay 0.9.0. B<ERR_peek_last_error>(), "
"B<ERR_peek_last_error_line>() et B<ERR_peek_last_error_line_data>() ont été "
"ajoutées dans OpenSSL 0.9.7."

#. type: textblock
#: C/crypto/ERR_load_crypto_strings.pod:5
msgid ""
"ERR_load_crypto_strings, SSL_load_error_strings, ERR_free_strings - load and "
"free error strings"
msgstr ""
"ERR_load_crypto_strings, SSL_load_error_strings, ERR_free_strings - Charger "
"et libérer des chaînes d'erreur"

#. type: verbatim
#: C/crypto/ERR_load_crypto_strings.pod:12 C/crypto/err.pod:34
#, no-wrap
msgid ""
" void ERR_load_crypto_strings(void);\n"
" void ERR_free_strings(void);\n"
"\n"
msgstr ""
" void ERR_load_crypto_strings(void);\n"
" void ERR_free_strings(void);\n"
"\n"

#. type: verbatim
#: C/crypto/ERR_load_crypto_strings.pod:15
#, no-wrap
msgid ""
" #include <openssl/ssl.h>\n"
"\n"
msgstr ""
" #include <openssl/ssl.h>\n"
"\n"

#. type: verbatim
#: C/crypto/ERR_load_crypto_strings.pod:17
#, no-wrap
msgid ""
" void SSL_load_error_strings(void);\n"
"\n"
msgstr ""
" void SSL_load_error_strings(void);\n"
"\n"

#. type: textblock
#: C/crypto/ERR_load_crypto_strings.pod:21
msgid ""
"ERR_load_crypto_strings() registers the error strings for all B<libcrypto> "
"functions. SSL_load_error_strings() does the same, but also registers the "
"B<libssl> error strings."
msgstr ""
"B<ERR_load_crypto_strings>() enregistre les chaînes d'erreur pour toutes les "
"fonctions B<libcrypto>. B<SSL_load_error_strings>() fait la même chose, mais "
"enregistre aussi les chaînes d'erreur B<libssl>."

#. type: textblock
#: C/crypto/ERR_load_crypto_strings.pod:25
msgid ""
"One of these functions should be called before generating textual error "
"messages. However, this is not required when memory usage is an issue."
msgstr ""
"Une de ces fonctions devrait être appelée avant la génération de messages "
"d'erreur en texte. Cependant, ce n'est pas nécessaire si l'utilisation de "
"mémoire pose un problème."

#. type: textblock
#: C/crypto/ERR_load_crypto_strings.pod:29
msgid "ERR_free_strings() frees all previously loaded error strings."
msgstr ""
"B<ERR_free_strings>() libère toutes les chaînes d'erreur précédemment "
"chargées."

#. type: textblock
#: C/crypto/ERR_load_crypto_strings.pod:33
msgid ""
"ERR_load_crypto_strings(), SSL_load_error_strings() and ERR_free_strings() "
"return no values."
msgstr ""
"B<ERR_load_crypto_strings>(), B<SSL_load_error_strings>() et "
"B<ERR_free_strings>() ne renvoient aucune valeur."

#. type: textblock
#: C/crypto/ERR_load_crypto_strings.pod:38
msgid "L<err(3)|err(3)>, L<ERR_error_string(3)|ERR_error_string(3)>"
msgstr "L<err(3)|err(3)>, L<ERR_error_string(3)|ERR_error_string(3)>"

#. type: textblock
#: C/crypto/ERR_load_crypto_strings.pod:42
msgid ""
"ERR_load_error_strings(), SSL_load_error_strings() and ERR_free_strings() "
"are available in all versions of SSLeay and OpenSSL."
msgstr ""
"B<ERR_load_crypto_strings>(), B<SSL_load_error_strings>() et "
"B<ERR_free_strings>() sont disponibles dans toutes les versions de SSLeay et "
"OpenSSL."

#. type: textblock
#: C/crypto/ERR_load_strings.pod:5
msgid ""
"ERR_load_strings, ERR_PACK, ERR_get_next_error_library - load arbitrary "
"error strings"
msgstr ""
"ERR_load_strings, ERR_PACK, ERR_get_next_error_library - Charger des chaînes "
"d'erreur arbitraire"

#. type: verbatim
#: C/crypto/ERR_load_strings.pod:12
#, no-wrap
msgid ""
" void ERR_load_strings(int lib, ERR_STRING_DATA str[]);\n"
"\n"
msgstr ""
" void ERR_load_strings(int lib, ERR_STRING_DATA str[]);\n"
"\n"

#. type: verbatim
#: C/crypto/ERR_load_strings.pod:14
#, no-wrap
msgid ""
" int ERR_get_next_error_library(void);\n"
"\n"
msgstr ""
" int ERR_get_next_error_library(void);\n"
"\n"

#. type: verbatim
#: C/crypto/ERR_load_strings.pod:16
#, no-wrap
msgid ""
" unsigned long ERR_PACK(int lib, int func, int reason);\n"
"\n"
msgstr ""
" unsigned long ERR_PACK(int lib, int func, int reason);\n"
"\n"

#. type: textblock
#: C/crypto/ERR_load_strings.pod:20
msgid "ERR_load_strings() registers error strings for library number B<lib>."
msgstr ""
"B<ERR_load_strings>() enregistre des chaînes d'erreur pour le numéro de "
"bibliothèque I<lib>."

#. type: textblock
#: C/crypto/ERR_load_strings.pod:22
msgid "B<str> is an array of error string data:"
msgstr "I<str> est un tableau de données de chaînes d'erreur :"

#. type: verbatim
#: C/crypto/ERR_load_strings.pod:24
#, no-wrap
msgid ""
" typedef struct ERR_string_data_st\n"
" {\n"
"        unsigned long error;\n"
"        char *string;\n"
" } ERR_STRING_DATA;\n"
"\n"
msgstr ""
" typedef struct ERR_string_data_st\n"
" {\n"
"        unsigned long error;\n"
"        char *string;\n"
" } ERR_STRING_DATA;\n"
"\n"

#. type: textblock
#: C/crypto/ERR_load_strings.pod:30
msgid ""
"The error code is generated from the library number and a function and "
"reason code: B<error> = ERR_PACK(B<lib>, B<func>, B<reason>).  ERR_PACK() is "
"a macro."
msgstr ""
"Le code d'erreur est généré à partir du numéro de bibliothèque, et d'un code "
"de fonction et de raison : B<error> = ERR_PACK(I<lib>, I<func>, I<reason>). "
"B<ERR_PACK>() est une macro."

#. type: textblock
#: C/crypto/ERR_load_strings.pod:34
msgid "The last entry in the array is {0,0}."
msgstr "La dernière entrée dans le tableau est {0,0}."

#. type: textblock
#: C/crypto/ERR_load_strings.pod:36
msgid ""
"ERR_get_next_error_library() can be used to assign library numbers to user "
"libraries at runtime."
msgstr ""
"B<ERR_get_next_error_library>() peut être utilisée pour assigner des numéros "
"de bibliothèque aux bibliothèques de l'utilisateur au moment de l'exécution."

#. type: =head1
#: C/crypto/ERR_load_strings.pod:39 C/crypto/ERR_remove_state.pod:22
msgid "RETURN VALUE"
msgstr "VALEUR DE RETOUR"

#. type: textblock
#: C/crypto/ERR_load_strings.pod:41
msgid ""
"ERR_load_strings() returns no value. ERR_PACK() return the error code.  "
"ERR_get_next_error_library() returns a new library number."
msgstr ""
"B<ERR_load_strings>() ne renvoie pas de valeur. B<ERR_PACK>() renvoie le "
"code d'erreur. B<ERR_get_next_error_library>() renvoie un nouveau numéro de "
"bibliothèque."

#. type: textblock
#: C/crypto/ERR_load_strings.pod:46 C/crypto/ERR_put_error.pod:37
msgid "L<err(3)|err(3)>, L<ERR_load_strings(3)|ERR_load_strings(3)>"
msgstr "L<err(3)|err(3)>, L<ERR_load_strings(3)|ERR_load_strings(3)>"

#. type: textblock
#: C/crypto/ERR_load_strings.pod:50
msgid ""
"ERR_load_error_strings() and ERR_PACK() are available in all versions of "
"SSLeay and OpenSSL. ERR_get_next_error_library() was added in SSLeay 0.9.0."
msgstr ""
"B<ERR_load_error_strings>() et B<ERR_PACK>() sont disponibles dans toutes "
"les versions de SSLeay et OpenSSL. B<ERR_get_next_error_library>() a été "
"ajoutée dans SSLeay 0.9.0."

#. type: textblock
#: C/crypto/ERR_print_errors.pod:5
msgid "ERR_print_errors, ERR_print_errors_fp - print error messages"
msgstr "ERR_print_errors, ERR_print_errors_fp - Afficher des messages d'erreur"

#. type: verbatim
#: C/crypto/ERR_print_errors.pod:11 C/crypto/err.pod:31
#, no-wrap
msgid ""
" void ERR_print_errors(BIO *bp);\n"
" void ERR_print_errors_fp(FILE *fp);\n"
"\n"
msgstr ""
" void ERR_print_errors(BIO *bp);\n"
" void ERR_print_errors_fp(FILE *fp);\n"
"\n"

#. type: textblock
#: C/crypto/ERR_print_errors.pod:16
msgid ""
"ERR_print_errors() is a convenience function that prints the error strings "
"for all errors that OpenSSL has recorded to B<bp>, thus emptying the error "
"queue."
msgstr ""
"B<ERR_print_errors>() est une fonction pratique qui affiche les chaînes "
"d'erreur pour toutes les erreurs qu'OpenSSL a enregistrées vers I<bp>, "
"vidant ainsi la file d'erreurs."

#. type: textblock
#: C/crypto/ERR_print_errors.pod:20
msgid ""
"ERR_print_errors_fp() is the same, except that the output goes to a B<FILE>."
msgstr ""
"B<ERR_print_errors_fp>() fait la même chose, si ce n'est que la sortie va "
"dans un B<FILE>."

#. type: textblock
#: C/crypto/ERR_print_errors.pod:24
msgid "The error strings will have the following format:"
msgstr "Les chaînes d'erreur seront sous le format suivant :"

#. type: verbatim
#: C/crypto/ERR_print_errors.pod:26
#, no-wrap
msgid ""
" [pid]:error:[error code]:[library name]:[function name]:[reason string]:[file name]:[line]:[optional text message]\n"
"\n"
msgstr ""
" [pid]:error:[code d'erreur]:[nom de bibliothèque]:[nom de fonction]:[chaîne de raison]:[nom de fichier]:[ligne]:[message en texte facultatif]\n"
"\n"

#. type: textblock
#: C/crypto/ERR_print_errors.pod:28
msgid ""
"I<error code> is an 8 digit hexadecimal number. I<library name>, I<function "
"name> and I<reason string> are ASCII text, as is I<optional text message> if "
"one was set for the respective error code."
msgstr ""
"Le I<code d'erreur> est un nombre hexadécimal de 8 chiffres. Les I<nom de "
"bibliothèque>, I<nom de fonction> et I<chaîne de raison> sont en texte "
"ASCII, de même que le I<message en texte facultatif> s'il a été défini."

#. type: textblock
#: C/crypto/ERR_print_errors.pod:32
msgid ""
"If there is no text string registered for the given error code, the error "
"string will contain the numeric code."
msgstr ""
"En absence de chaîne de texte enregistrée pour le code d'erreur donné, la "
"chaîne d'erreur contiendra le code numérique."

#. type: textblock
#: C/crypto/ERR_print_errors.pod:37
msgid "ERR_print_errors() and ERR_print_errors_fp() return no values."
msgstr ""
"B<ERR_print_errors>() et B<ERR_print_errors_fp>() ne renvoient aucune valeur."

#. type: textblock
#: C/crypto/ERR_print_errors.pod:41
msgid ""
"L<err(3)|err(3)>, L<ERR_error_string(3)|ERR_error_string(3)>, "
"L<ERR_get_error(3)|ERR_get_error(3)>, L<ERR_load_crypto_strings(3)|"
"ERR_load_crypto_strings(3)>, L<SSL_load_error_strings(3)|"
"SSL_load_error_strings(3)>"
msgstr ""
"L<err(3)|err(3)>, L<ERR_error_string(3)|ERR_error_string(3)>, "
"L<ERR_get_error(3)|ERR_get_error(3)>, L<ERR_load_crypto_strings(3)|"
"ERR_load_crypto_strings(3)>, L<SSL_load_error_strings(3)|"
"SSL_load_error_strings(3)>"

#. type: textblock
#: C/crypto/ERR_print_errors.pod:48
msgid ""
"ERR_print_errors() and ERR_print_errors_fp()  are available in all versions "
"of SSLeay and OpenSSL."
msgstr ""
"B<ERR_print_errors>() et B<ERR_print_errors_fp>() sont disponibles dans "
"toutes les versions de SSLeay et OpenSSL."

#. type: textblock
#: C/crypto/ERR_put_error.pod:5
msgid "ERR_put_error, ERR_add_error_data - record an error"
msgstr "ERR_put_error, ERR_add_error_data - Enregistrer une erreur"

#. type: verbatim
#: C/crypto/ERR_put_error.pod:11
#, no-wrap
msgid ""
" void ERR_put_error(int lib, int func, int reason, const char *file,\n"
"         int line);\n"
"\n"
msgstr ""
" void ERR_put_error(int lib, int func, int reason, const char *file,\n"
"         int line);\n"
"\n"

#. type: verbatim
#: C/crypto/ERR_put_error.pod:14
#, no-wrap
msgid ""
" void ERR_add_error_data(int num, ...);\n"
"\n"
msgstr ""
" void ERR_add_error_data(int num, ...);\n"
"\n"

#. type: textblock
#: C/crypto/ERR_put_error.pod:18
msgid ""
"ERR_put_error() adds an error code to the thread's error queue. It signals "
"that the error of reason code B<reason> occurred in function B<func> of "
"library B<lib>, in line number B<line> of B<file>.  This function is usually "
"called by a macro."
msgstr ""
"B<ERR_put_error>() ajoute un code d'erreur à la file d'erreur de thread. "
"Elle signale que l'erreur de code de raison I<reason> est arrivée dans la "
"fonction I<func> de la bibliothèque I<lib>, à la ligne numéro I<line> du "
"fichier I<file>. Cette fonction est normalement appelée par une macro."

#. type: textblock
#: C/crypto/ERR_put_error.pod:23
msgid ""
"ERR_add_error_data() associates the concatenation of its B<num> string "
"arguments with the error code added last."
msgstr ""
"B<ERR_add_error_data>() associe la concaténation de ses I<num> arguments de "
"chaîne avec le code d'erreur ajouté en dernier."

#. type: textblock
#: C/crypto/ERR_put_error.pod:26
msgid ""
"L<ERR_load_strings(3)|ERR_load_strings(3)> can be used to register error "
"strings so that the application can a generate human-readable error messages "
"for the error code."
msgstr ""
"L<ERR_load_strings(3)|ERR_load_strings(3)> peut être utilisée pour "
"enregistrer des chaînes d'erreur de telle sorte que l'application puisse "
"générer des messages d'erreur lisibles pour le code d'erreur."

#. type: textblock
#: C/crypto/ERR_put_error.pod:32
msgid "ERR_put_error() and ERR_add_error_data() return no values."
msgstr ""
"B<ERR_put_error>() et B<ERR_add_error_data>() ne renvoient aucune valeur."

#. type: textblock
#: C/crypto/ERR_put_error.pod:41
msgid ""
"ERR_put_error() is available in all versions of SSLeay and OpenSSL.  "
"ERR_add_error_data() was added in SSLeay 0.9.0."
msgstr ""
"B<ERR_put_error>() est disponible dans toutes les versions de SSLeay et "
"OpenSSL. B<ERR_add_error_data>() a été ajoutée dans SSLeay 0.9.0."

#. type: textblock
#: C/crypto/ERR_remove_state.pod:5
msgid "ERR_remove_state - free a thread's error queue"
msgstr "ERR_remove_state - Libérer une file d'erreur de thread"

#. type: verbatim
#: C/crypto/ERR_remove_state.pod:11 C/crypto/err.pod:37
#, no-wrap
msgid ""
" void ERR_remove_state(unsigned long pid);\n"
"\n"
msgstr ""
" void ERR_remove_state(unsigned long pid);\n"
"\n"

#. type: textblock
#: C/crypto/ERR_remove_state.pod:15
msgid ""
"ERR_remove_state() frees the error queue associated with thread B<pid>.  If "
"B<pid> == 0, the current thread will have its error queue removed."
msgstr ""
"B<ERR_remove_state>() libère la file d'erreur associée au thread I<pid>. Si "
"I<pid> == 0, la file du thread en cours sera supprimée."

#. type: textblock
#: C/crypto/ERR_remove_state.pod:18
msgid ""
"Since error queue data structures are allocated automatically for new "
"threads, they must be freed when threads are terminated in order to avoid "
"memory leaks."
msgstr ""
"Puisque les structures de données de file d'erreur sont allouées "
"automatiquement pour les nouveaux threads, elles doivent être libérées quand "
"les threads sont terminés afin d'éviter les fuites de mémoire."

#. type: textblock
#: C/crypto/ERR_remove_state.pod:24
msgid "ERR_remove_state() returns no value."
msgstr "B<ERR_remove_state>() ne renvoie pas de valeur."

#. type: textblock
#: C/crypto/ERR_remove_state.pod:28 C/crypto/ERR_set_mark.pod:32
msgid "L<err(3)|err(3)>"
msgstr "L<err(3)|err(3)>"

#. type: textblock
#: C/crypto/ERR_remove_state.pod:32
msgid "ERR_remove_state() is available in all versions of SSLeay and OpenSSL."
msgstr ""
"B<ERR_remove_state>() est disponible dans toutes les versions de SSLeay et "
"OpenSSL."

#. type: textblock
#: C/crypto/ERR_set_mark.pod:5
msgid "ERR_set_mark, ERR_pop_to_mark - set marks and pop errors until mark"
msgstr ""
"ERR_set_mark, ERR_pop_to_mark - Définir des marques et sortir des erreurs "
"jusqu'à la marque"

#. type: verbatim
#: C/crypto/ERR_set_mark.pod:11
#, no-wrap
msgid ""
" int ERR_set_mark(void);\n"
"\n"
msgstr ""
" int ERR_set_mark(void);\n"
"\n"

#. type: verbatim
#: C/crypto/ERR_set_mark.pod:13
#, no-wrap
msgid ""
" int ERR_pop_to_mark(void);\n"
"\n"
msgstr ""
" int ERR_pop_to_mark(void);\n"
"\n"

#. type: textblock
#: C/crypto/ERR_set_mark.pod:17
msgid ""
"ERR_set_mark() sets a mark on the current topmost error record if there is "
"one."
msgstr ""
"B<ERR_set_mark>() définit une marque sur l'enregistrement de la dernière "
"erreur actuelle s'il y en a une."

#. type: textblock
#: C/crypto/ERR_set_mark.pod:20
msgid ""
"ERR_pop_to_mark() will pop the top of the error stack until a mark is "
"found.  The mark is then removed.  If there is no mark, the whole stack is "
"removed."
msgstr ""
"B<ERR_pop_to_mark>() sortira le haut de la pile d'erreurs jusqu'à trouver la "
"marque. La marque est alors supprimée. En absence de marque, toute la pile "
"est supprimée."

#. type: textblock
#: C/crypto/ERR_set_mark.pod:25
msgid "ERR_set_mark() returns 0 if the error stack is empty, otherwise 1."
msgstr ""
"B<ERR_set_mark>() renvoie B<0> si la pile d'erreurs est vide, B<1> sinon."

#. type: textblock
#: C/crypto/ERR_set_mark.pod:27
msgid ""
"ERR_pop_to_mark() returns 0 if there was no mark in the error stack, which "
"implies that the stack became empty, otherwise 1."
msgstr ""
"B<ERR_pop_to_mark>() renvoie B<0> s'il n'y avait pas de marque dans la pile "
"d'erreurs, avec pour conséquence que la pile a été vidée, B<1> sinon."

#. type: textblock
#: C/crypto/ERR_set_mark.pod:36
msgid "ERR_set_mark() and ERR_pop_to_mark() were added in OpenSSL 0.9.8."
msgstr ""
"B<ERR_set_mark>() et B<ERR_pop_to_mark>() ont été ajoutées dans "
"OpenSSL 0.9.8."

#. type: textblock
#: C/crypto/err.pod:5
msgid "err - error codes"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:11
#, no-wrap
msgid ""
" unsigned long ERR_get_error(void);\n"
" unsigned long ERR_peek_error(void);\n"
" unsigned long ERR_get_error_line(const char **file, int *line);\n"
" unsigned long ERR_peek_error_line(const char **file, int *line);\n"
" unsigned long ERR_get_error_line_data(const char **file, int *line,\n"
"         const char **data, int *flags);\n"
" unsigned long ERR_peek_error_line_data(const char **file, int *line,\n"
"         const char **data, int *flags);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:20
#, no-wrap
msgid ""
" int ERR_GET_LIB(unsigned long e);\n"
" int ERR_GET_FUNC(unsigned long e);\n"
" int ERR_GET_REASON(unsigned long e);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:26
#, no-wrap
msgid ""
" char *ERR_error_string(unsigned long e, char *buf);\n"
" const char *ERR_lib_error_string(unsigned long e);\n"
" const char *ERR_func_error_string(unsigned long e);\n"
" const char *ERR_reason_error_string(unsigned long e);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:39
#, no-wrap
msgid ""
" void ERR_put_error(int lib, int func, int reason, const char *file,\n"
"         int line);\n"
" void ERR_add_error_data(int num, ...);\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:43
#, no-wrap
msgid ""
" void ERR_load_strings(int lib,ERR_STRING_DATA str[]);\n"
" unsigned long ERR_PACK(int lib, int func, int reason);\n"
" int ERR_get_next_error_library(void);\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/err.pod:49
msgid ""
"When a call to the OpenSSL library fails, this is usually signalled by the "
"return value, and an error code is stored in an error queue associated with "
"the current thread. The B<err> library provides functions to obtain these "
"error codes and textual error messages."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:54
msgid ""
"The L<ERR_get_error(3)|ERR_get_error(3)> manpage describes how to access "
"error codes."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:57
msgid ""
"Error codes contain information about where the error occurred, and what "
"went wrong. L<ERR_GET_LIB(3)|ERR_GET_LIB(3)> describes how to extract this "
"information. A method to obtain human-readable error messages is described "
"in L<ERR_error_string(3)|ERR_error_string(3)>."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:62
msgid ""
"L<ERR_clear_error(3)|ERR_clear_error(3)> can be used to clear the error "
"queue."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:65
msgid ""
"Note that L<ERR_remove_state(3)|ERR_remove_state(3)> should be used to avoid "
"memory leaks when threads are terminated."
msgstr ""

#. type: =head1
#: C/crypto/err.pod:68
msgid "ADDING NEW ERROR CODES TO OPENSSL"
msgstr ""

#. type: textblock
#: C/crypto/err.pod:70
msgid ""
"See L<ERR_put_error(3)> if you want to record error codes in the OpenSSL "
"error system from within your application."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:73
msgid ""
"The remainder of this section is of interest only if you want to add new "
"error codes to OpenSSL or add error codes from external libraries."
msgstr ""

#. type: =head2
#: C/crypto/err.pod:76
msgid "Reporting errors"
msgstr ""

#. type: textblock
#: C/crypto/err.pod:78
msgid ""
"Each sub-library has a specific macro XXXerr() that is used to report "
"errors. Its first argument is a function code B<XXX_F_...>, the second "
"argument is a reason code B<XXX_R_...>. Function codes are derived from the "
"function names; reason codes consist of textual error descriptions. For "
"example, the function ssl23_read() reports a \"handshake failure\" as "
"follows:"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:85
#, no-wrap
msgid ""
" SSLerr(SSL_F_SSL23_READ, SSL_R_SSL_HANDSHAKE_FAILURE);\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/err.pod:87
msgid ""
"Function and reason codes should consist of upper case characters, numbers "
"and underscores only. The error file generation script translates function "
"codes into function names by looking in the header files for an appropriate "
"function name, if none is found it just uses the capitalized form such as "
"\"SSL23_READ\" in the above example."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:93
msgid ""
"The trailing section of a reason code (after the \"_R_\") is translated into "
"lower case and underscores changed to spaces."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:96
msgid ""
"When you are using new function or reason codes, run B<make errors>.  The "
"necessary B<#define>s will then automatically be added to the sub-library's "
"header file."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:100
msgid ""
"Although a library will normally report errors using its own specific XXXerr "
"macro, another library's macro can be used. This is normally only done when "
"a library wants to include ASN1 code which must use the ASN1err() macro."
msgstr ""

#. type: =head2
#: C/crypto/err.pod:105
msgid "Adding new libraries"
msgstr ""

#. type: textblock
#: C/crypto/err.pod:107
msgid ""
"When adding a new sub-library to OpenSSL, assign it a library number "
"B<ERR_LIB_XXX>, define a macro XXXerr() (both in B<err.h>), add its name to "
"B<ERR_str_libraries[]> (in B<crypto/err/err.c>), and add "
"C<ERR_load_XXX_strings()> to the ERR_load_crypto_strings() function (in "
"B<crypto/err/err_all.c>). Finally, add an entry"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:113
#, no-wrap
msgid ""
" L\tXXX\txxx.h\txxx_err.c\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/err.pod:115
msgid ""
"to B<crypto/err/openssl.ec>, and add B<xxx_err.c> to the Makefile.  Running "
"B<make errors> will then generate a file B<xxx_err.c>, and add all error "
"codes used in the library to B<xxx.h>."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:119
msgid ""
"Additionally the library include file must have a certain form.  Typically "
"it will initially look like this:"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:122
#, no-wrap
msgid ""
" #ifndef HEADER_XXX_H\n"
" #define HEADER_XXX_H\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:125
#, no-wrap
msgid ""
" #ifdef __cplusplus\n"
" extern \"C\" {\n"
" #endif\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:129
#, no-wrap
msgid ""
" /* Include files */\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:131
#, no-wrap
msgid ""
" #include <openssl/bio.h>\n"
" #include <openssl/x509.h>\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:134
#, no-wrap
msgid ""
" /* Macros, structures and function prototypes */\n"
"\n"
msgstr ""

#. type: verbatim
#: C/crypto/err.pod:137
#, no-wrap
msgid ""
" /* BEGIN ERROR CODES */\n"
"\n"
msgstr ""

#. type: textblock
#: C/crypto/err.pod:139
msgid ""
"The B<BEGIN ERROR CODES> sequence is used by the error code generation "
"script as the point to place new error codes, any text after this point will "
"be overwritten when B<make errors> is run.  The closing #endif etc will be "
"automatically added by the script."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:144
msgid ""
"The generated C error code file B<xxx_err.c> will load the header files "
"B<stdio.h>, B<openssl/err.h> and B<openssl/xxx.h> so the header file must "
"load any additional header files containing any definitions it uses."
msgstr ""

#. type: =head1
#: C/crypto/err.pod:149
msgid "USING ERROR CODES IN EXTERNAL LIBRARIES"
msgstr ""

#. type: textblock
#: C/crypto/err.pod:151
msgid ""
"It is also possible to use OpenSSL's error code scheme in external "
"libraries. The library needs to load its own codes and call the OpenSSL "
"error code insertion script B<mkerr.pl> explicitly to add codes to the "
"header file and generate the C error code file. This will normally be done "
"if the external library needs to generate new ASN1 structures but it can "
"also be used to add more general purpose error code handling."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:158
msgid "TBA more details"
msgstr ""

#. type: =head1
#: C/crypto/err.pod:160
msgid "INTERNALS"
msgstr ""

#. type: textblock
#: C/crypto/err.pod:162
msgid ""
"The error queues are stored in a hash table with one B<ERR_STATE> entry for "
"each pid. ERR_get_state() returns the current thread's B<ERR_STATE>. An "
"B<ERR_STATE> can hold up to B<ERR_NUM_ERRORS> error codes. When more error "
"codes are added, the old ones are overwritten, on the assumption that the "
"most recent errors are most important."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:168
msgid ""
"Error strings are also stored in hash table. The hash tables can be obtained "
"by calling ERR_get_err_state_table(void) and ERR_get_string_table(void) "
"respectively."
msgstr ""

#. type: textblock
#: C/crypto/err.pod:174
msgid ""
"L<CRYPTO_set_id_callback(3)|CRYPTO_set_id_callback(3)>, "
"L<CRYPTO_set_locking_callback(3)|CRYPTO_set_locking_callback(3)>, "
"L<ERR_get_error(3)|ERR_get_error(3)>, L<ERR_GET_LIB(3)|ERR_GET_LIB(3)>, "
"L<ERR_clear_error(3)|ERR_clear_error(3)>, L<ERR_error_string(3)|"
"ERR_error_string(3)>, L<ERR_print_errors(3)|ERR_print_errors(3)>, "
"L<ERR_load_crypto_strings(3)|ERR_load_crypto_strings(3)>, "
"L<ERR_remove_state(3)|ERR_remove_state(3)>, L<ERR_put_error(3)|"
"ERR_put_error(3)>, L<ERR_load_strings(3)|ERR_load_strings(3)>, "
"L<SSL_get_error(3)|SSL_get_error(3)>"
msgstr ""
"L<CRYPTO_set_id_callback(3)|CRYPTO_set_id_callback(3)>, "
"L<CRYPTO_set_locking_callback(3)|CRYPTO_set_locking_callback(3)>, "
"L<ERR_get_error(3)|ERR_get_error(3)>, L<ERR_GET_LIB(3)|ERR_GET_LIB(3)>, "
"L<ERR_clear_error(3)|ERR_clear_error(3)>, L<ERR_error_string(3)|"
"ERR_error_string(3)>, L<ERR_print_errors(3)|ERR_print_errors(3)>, "
"L<ERR_load_crypto_strings(3)|ERR_load_crypto_strings(3)>, "
"L<ERR_remove_state(3)|ERR_remove_state(3)>, L<ERR_put_error(3)|"
"ERR_put_error(3)>, L<ERR_load_strings(3)|ERR_load_strings(3)>, "
"L<SSL_get_error(3)|SSL_get_error(3)>"
