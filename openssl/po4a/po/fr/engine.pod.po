# French translations for PACKAGE package
# Copyright (C) 2008 Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2008-03-31 00:01+0200\n"
"PO-Revision-Date: 2008-03-31 00:01+0200\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

# type: =head1
#: C/apps/CA.pl.pod:4 C/apps/asn1parse.pod:3 C/apps/ca.pod:4
#: C/apps/ciphers.pod:3 C/apps/config.pod:6 C/apps/crl.pod:3
#: C/apps/crl2pkcs7.pod:3 C/apps/dgst.pod:3 C/apps/dhparam.pod:3
#: C/apps/dsa.pod:3 C/apps/dsaparam.pod:3 C/apps/ec.pod:3 C/apps/ecparam.pod:3
#: C/apps/enc.pod:3 C/apps/errstr.pod:3 C/apps/gendsa.pod:3
#: C/apps/genrsa.pod:3 C/apps/nseq.pod:3 C/apps/ocsp.pod:3
#: C/apps/openssl.pod:4 C/apps/passwd.pod:3 C/apps/pkcs12.pod:4
#: C/apps/pkcs7.pod:3 C/apps/pkcs8.pod:3 C/apps/rand.pod:3 C/apps/req.pod:4
#: C/apps/rsa.pod:4 C/apps/rsautl.pod:3 C/apps/s_client.pod:4
#: C/apps/s_server.pod:4 C/apps/s_time.pod:4 C/apps/sess_id.pod:4
#: C/apps/smime.pod:3 C/apps/speed.pod:3 C/apps/spkac.pod:3
#: C/apps/verify.pod:3 C/apps/version.pod:3 C/apps/x509.pod:4
#: C/apps/x509v3_config.pod:5 C/apps/c_rehash.pod:4
#: C/crypto/ASN1_OBJECT_new.pod:3 C/crypto/ASN1_STRING_length.pod:3
#: C/crypto/ASN1_STRING_new.pod:3 C/crypto/ASN1_STRING_print_ex.pod:3
#: C/crypto/ASN1_generate_nconf.pod:3 C/crypto/BIO_ctrl.pod:3
#: C/crypto/BIO_f_base64.pod:3 C/crypto/BIO_f_buffer.pod:3
#: C/crypto/BIO_f_cipher.pod:3 C/crypto/BIO_f_md.pod:3
#: C/crypto/BIO_f_null.pod:3 C/crypto/BIO_f_ssl.pod:3
#: C/crypto/BIO_find_type.pod:3 C/crypto/BIO_new.pod:3 C/crypto/BIO_push.pod:3
#: C/crypto/BIO_read.pod:3 C/crypto/BIO_s_accept.pod:3
#: C/crypto/BIO_s_bio.pod:3 C/crypto/BIO_s_connect.pod:3
#: C/crypto/BIO_s_fd.pod:3 C/crypto/BIO_s_file.pod:3 C/crypto/BIO_s_mem.pod:3
#: C/crypto/BIO_s_null.pod:3 C/crypto/BIO_s_socket.pod:3
#: C/crypto/BIO_set_callback.pod:3 C/crypto/BIO_should_retry.pod:3
#: C/crypto/BN_BLINDING_new.pod:3 C/crypto/BN_CTX_new.pod:3
#: C/crypto/BN_CTX_start.pod:3 C/crypto/BN_add.pod:3
#: C/crypto/BN_add_word.pod:3 C/crypto/BN_bn2bin.pod:3 C/crypto/BN_cmp.pod:3
#: C/crypto/BN_copy.pod:3 C/crypto/BN_generate_prime.pod:3
#: C/crypto/BN_mod_inverse.pod:3 C/crypto/BN_mod_mul_montgomery.pod:3
#: C/crypto/BN_mod_mul_reciprocal.pod:3 C/crypto/BN_new.pod:3
#: C/crypto/BN_num_bytes.pod:3 C/crypto/BN_rand.pod:3
#: C/crypto/BN_set_bit.pod:3 C/crypto/BN_swap.pod:3 C/crypto/BN_zero.pod:3
#: C/crypto/CONF_modules_free.pod:3 C/crypto/CONF_modules_load_file.pod:3
#: C/crypto/CRYPTO_set_ex_data.pod:3 C/crypto/DH_generate_key.pod:3
#: C/crypto/DH_generate_parameters.pod:3 C/crypto/DH_get_ex_new_index.pod:3
#: C/crypto/DH_new.pod:3 C/crypto/DH_set_method.pod:3 C/crypto/DH_size.pod:3
#: C/crypto/DSA_SIG_new.pod:3 C/crypto/DSA_do_sign.pod:3
#: C/crypto/DSA_dup_DH.pod:3 C/crypto/DSA_generate_key.pod:3
#: C/crypto/DSA_generate_parameters.pod:3 C/crypto/DSA_get_ex_new_index.pod:3
#: C/crypto/DSA_new.pod:3 C/crypto/DSA_set_method.pod:3
#: C/crypto/DSA_sign.pod:3 C/crypto/DSA_size.pod:3 C/crypto/ERR_GET_LIB.pod:3
#: C/crypto/ERR_clear_error.pod:3 C/crypto/ERR_error_string.pod:3
#: C/crypto/ERR_get_error.pod:3 C/crypto/ERR_load_crypto_strings.pod:3
#: C/crypto/ERR_load_strings.pod:3 C/crypto/ERR_print_errors.pod:3
#: C/crypto/ERR_put_error.pod:3 C/crypto/ERR_remove_state.pod:3
#: C/crypto/ERR_set_mark.pod:3 C/crypto/EVP_BytesToKey.pod:3
#: C/crypto/EVP_DigestInit.pod:3 C/crypto/EVP_EncryptInit.pod:3
#: C/crypto/EVP_OpenInit.pod:3 C/crypto/EVP_PKEY_new.pod:3
#: C/crypto/EVP_PKEY_set1_RSA.pod:3 C/crypto/EVP_SealInit.pod:3
#: C/crypto/EVP_SignInit.pod:3 C/crypto/EVP_VerifyInit.pod:3
#: C/crypto/OBJ_nid2obj.pod:3 C/crypto/OPENSSL_Applink.pod:3
#: C/crypto/OPENSSL_VERSION_NUMBER.pod:3 C/crypto/OPENSSL_config.pod:3
#: C/crypto/OPENSSL_ia32cap.pod:3 C/crypto/OPENSSL_load_builtin_modules.pod:3
#: C/crypto/OpenSSL_add_all_algorithms.pod:3 C/crypto/PKCS12_create.pod:3
#: C/crypto/PKCS12_parse.pod:3 C/crypto/PKCS7_decrypt.pod:3
#: C/crypto/PKCS7_encrypt.pod:3 C/crypto/PKCS7_sign.pod:3
#: C/crypto/PKCS7_verify.pod:3 C/crypto/RAND_add.pod:3
#: C/crypto/RAND_bytes.pod:3 C/crypto/RAND_cleanup.pod:3
#: C/crypto/RAND_egd.pod:3 C/crypto/RAND_load_file.pod:3
#: C/crypto/RAND_set_rand_method.pod:3 C/crypto/RSA_blinding_on.pod:3
#: C/crypto/RSA_check_key.pod:3 C/crypto/RSA_generate_key.pod:3
#: C/crypto/RSA_get_ex_new_index.pod:3 C/crypto/RSA_new.pod:3
#: C/crypto/RSA_padding_add_PKCS1_type_1.pod:3 C/crypto/RSA_print.pod:3
#: C/crypto/RSA_private_encrypt.pod:3 C/crypto/RSA_public_encrypt.pod:3
#: C/crypto/RSA_set_method.pod:3 C/crypto/RSA_sign.pod:3
#: C/crypto/RSA_sign_ASN1_OCTET_STRING.pod:3 C/crypto/RSA_size.pod:3
#: C/crypto/SMIME_read_PKCS7.pod:3 C/crypto/SMIME_write_PKCS7.pod:3
#: C/crypto/X509_NAME_ENTRY_get_object.pod:3
#: C/crypto/X509_NAME_add_entry_by_txt.pod:3
#: C/crypto/X509_NAME_get_index_by_NID.pod:3 C/crypto/X509_NAME_print_ex.pod:3
#: C/crypto/X509_new.pod:3 C/crypto/bio.pod:3 C/crypto/blowfish.pod:3
#: C/crypto/bn.pod:3 C/crypto/bn_internal.pod:3 C/crypto/buffer.pod:3
#: C/crypto/crypto.pod:3 C/crypto/d2i_ASN1_OBJECT.pod:3
#: C/crypto/d2i_DHparams.pod:3 C/crypto/d2i_DSAPublicKey.pod:3
#: C/crypto/d2i_PKCS8PrivateKey.pod:3 C/crypto/d2i_RSAPublicKey.pod:3
#: C/crypto/d2i_X509.pod:3 C/crypto/d2i_X509_ALGOR.pod:3
#: C/crypto/d2i_X509_CRL.pod:3 C/crypto/d2i_X509_NAME.pod:3
#: C/crypto/d2i_X509_REQ.pod:3 C/crypto/d2i_X509_SIG.pod:3 C/crypto/des.pod:3
#: C/crypto/des_modes.pod:5 C/crypto/dh.pod:3 C/crypto/dsa.pod:3
#: C/crypto/ecdsa.pod:3 C/crypto/engine.pod:3 C/crypto/err.pod:3
#: C/crypto/evp.pod:3 C/crypto/hmac.pod:3 C/crypto/lh_stats.pod:3
#: C/crypto/lhash.pod:3 C/crypto/md5.pod:3 C/crypto/mdc2.pod:3
#: C/crypto/pem.pod:3 C/crypto/rand.pod:3 C/crypto/rc4.pod:3
#: C/crypto/ripemd.pod:3 C/crypto/rsa.pod:3 C/crypto/sha.pod:3
#: C/crypto/threads.pod:3 C/crypto/ui.pod:3 C/crypto/ui_compat.pod:3
#: C/crypto/x509.pod:3 C/ssl/SSL_CIPHER_get_name.pod:3
#: C/ssl/SSL_COMP_add_compression_method.pod:3
#: C/ssl/SSL_CTX_add_extra_chain_cert.pod:3 C/ssl/SSL_CTX_add_session.pod:3
#: C/ssl/SSL_CTX_ctrl.pod:3 C/ssl/SSL_CTX_flush_sessions.pod:3
#: C/ssl/SSL_CTX_free.pod:3 C/ssl/SSL_CTX_get_ex_new_index.pod:3
#: C/ssl/SSL_CTX_get_verify_mode.pod:3
#: C/ssl/SSL_CTX_load_verify_locations.pod:3 C/ssl/SSL_CTX_new.pod:3
#: C/ssl/SSL_CTX_sess_number.pod:3 C/ssl/SSL_CTX_sess_set_cache_size.pod:3
#: C/ssl/SSL_CTX_sess_set_get_cb.pod:3 C/ssl/SSL_CTX_sessions.pod:3
#: C/ssl/SSL_CTX_set_cert_store.pod:3
#: C/ssl/SSL_CTX_set_cert_verify_callback.pod:3
#: C/ssl/SSL_CTX_set_cipher_list.pod:3 C/ssl/SSL_CTX_set_client_CA_list.pod:3
#: C/ssl/SSL_CTX_set_client_cert_cb.pod:3
#: C/ssl/SSL_CTX_set_default_passwd_cb.pod:3
#: C/ssl/SSL_CTX_set_generate_session_id.pod:3
#: C/ssl/SSL_CTX_set_info_callback.pod:3 C/ssl/SSL_CTX_set_max_cert_list.pod:3
#: C/ssl/SSL_CTX_set_mode.pod:3 C/ssl/SSL_CTX_set_msg_callback.pod:3
#: C/ssl/SSL_CTX_set_options.pod:3 C/ssl/SSL_CTX_set_quiet_shutdown.pod:3
#: C/ssl/SSL_CTX_set_session_cache_mode.pod:3
#: C/ssl/SSL_CTX_set_session_id_context.pod:3
#: C/ssl/SSL_CTX_set_ssl_version.pod:3 C/ssl/SSL_CTX_set_timeout.pod:3
#: C/ssl/SSL_CTX_set_tmp_dh_callback.pod:3
#: C/ssl/SSL_CTX_set_tmp_rsa_callback.pod:3 C/ssl/SSL_CTX_set_verify.pod:3
#: C/ssl/SSL_CTX_use_certificate.pod:3 C/ssl/SSL_SESSION_free.pod:3
#: C/ssl/SSL_SESSION_get_ex_new_index.pod:3 C/ssl/SSL_SESSION_get_time.pod:3
#: C/ssl/SSL_accept.pod:3 C/ssl/SSL_alert_type_string.pod:3
#: C/ssl/SSL_clear.pod:3 C/ssl/SSL_connect.pod:3 C/ssl/SSL_do_handshake.pod:3
#: C/ssl/SSL_free.pod:3 C/ssl/SSL_get_SSL_CTX.pod:3
#: C/ssl/SSL_get_ciphers.pod:3 C/ssl/SSL_get_client_CA_list.pod:3
#: C/ssl/SSL_get_current_cipher.pod:3 C/ssl/SSL_get_default_timeout.pod:3
#: C/ssl/SSL_get_error.pod:3 C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:3
#: C/ssl/SSL_get_ex_new_index.pod:3 C/ssl/SSL_get_fd.pod:3
#: C/ssl/SSL_get_peer_cert_chain.pod:3 C/ssl/SSL_get_peer_certificate.pod:3
#: C/ssl/SSL_get_rbio.pod:3 C/ssl/SSL_get_session.pod:3
#: C/ssl/SSL_get_verify_result.pod:3 C/ssl/SSL_get_version.pod:3
#: C/ssl/SSL_library_init.pod:3 C/ssl/SSL_load_client_CA_file.pod:3
#: C/ssl/SSL_new.pod:3 C/ssl/SSL_pending.pod:3 C/ssl/SSL_read.pod:3
#: C/ssl/SSL_rstate_string.pod:3 C/ssl/SSL_session_reused.pod:3
#: C/ssl/SSL_set_bio.pod:3 C/ssl/SSL_set_connect_state.pod:3
#: C/ssl/SSL_set_fd.pod:3 C/ssl/SSL_set_session.pod:3
#: C/ssl/SSL_set_shutdown.pod:3 C/ssl/SSL_set_verify_result.pod:3
#: C/ssl/SSL_shutdown.pod:3 C/ssl/SSL_state_string.pod:3 C/ssl/SSL_want.pod:3
#: C/ssl/SSL_write.pod:3 C/ssl/d2i_SSL_SESSION.pod:3 C/ssl/ssl.pod:4
msgid "NAME"
msgstr "NOM"

# type: =head1
#: C/apps/CA.pl.pod:8 C/apps/asn1parse.pod:7 C/apps/ca.pod:8
#: C/apps/ciphers.pod:7 C/apps/crl.pod:7 C/apps/crl2pkcs7.pod:7
#: C/apps/dgst.pod:7 C/apps/dhparam.pod:7 C/apps/dsa.pod:7
#: C/apps/dsaparam.pod:7 C/apps/ec.pod:7 C/apps/ecparam.pod:7 C/apps/enc.pod:7
#: C/apps/errstr.pod:7 C/apps/gendsa.pod:7 C/apps/genrsa.pod:7
#: C/apps/nseq.pod:7 C/apps/ocsp.pod:7 C/apps/openssl.pod:8
#: C/apps/passwd.pod:7 C/apps/pkcs12.pod:8 C/apps/pkcs7.pod:7
#: C/apps/pkcs8.pod:7 C/apps/rand.pod:7 C/apps/req.pod:8 C/apps/rsa.pod:8
#: C/apps/rsautl.pod:7 C/apps/s_client.pod:8 C/apps/s_server.pod:8
#: C/apps/s_time.pod:8 C/apps/sess_id.pod:8 C/apps/smime.pod:7
#: C/apps/speed.pod:7 C/apps/spkac.pod:7 C/apps/verify.pod:7
#: C/apps/version.pod:7 C/apps/x509.pod:8 C/apps/c_rehash.pod:8
#: C/crypto/ASN1_OBJECT_new.pod:7 C/crypto/ASN1_STRING_length.pod:9
#: C/crypto/ASN1_STRING_new.pod:8 C/crypto/ASN1_STRING_print_ex.pod:7
#: C/crypto/ASN1_generate_nconf.pod:7 C/crypto/BIO_ctrl.pod:10
#: C/crypto/BIO_f_base64.pod:7 C/crypto/BIO_f_buffer.pod:7
#: C/crypto/BIO_f_cipher.pod:7 C/crypto/BIO_f_md.pod:7
#: C/crypto/BIO_f_null.pod:7 C/crypto/BIO_f_ssl.pod:10
#: C/crypto/BIO_find_type.pod:7 C/crypto/BIO_new.pod:7 C/crypto/BIO_push.pod:7
#: C/crypto/BIO_read.pod:7 C/crypto/BIO_s_accept.pod:9
#: C/crypto/BIO_s_bio.pod:10 C/crypto/BIO_s_connect.pod:10
#: C/crypto/BIO_s_fd.pod:7 C/crypto/BIO_s_file.pod:9 C/crypto/BIO_s_mem.pod:8
#: C/crypto/BIO_s_null.pod:7 C/crypto/BIO_s_socket.pod:7
#: C/crypto/BIO_set_callback.pod:8 C/crypto/BIO_should_retry.pod:9
#: C/crypto/BN_BLINDING_new.pod:11 C/crypto/BN_CTX_new.pod:7
#: C/crypto/BN_CTX_start.pod:7 C/crypto/BN_add.pod:9
#: C/crypto/BN_add_word.pod:8 C/crypto/BN_bn2bin.pod:8 C/crypto/BN_cmp.pod:7
#: C/crypto/BN_copy.pod:7 C/crypto/BN_generate_prime.pod:7
#: C/crypto/BN_mod_inverse.pod:7 C/crypto/BN_mod_mul_montgomery.pod:9
#: C/crypto/BN_mod_mul_reciprocal.pod:9 C/crypto/BN_new.pod:7
#: C/crypto/BN_num_bytes.pod:7 C/crypto/BN_rand.pod:7
#: C/crypto/BN_set_bit.pod:8 C/crypto/BN_swap.pod:7 C/crypto/BN_zero.pod:8
#: C/crypto/CONF_modules_free.pod:8 C/crypto/CONF_modules_load_file.pod:7
#: C/crypto/CRYPTO_set_ex_data.pod:7 C/crypto/DH_generate_key.pod:7
#: C/crypto/DH_generate_parameters.pod:7 C/crypto/DH_get_ex_new_index.pod:7
#: C/crypto/DH_new.pod:7 C/crypto/DH_set_method.pod:8 C/crypto/DH_size.pod:7
#: C/crypto/DSA_SIG_new.pod:7 C/crypto/DSA_do_sign.pod:7
#: C/crypto/DSA_dup_DH.pod:7 C/crypto/DSA_generate_key.pod:7
#: C/crypto/DSA_generate_parameters.pod:7 C/crypto/DSA_get_ex_new_index.pod:7
#: C/crypto/DSA_new.pod:7 C/crypto/DSA_set_method.pod:8
#: C/crypto/DSA_sign.pod:7 C/crypto/DSA_size.pod:7 C/crypto/ERR_GET_LIB.pod:8
#: C/crypto/ERR_clear_error.pod:7 C/crypto/ERR_error_string.pod:9
#: C/crypto/ERR_get_error.pod:10 C/crypto/ERR_load_crypto_strings.pod:8
#: C/crypto/ERR_load_strings.pod:8 C/crypto/ERR_print_errors.pod:7
#: C/crypto/ERR_put_error.pod:7 C/crypto/ERR_remove_state.pod:7
#: C/crypto/ERR_set_mark.pod:7 C/crypto/EVP_BytesToKey.pod:7
#: C/crypto/EVP_DigestInit.pod:13 C/crypto/EVP_EncryptInit.pod:21
#: C/crypto/EVP_OpenInit.pod:7 C/crypto/EVP_PKEY_new.pod:7
#: C/crypto/EVP_PKEY_set1_RSA.pod:10 C/crypto/EVP_SealInit.pod:7
#: C/crypto/EVP_SignInit.pod:7 C/crypto/EVP_VerifyInit.pod:7
#: C/crypto/OBJ_nid2obj.pod:9 C/crypto/OPENSSL_Applink.pod:7
#: C/crypto/OPENSSL_VERSION_NUMBER.pod:7 C/crypto/OPENSSL_config.pod:7
#: C/crypto/OPENSSL_ia32cap.pod:7 C/crypto/OPENSSL_load_builtin_modules.pod:7
#: C/crypto/OpenSSL_add_all_algorithms.pod:8 C/crypto/PKCS12_create.pod:7
#: C/crypto/PKCS12_parse.pod:7 C/crypto/PKCS7_decrypt.pod:7
#: C/crypto/PKCS7_encrypt.pod:7 C/crypto/PKCS7_sign.pod:7
#: C/crypto/PKCS7_verify.pod:7 C/crypto/RAND_add.pod:8
#: C/crypto/RAND_bytes.pod:7 C/crypto/RAND_cleanup.pod:7
#: C/crypto/RAND_egd.pod:7 C/crypto/RAND_load_file.pod:7
#: C/crypto/RAND_set_rand_method.pod:7 C/crypto/RSA_blinding_on.pod:7
#: C/crypto/RSA_check_key.pod:7 C/crypto/RSA_generate_key.pod:7
#: C/crypto/RSA_get_ex_new_index.pod:7 C/crypto/RSA_new.pod:7
#: C/crypto/RSA_padding_add_PKCS1_type_1.pod:12 C/crypto/RSA_print.pod:9
#: C/crypto/RSA_private_encrypt.pod:7 C/crypto/RSA_public_encrypt.pod:7
#: C/crypto/RSA_set_method.pod:9 C/crypto/RSA_sign.pod:7
#: C/crypto/RSA_sign_ASN1_OCTET_STRING.pod:7 C/crypto/RSA_size.pod:7
#: C/crypto/SMIME_read_PKCS7.pod:7 C/crypto/SMIME_write_PKCS7.pod:7
#: C/crypto/X509_NAME_ENTRY_get_object.pod:10
#: C/crypto/X509_NAME_add_entry_by_txt.pod:8
#: C/crypto/X509_NAME_get_index_by_NID.pod:9 C/crypto/X509_NAME_print_ex.pod:8
#: C/crypto/X509_new.pod:7 C/crypto/bio.pod:7 C/crypto/blowfish.pod:8
#: C/crypto/bn.pod:7 C/crypto/bn_internal.pod:14 C/crypto/buffer.pod:8
#: C/crypto/crypto.pod:7 C/crypto/d2i_ASN1_OBJECT.pod:7
#: C/crypto/d2i_DHparams.pod:7 C/crypto/d2i_DSAPublicKey.pod:9
#: C/crypto/d2i_PKCS8PrivateKey.pod:9 C/crypto/d2i_RSAPublicKey.pod:9
#: C/crypto/d2i_X509.pod:8 C/crypto/d2i_X509_ALGOR.pod:7
#: C/crypto/d2i_X509_CRL.pod:8 C/crypto/d2i_X509_NAME.pod:7
#: C/crypto/d2i_X509_REQ.pod:8 C/crypto/d2i_X509_SIG.pod:7 C/crypto/des.pod:15
#: C/crypto/dh.pod:7 C/crypto/dsa.pod:7 C/crypto/ecdsa.pod:7
#: C/crypto/engine.pod:7 C/crypto/err.pod:7 C/crypto/evp.pod:7
#: C/crypto/hmac.pod:8 C/crypto/lh_stats.pod:8 C/crypto/lhash.pod:7
#: C/crypto/md5.pod:8 C/crypto/mdc2.pod:7 C/crypto/pem.pod:7
#: C/crypto/rand.pod:7 C/crypto/rc4.pod:7 C/crypto/ripemd.pod:8
#: C/crypto/rsa.pod:7 C/crypto/sha.pod:7 C/crypto/threads.pod:10
#: C/crypto/ui.pod:13 C/crypto/ui_compat.pod:8 C/crypto/x509.pod:7
#: C/ssl/SSL_CIPHER_get_name.pod:7 C/ssl/SSL_COMP_add_compression_method.pod:7
#: C/ssl/SSL_CTX_add_extra_chain_cert.pod:7 C/ssl/SSL_CTX_add_session.pod:7
#: C/ssl/SSL_CTX_ctrl.pod:7 C/ssl/SSL_CTX_flush_sessions.pod:7
#: C/ssl/SSL_CTX_free.pod:7 C/ssl/SSL_CTX_get_ex_new_index.pod:7
#: C/ssl/SSL_CTX_get_verify_mode.pod:7
#: C/ssl/SSL_CTX_load_verify_locations.pod:8 C/ssl/SSL_CTX_new.pod:7
#: C/ssl/SSL_CTX_sess_number.pod:7 C/ssl/SSL_CTX_sess_set_cache_size.pod:7
#: C/ssl/SSL_CTX_sess_set_get_cb.pod:7 C/ssl/SSL_CTX_sessions.pod:7
#: C/ssl/SSL_CTX_set_cert_store.pod:7
#: C/ssl/SSL_CTX_set_cert_verify_callback.pod:7
#: C/ssl/SSL_CTX_set_cipher_list.pod:7 C/ssl/SSL_CTX_set_client_CA_list.pod:9
#: C/ssl/SSL_CTX_set_client_cert_cb.pod:7
#: C/ssl/SSL_CTX_set_default_passwd_cb.pod:7
#: C/ssl/SSL_CTX_set_generate_session_id.pod:7
#: C/ssl/SSL_CTX_set_info_callback.pod:7 C/ssl/SSL_CTX_set_max_cert_list.pod:7
#: C/ssl/SSL_CTX_set_mode.pod:7 C/ssl/SSL_CTX_set_msg_callback.pod:7
#: C/ssl/SSL_CTX_set_options.pod:7 C/ssl/SSL_CTX_set_quiet_shutdown.pod:7
#: C/ssl/SSL_CTX_set_session_cache_mode.pod:7
#: C/ssl/SSL_CTX_set_session_id_context.pod:7
#: C/ssl/SSL_CTX_set_ssl_version.pod:8 C/ssl/SSL_CTX_set_timeout.pod:7
#: C/ssl/SSL_CTX_set_tmp_dh_callback.pod:7
#: C/ssl/SSL_CTX_set_tmp_rsa_callback.pod:7 C/ssl/SSL_CTX_set_verify.pod:7
#: C/ssl/SSL_CTX_use_certificate.pod:7 C/ssl/SSL_SESSION_free.pod:7
#: C/ssl/SSL_SESSION_get_ex_new_index.pod:7 C/ssl/SSL_SESSION_get_time.pod:7
#: C/ssl/SSL_accept.pod:7 C/ssl/SSL_alert_type_string.pod:7
#: C/ssl/SSL_clear.pod:7 C/ssl/SSL_connect.pod:7 C/ssl/SSL_do_handshake.pod:7
#: C/ssl/SSL_free.pod:7 C/ssl/SSL_get_SSL_CTX.pod:7
#: C/ssl/SSL_get_ciphers.pod:7 C/ssl/SSL_get_client_CA_list.pod:7
#: C/ssl/SSL_get_current_cipher.pod:8 C/ssl/SSL_get_default_timeout.pod:7
#: C/ssl/SSL_get_error.pod:7 C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:8
#: C/ssl/SSL_get_ex_new_index.pod:7 C/ssl/SSL_get_fd.pod:7
#: C/ssl/SSL_get_peer_cert_chain.pod:7 C/ssl/SSL_get_peer_certificate.pod:7
#: C/ssl/SSL_get_rbio.pod:7 C/ssl/SSL_get_session.pod:7
#: C/ssl/SSL_get_verify_result.pod:7 C/ssl/SSL_get_version.pod:7
#: C/ssl/SSL_library_init.pod:8 C/ssl/SSL_load_client_CA_file.pod:7
#: C/ssl/SSL_new.pod:7 C/ssl/SSL_pending.pod:7 C/ssl/SSL_read.pod:7
#: C/ssl/SSL_rstate_string.pod:7 C/ssl/SSL_session_reused.pod:7
#: C/ssl/SSL_set_bio.pod:7 C/ssl/SSL_set_connect_state.pod:7
#: C/ssl/SSL_set_fd.pod:7 C/ssl/SSL_set_session.pod:7
#: C/ssl/SSL_set_shutdown.pod:7 C/ssl/SSL_set_verify_result.pod:7
#: C/ssl/SSL_shutdown.pod:7 C/ssl/SSL_state_string.pod:7 C/ssl/SSL_want.pod:7
#: C/ssl/SSL_write.pod:7 C/ssl/d2i_SSL_SESSION.pod:7 C/ssl/ssl.pod:8
msgid "SYNOPSIS"
msgstr "SYNOPSIS"

# type: =head1
#: C/apps/CA.pl.pod:25 C/apps/asn1parse.pod:22 C/apps/ca.pod:51
#: C/apps/ciphers.pod:16 C/apps/config.pod:10 C/apps/crl.pod:23
#: C/apps/crl2pkcs7.pod:17 C/apps/dgst.pod:28 C/apps/dhparam.pod:24
#: C/apps/dsa.pod:26 C/apps/dsaparam.pod:22 C/apps/ec.pod:28
#: C/apps/ecparam.pod:27 C/apps/enc.pod:27 C/apps/errstr.pod:11
#: C/apps/gendsa.pod:18 C/apps/genrsa.pod:21 C/apps/nseq.pod:14
#: C/apps/ocsp.pod:55 C/apps/openssl.pod:19 C/apps/passwd.pod:21
#: C/apps/pkcs12.pod:43 C/apps/pkcs7.pod:19 C/apps/pkcs8.pod:26
#: C/apps/rand.pod:15 C/apps/req.pod:47 C/apps/rsa.pod:29 C/apps/rsautl.pod:25
#: C/apps/s_client.pod:47 C/apps/s_server.pod:56 C/apps/s_time.pod:27
#: C/apps/sess_id.pod:19 C/apps/smime.pod:43 C/apps/speed.pod:37
#: C/apps/spkac.pod:22 C/apps/verify.pod:21 C/apps/version.pod:17
#: C/apps/x509.pod:57 C/apps/x509v3_config.pod:9 C/apps/c_rehash.pod:13
#: C/crypto/ASN1_OBJECT_new.pod:12 C/crypto/ASN1_STRING_length.pod:24
#: C/crypto/ASN1_STRING_new.pod:14 C/crypto/ASN1_STRING_print_ex.pod:16
#: C/crypto/ASN1_generate_nconf.pod:12 C/crypto/BIO_ctrl.pod:36
#: C/crypto/BIO_f_base64.pod:14 C/crypto/BIO_f_buffer.pod:19
#: C/crypto/BIO_f_cipher.pod:18 C/crypto/BIO_f_md.pod:17
#: C/crypto/BIO_f_null.pod:13 C/crypto/BIO_f_ssl.pod:35
#: C/crypto/BIO_find_type.pod:41 C/crypto/BIO_new.pod:17
#: C/crypto/BIO_push.pod:14 C/crypto/BIO_read.pod:16
#: C/crypto/BIO_s_accept.pod:32 C/crypto/BIO_s_bio.pod:34
#: C/crypto/BIO_s_connect.pod:31 C/crypto/BIO_s_fd.pod:18
#: C/crypto/BIO_s_file.pod:25 C/crypto/BIO_s_mem.pod:21
#: C/crypto/BIO_s_null.pod:13 C/crypto/BIO_s_socket.pod:18
#: C/crypto/BIO_set_callback.pod:23 C/crypto/BIO_should_retry.pod:28
#: C/crypto/BN_BLINDING_new.pod:35 C/crypto/BN_CTX_new.pod:17
#: C/crypto/BN_CTX_start.pod:17 C/crypto/BN_add.pod:46
#: C/crypto/BN_add_word.pod:22 C/crypto/BN_bn2bin.pod:26
#: C/crypto/BN_cmp.pod:19 C/crypto/BN_copy.pod:15
#: C/crypto/BN_generate_prime.pod:21 C/crypto/BN_mod_inverse.pod:14
#: C/crypto/BN_mod_mul_montgomery.pod:29 C/crypto/BN_mod_mul_reciprocal.pod:25
#: C/crypto/BN_new.pod:21 C/crypto/BN_num_bytes.pod:17 C/crypto/BN_rand.pod:19
#: C/crypto/BN_set_bit.pod:25 C/crypto/BN_swap.pod:13 C/crypto/BN_zero.pod:20
#: C/crypto/CONF_modules_free.pod:16 C/crypto/CONF_modules_load_file.pod:16
#: C/crypto/CRYPTO_set_ex_data.pod:13 C/crypto/DH_generate_key.pod:15
#: C/crypto/DH_generate_parameters.pod:16 C/crypto/DH_get_ex_new_index.pod:20
#: C/crypto/DH_new.pod:15 C/crypto/DH_set_method.pod:23
#: C/crypto/DH_size.pod:13 C/crypto/DSA_SIG_new.pod:15
#: C/crypto/DSA_do_sign.pod:16 C/crypto/DSA_dup_DH.pod:13
#: C/crypto/DSA_generate_key.pod:13 C/crypto/DSA_generate_parameters.pod:15
#: C/crypto/DSA_get_ex_new_index.pod:20 C/crypto/DSA_new.pod:15
#: C/crypto/DSA_set_method.pod:23 C/crypto/DSA_sign.pod:20
#: C/crypto/DSA_size.pod:13 C/crypto/ERR_GET_LIB.pod:18
#: C/crypto/ERR_clear_error.pod:13 C/crypto/ERR_error_string.pod:20
#: C/crypto/ERR_get_error.pod:29 C/crypto/ERR_load_crypto_strings.pod:19
#: C/crypto/ERR_load_strings.pod:18 C/crypto/ERR_print_errors.pod:14
#: C/crypto/ERR_put_error.pod:16 C/crypto/ERR_remove_state.pod:13
#: C/crypto/ERR_set_mark.pod:15 C/crypto/EVP_BytesToKey.pod:16
#: C/crypto/EVP_DigestInit.pod:63 C/crypto/EVP_EncryptInit.pod:94
#: C/crypto/EVP_OpenInit.pod:18 C/crypto/EVP_PKEY_new.pod:15
#: C/crypto/EVP_PKEY_set1_RSA.pod:31 C/crypto/EVP_SealInit.pod:19
#: C/crypto/EVP_SignInit.pod:19 C/crypto/EVP_VerifyInit.pod:17
#: C/crypto/OBJ_nid2obj.pod:30 C/crypto/OPENSSL_Applink.pod:11
#: C/crypto/OPENSSL_VERSION_NUMBER.pod:16 C/crypto/OPENSSL_config.pod:14
#: C/crypto/OPENSSL_ia32cap.pod:12
#: C/crypto/OPENSSL_load_builtin_modules.pod:15
#: C/crypto/OpenSSL_add_all_algorithms.pod:18 C/crypto/PKCS12_create.pod:14
#: C/crypto/PKCS12_parse.pod:13 C/crypto/PKCS7_decrypt.pod:11
#: C/crypto/PKCS7_encrypt.pod:11 C/crypto/PKCS7_sign.pod:11
#: C/crypto/PKCS7_verify.pod:13 C/crypto/RAND_add.pod:21
#: C/crypto/RAND_bytes.pod:15 C/crypto/RAND_cleanup.pod:13
#: C/crypto/RAND_egd.pod:16 C/crypto/RAND_load_file.pod:17
#: C/crypto/RAND_set_rand_method.pod:17 C/crypto/RSA_blinding_on.pod:15
#: C/crypto/RSA_check_key.pod:13 C/crypto/RSA_generate_key.pod:14
#: C/crypto/RSA_get_ex_new_index.pod:27 C/crypto/RSA_new.pod:15
#: C/crypto/RSA_padding_add_PKCS1_type_1.pod:46 C/crypto/RSA_print.pod:28
#: C/crypto/RSA_private_encrypt.pod:17 C/crypto/RSA_public_encrypt.pod:17
#: C/crypto/RSA_set_method.pod:29 C/crypto/RSA_sign.pod:17
#: C/crypto/RSA_sign_ASN1_OCTET_STRING.pod:19 C/crypto/RSA_size.pod:13
#: C/crypto/SMIME_read_PKCS7.pod:11 C/crypto/SMIME_write_PKCS7.pod:11
#: C/crypto/X509_NAME_ENTRY_get_object.pod:22
#: C/crypto/X509_NAME_add_entry_by_txt.pod:20
#: C/crypto/X509_NAME_get_index_by_NID.pod:20
#: C/crypto/X509_NAME_print_ex.pod:17 C/crypto/X509_new.pod:12
#: C/crypto/bio.pod:14 C/crypto/blowfish.pod:28 C/crypto/bn.pod:144
#: C/crypto/bn_internal.pod:64 C/crypto/buffer.pod:20 C/crypto/crypto.pod:9
#: C/crypto/d2i_ASN1_OBJECT.pod:14 C/crypto/d2i_DHparams.pod:14
#: C/crypto/d2i_DSAPublicKey.pod:34 C/crypto/d2i_PKCS8PrivateKey.pod:32
#: C/crypto/d2i_RSAPublicKey.pod:30 C/crypto/d2i_X509.pod:21
#: C/crypto/d2i_X509_ALGOR.pod:14 C/crypto/d2i_X509_CRL.pod:21
#: C/crypto/d2i_X509_NAME.pod:14 C/crypto/d2i_X509_REQ.pod:21
#: C/crypto/d2i_X509_SIG.pod:14 C/crypto/des.pod:105 C/crypto/des_modes.pod:9
#: C/crypto/dh.pod:41 C/crypto/dsa.pod:64 C/crypto/ecdsa.pod:50
#: C/crypto/engine.pod:162 C/crypto/err.pod:47 C/crypto/evp.pod:11
#: C/crypto/hmac.pod:28 C/crypto/lh_stats.pod:20 C/crypto/lhash.pod:29
#: C/crypto/md5.pod:42 C/crypto/mdc2.pod:19 C/crypto/pem.pod:181
#: C/crypto/rand.pod:36 C/crypto/rc4.pod:16 C/crypto/ripemd.pod:20
#: C/crypto/rsa.pod:63 C/crypto/sha.pod:19 C/crypto/threads.pod:50
#: C/crypto/ui.pod:68 C/crypto/ui_compat.pod:17 C/crypto/x509.pod:11
#: C/ssl/SSL_CIPHER_get_name.pod:16
#: C/ssl/SSL_COMP_add_compression_method.pod:13
#: C/ssl/SSL_CTX_add_extra_chain_cert.pod:13 C/ssl/SSL_CTX_add_session.pod:17
#: C/ssl/SSL_CTX_ctrl.pod:17 C/ssl/SSL_CTX_flush_sessions.pod:14
#: C/ssl/SSL_CTX_free.pod:13 C/ssl/SSL_CTX_get_ex_new_index.pod:27
#: C/ssl/SSL_CTX_get_verify_mode.pod:18
#: C/ssl/SSL_CTX_load_verify_locations.pod:15 C/ssl/SSL_CTX_new.pod:13
#: C/ssl/SSL_CTX_sess_number.pod:24 C/ssl/SSL_CTX_sess_set_cache_size.pod:14
#: C/ssl/SSL_CTX_sess_set_get_cb.pod:27 C/ssl/SSL_CTX_sessions.pod:13
#: C/ssl/SSL_CTX_set_cert_store.pod:14
#: C/ssl/SSL_CTX_set_cert_verify_callback.pod:13
#: C/ssl/SSL_CTX_set_cipher_list.pod:14
#: C/ssl/SSL_CTX_set_client_CA_list.pod:18
#: C/ssl/SSL_CTX_set_client_cert_cb.pod:15
#: C/ssl/SSL_CTX_set_default_passwd_cb.pod:16
#: C/ssl/SSL_CTX_set_generate_session_id.pod:19
#: C/ssl/SSL_CTX_set_info_callback.pod:17
#: C/ssl/SSL_CTX_set_max_cert_list.pod:17 C/ssl/SSL_CTX_set_mode.pod:17
#: C/ssl/SSL_CTX_set_msg_callback.pod:17 C/ssl/SSL_CTX_set_options.pod:17
#: C/ssl/SSL_CTX_set_quiet_shutdown.pod:17
#: C/ssl/SSL_CTX_set_session_cache_mode.pod:14
#: C/ssl/SSL_CTX_set_session_id_context.pod:16
#: C/ssl/SSL_CTX_set_ssl_version.pod:16 C/ssl/SSL_CTX_set_timeout.pod:14
#: C/ssl/SSL_CTX_set_tmp_dh_callback.pod:21
#: C/ssl/SSL_CTX_set_tmp_rsa_callback.pod:23 C/ssl/SSL_CTX_set_verify.pod:20
#: C/ssl/SSL_CTX_use_certificate.pod:37 C/ssl/SSL_SESSION_free.pod:13
#: C/ssl/SSL_SESSION_get_ex_new_index.pod:27 C/ssl/SSL_SESSION_get_time.pod:21
#: C/ssl/SSL_accept.pod:13 C/ssl/SSL_alert_type_string.pod:17
#: C/ssl/SSL_clear.pod:13 C/ssl/SSL_connect.pod:13
#: C/ssl/SSL_do_handshake.pod:13 C/ssl/SSL_free.pod:13
#: C/ssl/SSL_get_SSL_CTX.pod:13 C/ssl/SSL_get_ciphers.pod:14
#: C/ssl/SSL_get_client_CA_list.pod:14 C/ssl/SSL_get_current_cipher.pod:22
#: C/ssl/SSL_get_default_timeout.pod:13 C/ssl/SSL_get_error.pod:13
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:14
#: C/ssl/SSL_get_ex_new_index.pod:27 C/ssl/SSL_get_fd.pod:15
#: C/ssl/SSL_get_peer_cert_chain.pod:13 C/ssl/SSL_get_peer_certificate.pod:13
#: C/ssl/SSL_get_rbio.pod:14 C/ssl/SSL_get_session.pod:15
#: C/ssl/SSL_get_verify_result.pod:13 C/ssl/SSL_get_version.pod:13
#: C/ssl/SSL_library_init.pod:16 C/ssl/SSL_load_client_CA_file.pod:13
#: C/ssl/SSL_new.pod:13 C/ssl/SSL_pending.pod:13 C/ssl/SSL_read.pod:13
#: C/ssl/SSL_rstate_string.pod:14 C/ssl/SSL_session_reused.pod:13
#: C/ssl/SSL_set_bio.pod:13 C/ssl/SSL_set_connect_state.pod:15
#: C/ssl/SSL_set_fd.pod:15 C/ssl/SSL_set_session.pod:13
#: C/ssl/SSL_set_shutdown.pod:15 C/ssl/SSL_set_verify_result.pod:13
#: C/ssl/SSL_shutdown.pod:13 C/ssl/SSL_state_string.pod:14
#: C/ssl/SSL_want.pod:17 C/ssl/SSL_write.pod:13 C/ssl/d2i_SSL_SESSION.pod:14
#: C/ssl/ssl.pod:10
msgid "DESCRIPTION"
msgstr "DESCRIPTION"

# type: =head1
#: C/apps/CA.pl.pod:174 C/apps/ca.pod:666 C/apps/ciphers.pod:425
#: C/apps/config.pod:275 C/apps/crl.pod:113 C/apps/crl2pkcs7.pod:87
#: C/apps/dhparam.pod:132 C/apps/dsa.pod:153 C/apps/dsaparam.pod:105
#: C/apps/ec.pod:178 C/apps/ecparam.pod:167 C/apps/errstr.pod:32
#: C/apps/gendsa.pod:61 C/apps/genrsa.pod:91 C/apps/openssl.pod:337
#: C/apps/pkcs12.pod:327 C/apps/pkcs7.pod:101 C/apps/pkcs8.pod:238
#: C/apps/rand.pod:46 C/apps/req.pod:606 C/apps/rsa.pod:184
#: C/apps/rsautl.pod:181 C/apps/s_client.pod:293 C/apps/s_server.pod:336
#: C/apps/s_time.pod:169 C/apps/sess_id.pod:147 C/apps/spkac.pod:129
#: C/apps/verify.pod:324 C/apps/x509.pod:823 C/apps/x509v3_config.pod:451
#: C/apps/c_rehash.pod:45 C/crypto/ASN1_OBJECT_new.pod:35
#: C/crypto/ASN1_STRING_length.pod:75 C/crypto/ASN1_STRING_new.pod:36
#: C/crypto/ASN1_STRING_print_ex.pod:87 C/crypto/ASN1_generate_nconf.pod:245
#: C/crypto/BIO_ctrl.pod:126 C/crypto/BIO_f_base64.pod:79
#: C/crypto/BIO_f_buffer.pod:67 C/crypto/BIO_f_cipher.pod:74
#: C/crypto/BIO_f_md.pod:136 C/crypto/BIO_f_null.pod:30
#: C/crypto/BIO_f_ssl.pod:311 C/crypto/BIO_find_type.pod:96
#: C/crypto/BIO_new.pod:63 C/crypto/BIO_push.pod:67 C/crypto/BIO_read.pod:62
#: C/crypto/BIO_s_accept.pod:193 C/crypto/BIO_s_bio.pod:177
#: C/crypto/BIO_s_connect.pod:190 C/crypto/BIO_s_fd.pod:83
#: C/crypto/BIO_s_file.pod:137 C/crypto/BIO_s_mem.pod:113
#: C/crypto/BIO_s_null.pod:35 C/crypto/BIO_s_socket.pod:61
#: C/crypto/BIO_set_callback.pod:106 C/crypto/BIO_should_retry.pod:112
#: C/crypto/BN_BLINDING_new.pod:95 C/crypto/BN_CTX_new.pod:43
#: C/crypto/BN_CTX_start.pod:44 C/crypto/BN_add.pod:112
#: C/crypto/BN_add_word.pod:48 C/crypto/BN_bn2bin.pod:81
#: C/crypto/BN_cmp.pod:38 C/crypto/BN_copy.pod:26
#: C/crypto/BN_generate_prime.pod:91 C/crypto/BN_mod_inverse.pod:28
#: C/crypto/BN_mod_mul_montgomery.pod:88 C/crypto/BN_mod_mul_reciprocal.pod:70
#: C/crypto/BN_new.pod:43 C/crypto/BN_num_bytes.pod:47 C/crypto/BN_rand.pod:46
#: C/crypto/BN_set_bit.pod:56 C/crypto/BN_zero.pod:46
#: C/crypto/CONF_modules_free.pod:37 C/crypto/CONF_modules_load_file.pod:51
#: C/crypto/CRYPTO_set_ex_data.pod:41 C/crypto/DH_generate_key.pod:41
#: C/crypto/DH_generate_parameters.pod:60 C/crypto/DH_get_ex_new_index.pod:27
#: C/crypto/DH_new.pod:30 C/crypto/DH_set_method.pod:110
#: C/crypto/DH_size.pod:25 C/crypto/DSA_SIG_new.pod:31
#: C/crypto/DSA_do_sign.pod:37 C/crypto/DSA_dup_DH.pod:28
#: C/crypto/DSA_generate_key.pod:25 C/crypto/DSA_generate_parameters.pod:91
#: C/crypto/DSA_get_ex_new_index.pod:27 C/crypto/DSA_new.pod:32
#: C/crypto/DSA_set_method.pod:124 C/crypto/DSA_sign.pod:56
#: C/crypto/DSA_size.pod:25 C/crypto/ERR_GET_LIB.pod:42
#: C/crypto/ERR_clear_error.pod:21 C/crypto/ERR_error_string.pod:61
#: C/crypto/ERR_get_error.pod:62 C/crypto/ERR_load_crypto_strings.pod:36
#: C/crypto/ERR_load_strings.pod:44 C/crypto/ERR_print_errors.pod:39
#: C/crypto/ERR_put_error.pod:35 C/crypto/ERR_remove_state.pod:26
#: C/crypto/ERR_set_mark.pod:30 C/crypto/EVP_BytesToKey.pod:60
#: C/crypto/EVP_DigestInit.pod:237 C/crypto/EVP_EncryptInit.pod:500
#: C/crypto/EVP_OpenInit.pod:55 C/crypto/EVP_PKEY_new.pod:39
#: C/crypto/EVP_PKEY_set1_RSA.pod:72 C/crypto/EVP_SealInit.pod:75
#: C/crypto/EVP_SignInit.pod:80 C/crypto/EVP_VerifyInit.pod:70
#: C/crypto/OBJ_nid2obj.pod:141 C/crypto/OPENSSL_VERSION_NUMBER.pod:91
#: C/crypto/OPENSSL_config.pod:73 C/crypto/OPENSSL_load_builtin_modules.pod:43
#: C/crypto/OpenSSL_add_all_algorithms.pod:61 C/crypto/PKCS12_create.pod:67
#: C/crypto/PKCS12_parse.pod:42 C/crypto/PKCS7_decrypt.pod:45
#: C/crypto/PKCS7_encrypt.pod:57 C/crypto/PKCS7_sign.pod:91
#: C/crypto/PKCS7_verify.pod:108 C/crypto/RAND_add.pod:66
#: C/crypto/RAND_bytes.pod:39 C/crypto/RAND_cleanup.pod:21
#: C/crypto/RAND_egd.pod:70 C/crypto/RAND_load_file.pod:44
#: C/crypto/RAND_set_rand_method.pod:68 C/crypto/RSA_blinding_on.pod:35
#: C/crypto/RSA_check_key.pod:59 C/crypto/RSA_generate_key.pod:60
#: C/crypto/RSA_get_ex_new_index.pod:111 C/crypto/RSA_new.pod:31
#: C/crypto/RSA_padding_add_PKCS1_type_1.pod:107 C/crypto/RSA_print.pod:39
#: C/crypto/RSA_private_encrypt.pod:60 C/crypto/RSA_public_encrypt.pod:74
#: C/crypto/RSA_set_method.pod:180 C/crypto/RSA_sign.pod:51
#: C/crypto/RSA_sign_ASN1_OCTET_STRING.pod:48 C/crypto/RSA_size.pod:25
#: C/crypto/SMIME_read_PKCS7.pod:60 C/crypto/SMIME_write_PKCS7.pod:51
#: C/crypto/X509_NAME_ENTRY_get_object.pod:63
#: C/crypto/X509_NAME_add_entry_by_txt.pod:108
#: C/crypto/X509_NAME_get_index_by_NID.pod:98
#: C/crypto/X509_NAME_print_ex.pod:97 C/crypto/X509_new.pod:29
#: C/crypto/bio.pod:40 C/crypto/blowfish.pod:103 C/crypto/bn.pod:167
#: C/crypto/bn_internal.pod:222 C/crypto/buffer.pod:64 C/crypto/crypto.pod:81
#: C/crypto/d2i_ASN1_OBJECT.pod:21 C/crypto/d2i_DHparams.pod:22
#: C/crypto/d2i_DSAPublicKey.pod:75 C/crypto/d2i_PKCS8PrivateKey.pod:52
#: C/crypto/d2i_RSAPublicKey.pod:59 C/crypto/d2i_X509.pod:222
#: C/crypto/d2i_X509_ALGOR.pod:22 C/crypto/d2i_X509_CRL.pod:29
#: C/crypto/d2i_X509_NAME.pod:23 C/crypto/d2i_X509_REQ.pod:28
#: C/crypto/d2i_X509_SIG.pod:22 C/crypto/des.pod:318
#: C/crypto/des_modes.pod:249 C/crypto/dh.pod:68 C/crypto/dsa.pod:101
#: C/crypto/ecdsa.pod:198 C/crypto/engine.pod:595 C/crypto/err.pod:172
#: C/crypto/evp.pod:34 C/crypto/hmac.pod:90 C/crypto/lh_stats.pod:50
#: C/crypto/lhash.pod:278 C/crypto/md5.pod:88 C/crypto/mdc2.pod:55
#: C/crypto/rand.pod:167 C/crypto/rc4.pod:54 C/crypto/ripemd.pod:57
#: C/crypto/rsa.pod:108 C/crypto/sha.pod:61 C/crypto/threads.pod:171
#: C/crypto/ui.pod:181 C/crypto/ui_compat.pod:46 C/crypto/x509.pod:48
#: C/ssl/SSL_CIPHER_get_name.pod:107
#: C/ssl/SSL_COMP_add_compression_method.pod:66
#: C/ssl/SSL_CTX_add_extra_chain_cert.pod:32 C/ssl/SSL_CTX_add_session.pod:67
#: C/ssl/SSL_CTX_ctrl.pod:30 C/ssl/SSL_CTX_flush_sessions.pod:42
#: C/ssl/SSL_CTX_free.pod:36 C/ssl/SSL_CTX_get_ex_new_index.pod:47
#: C/ssl/SSL_CTX_get_verify_mode.pod:46
#: C/ssl/SSL_CTX_load_verify_locations.pod:115 C/ssl/SSL_CTX_new.pod:89
#: C/ssl/SSL_CTX_sess_number.pod:70 C/ssl/SSL_CTX_sess_set_cache_size.pod:44
#: C/ssl/SSL_CTX_sess_set_get_cb.pod:79 C/ssl/SSL_CTX_sessions.pod:28
#: C/ssl/SSL_CTX_set_cert_store.pod:51
#: C/ssl/SSL_CTX_set_cert_verify_callback.pod:61
#: C/ssl/SSL_CTX_set_cipher_list.pod:62
#: C/ssl/SSL_CTX_set_client_CA_list.pod:87
#: C/ssl/SSL_CTX_set_client_cert_cb.pod:87
#: C/ssl/SSL_CTX_set_default_passwd_cb.pod:71
#: C/ssl/SSL_CTX_set_generate_session_id.pod:140
#: C/ssl/SSL_CTX_set_info_callback.pod:148
#: C/ssl/SSL_CTX_set_max_cert_list.pod:68 C/ssl/SSL_CTX_set_mode.pod:73
#: C/ssl/SSL_CTX_set_msg_callback.pod:90 C/ssl/SSL_CTX_set_options.pod:222
#: C/ssl/SSL_CTX_set_quiet_shutdown.pod:57
#: C/ssl/SSL_CTX_set_session_cache_mode.pod:120
#: C/ssl/SSL_CTX_set_session_id_context.pod:79
#: C/ssl/SSL_CTX_set_ssl_version.pod:55 C/ssl/SSL_CTX_set_timeout.pod:51
#: C/ssl/SSL_CTX_set_tmp_dh_callback.pod:163
#: C/ssl/SSL_CTX_set_tmp_rsa_callback.pod:159 C/ssl/SSL_CTX_set_verify.pod:283
#: C/ssl/SSL_CTX_use_certificate.pod:154 C/ssl/SSL_SESSION_free.pod:48
#: C/ssl/SSL_SESSION_get_ex_new_index.pod:55 C/ssl/SSL_SESSION_get_time.pod:58
#: C/ssl/SSL_accept.pod:68 C/ssl/SSL_alert_type_string.pod:224
#: C/ssl/SSL_connect.pod:65 C/ssl/SSL_do_handshake.pod:69
#: C/ssl/SSL_get_SSL_CTX.pod:22 C/ssl/SSL_get_ciphers.pod:37
#: C/ssl/SSL_get_client_CA_list.pod:47 C/ssl/SSL_get_current_cipher.pod:39
#: C/ssl/SSL_get_default_timeout.pod:33 C/ssl/SSL_get_error.pod:106
#: C/ssl/SSL_get_ex_data_X509_STORE_CTX_idx.pod:56
#: C/ssl/SSL_get_ex_new_index.pod:52 C/ssl/SSL_get_fd.pod:40
#: C/ssl/SSL_get_peer_cert_chain.pod:48 C/ssl/SSL_get_peer_certificate.pod:50
#: C/ssl/SSL_get_rbio.pod:36 C/ssl/SSL_get_session.pod:67
#: C/ssl/SSL_get_verify_result.pod:51 C/ssl/SSL_get_version.pod:42
#: C/ssl/SSL_library_init.pod:47 C/ssl/SSL_load_client_CA_file.pod:57
#: C/ssl/SSL_new.pod:37 C/ssl/SSL_pending.pod:39 C/ssl/SSL_read.pod:109
#: C/ssl/SSL_rstate_string.pod:55 C/ssl/SSL_session_reused.pod:40
#: C/ssl/SSL_set_bio.pod:28 C/ssl/SSL_set_connect_state.pod:47
#: C/ssl/SSL_set_fd.pod:48 C/ssl/SSL_set_session.pod:50
#: C/ssl/SSL_set_shutdown.pod:66 C/ssl/SSL_set_verify_result.pod:32
#: C/ssl/SSL_shutdown.pod:117 C/ssl/SSL_state_string.pod:41
#: C/ssl/SSL_want.pod:73 C/ssl/SSL_write.pod:101 C/ssl/d2i_SSL_SESSION.pod:61
#: C/ssl/ssl.pod:655
msgid "SEE ALSO"
msgstr "VOIR AUSSI"

# type: textblock
#: C/crypto/engine.pod:5
msgid "engine - ENGINE cryptographic module support"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:9
#, no-wrap
msgid ""
" #include <openssl/engine.h>\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:11
#, no-wrap
msgid ""
" ENGINE *ENGINE_get_first(void);\n"
" ENGINE *ENGINE_get_last(void);\n"
" ENGINE *ENGINE_get_next(ENGINE *e);\n"
" ENGINE *ENGINE_get_prev(ENGINE *e);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:16
#, no-wrap
msgid ""
" int ENGINE_add(ENGINE *e);\n"
" int ENGINE_remove(ENGINE *e);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:19
#, no-wrap
msgid ""
" ENGINE *ENGINE_by_id(const char *id);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:21
#, no-wrap
msgid ""
" int ENGINE_init(ENGINE *e);\n"
" int ENGINE_finish(ENGINE *e);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:24
#, no-wrap
msgid ""
" void ENGINE_load_openssl(void);\n"
" void ENGINE_load_dynamic(void);\n"
" #ifndef OPENSSL_NO_STATIC_ENGINE\n"
" void ENGINE_load_4758cca(void);\n"
" void ENGINE_load_aep(void);\n"
" void ENGINE_load_atalla(void);\n"
" void ENGINE_load_chil(void);\n"
" void ENGINE_load_cswift(void);\n"
" void ENGINE_load_gmp(void);\n"
" void ENGINE_load_nuron(void);\n"
" void ENGINE_load_sureware(void);\n"
" void ENGINE_load_ubsec(void);\n"
" #endif\n"
" void ENGINE_load_cryptodev(void);\n"
" void ENGINE_load_builtin_engines(void);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:40 C/crypto/engine.pod:338
#, no-wrap
msgid ""
" void ENGINE_cleanup(void);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:42
#, no-wrap
msgid ""
" ENGINE *ENGINE_get_default_RSA(void);\n"
" ENGINE *ENGINE_get_default_DSA(void);\n"
" ENGINE *ENGINE_get_default_ECDH(void);\n"
" ENGINE *ENGINE_get_default_ECDSA(void);\n"
" ENGINE *ENGINE_get_default_DH(void);\n"
" ENGINE *ENGINE_get_default_RAND(void);\n"
" ENGINE *ENGINE_get_cipher_engine(int nid);\n"
" ENGINE *ENGINE_get_digest_engine(int nid);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:51
#, no-wrap
msgid ""
" int ENGINE_set_default_RSA(ENGINE *e);\n"
" int ENGINE_set_default_DSA(ENGINE *e);\n"
" int ENGINE_set_default_ECDH(ENGINE *e);\n"
" int ENGINE_set_default_ECDSA(ENGINE *e);\n"
" int ENGINE_set_default_DH(ENGINE *e);\n"
" int ENGINE_set_default_RAND(ENGINE *e);\n"
" int ENGINE_set_default_ciphers(ENGINE *e);\n"
" int ENGINE_set_default_digests(ENGINE *e);\n"
" int ENGINE_set_default_string(ENGINE *e, const char *list);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:61
#, no-wrap
msgid ""
" int ENGINE_set_default(ENGINE *e, unsigned int flags);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:63
#, no-wrap
msgid ""
" unsigned int ENGINE_get_table_flags(void);\n"
" void ENGINE_set_table_flags(unsigned int flags);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:66
#, no-wrap
msgid ""
" int ENGINE_register_RSA(ENGINE *e);\n"
" void ENGINE_unregister_RSA(ENGINE *e);\n"
" void ENGINE_register_all_RSA(void);\n"
" int ENGINE_register_DSA(ENGINE *e);\n"
" void ENGINE_unregister_DSA(ENGINE *e);\n"
" void ENGINE_register_all_DSA(void);\n"
" int ENGINE_register_ECDH(ENGINE *e);\n"
" void ENGINE_unregister_ECDH(ENGINE *e);\n"
" void ENGINE_register_all_ECDH(void);\n"
" int ENGINE_register_ECDSA(ENGINE *e);\n"
" void ENGINE_unregister_ECDSA(ENGINE *e);\n"
" void ENGINE_register_all_ECDSA(void);\n"
" int ENGINE_register_DH(ENGINE *e);\n"
" void ENGINE_unregister_DH(ENGINE *e);\n"
" void ENGINE_register_all_DH(void);\n"
" int ENGINE_register_RAND(ENGINE *e);\n"
" void ENGINE_unregister_RAND(ENGINE *e);\n"
" void ENGINE_register_all_RAND(void);\n"
" int ENGINE_register_STORE(ENGINE *e);\n"
" void ENGINE_unregister_STORE(ENGINE *e);\n"
" void ENGINE_register_all_STORE(void);\n"
" int ENGINE_register_ciphers(ENGINE *e);\n"
" void ENGINE_unregister_ciphers(ENGINE *e);\n"
" void ENGINE_register_all_ciphers(void);\n"
" int ENGINE_register_digests(ENGINE *e);\n"
" void ENGINE_unregister_digests(ENGINE *e);\n"
" void ENGINE_register_all_digests(void);\n"
" int ENGINE_register_complete(ENGINE *e);\n"
" int ENGINE_register_all_complete(void);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:96
#, no-wrap
msgid ""
" int ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f)(void));\n"
" int ENGINE_cmd_is_executable(ENGINE *e, int cmd);\n"
" int ENGINE_ctrl_cmd(ENGINE *e, const char *cmd_name,\n"
"         long i, void *p, void (*f)(void), int cmd_optional);\n"
" int ENGINE_ctrl_cmd_string(ENGINE *e, const char *cmd_name, const char *arg,\n"
"         int cmd_optional);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:103
#, no-wrap
msgid ""
" int ENGINE_set_ex_data(ENGINE *e, int idx, void *arg);\n"
" void *ENGINE_get_ex_data(const ENGINE *e, int idx);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:106
#, no-wrap
msgid ""
" int ENGINE_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,\n"
"         CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:109
#, no-wrap
msgid ""
" ENGINE *ENGINE_new(void);\n"
" int ENGINE_free(ENGINE *e);\n"
" int ENGINE_up_ref(ENGINE *e);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:113
#, no-wrap
msgid ""
" int ENGINE_set_id(ENGINE *e, const char *id);\n"
" int ENGINE_set_name(ENGINE *e, const char *name);\n"
" int ENGINE_set_RSA(ENGINE *e, const RSA_METHOD *rsa_meth);\n"
" int ENGINE_set_DSA(ENGINE *e, const DSA_METHOD *dsa_meth);\n"
" int ENGINE_set_ECDH(ENGINE *e, const ECDH_METHOD *dh_meth);\n"
" int ENGINE_set_ECDSA(ENGINE *e, const ECDSA_METHOD *dh_meth);\n"
" int ENGINE_set_DH(ENGINE *e, const DH_METHOD *dh_meth);\n"
" int ENGINE_set_RAND(ENGINE *e, const RAND_METHOD *rand_meth);\n"
" int ENGINE_set_STORE(ENGINE *e, const STORE_METHOD *rand_meth);\n"
" int ENGINE_set_destroy_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR destroy_f);\n"
" int ENGINE_set_init_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR init_f);\n"
" int ENGINE_set_finish_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR finish_f);\n"
" int ENGINE_set_ctrl_function(ENGINE *e, ENGINE_CTRL_FUNC_PTR ctrl_f);\n"
" int ENGINE_set_load_privkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpriv_f);\n"
" int ENGINE_set_load_pubkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpub_f);\n"
" int ENGINE_set_ciphers(ENGINE *e, ENGINE_CIPHERS_PTR f);\n"
" int ENGINE_set_digests(ENGINE *e, ENGINE_DIGESTS_PTR f);\n"
" int ENGINE_set_flags(ENGINE *e, int flags);\n"
" int ENGINE_set_cmd_defns(ENGINE *e, const ENGINE_CMD_DEFN *defns);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:133
#, no-wrap
msgid ""
" const char *ENGINE_get_id(const ENGINE *e);\n"
" const char *ENGINE_get_name(const ENGINE *e);\n"
" const RSA_METHOD *ENGINE_get_RSA(const ENGINE *e);\n"
" const DSA_METHOD *ENGINE_get_DSA(const ENGINE *e);\n"
" const ECDH_METHOD *ENGINE_get_ECDH(const ENGINE *e);\n"
" const ECDSA_METHOD *ENGINE_get_ECDSA(const ENGINE *e);\n"
" const DH_METHOD *ENGINE_get_DH(const ENGINE *e);\n"
" const RAND_METHOD *ENGINE_get_RAND(const ENGINE *e);\n"
" const STORE_METHOD *ENGINE_get_STORE(const ENGINE *e);\n"
" ENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e);\n"
" ENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e);\n"
" ENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e);\n"
" ENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e);\n"
" ENGINE_LOAD_KEY_PTR ENGINE_get_load_privkey_function(const ENGINE *e);\n"
" ENGINE_LOAD_KEY_PTR ENGINE_get_load_pubkey_function(const ENGINE *e);\n"
" ENGINE_CIPHERS_PTR ENGINE_get_ciphers(const ENGINE *e);\n"
" ENGINE_DIGESTS_PTR ENGINE_get_digests(const ENGINE *e);\n"
" const EVP_CIPHER *ENGINE_get_cipher(ENGINE *e, int nid);\n"
" const EVP_MD *ENGINE_get_digest(ENGINE *e, int nid);\n"
" int ENGINE_get_flags(const ENGINE *e);\n"
" const ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:155
#, no-wrap
msgid ""
" EVP_PKEY *ENGINE_load_private_key(ENGINE *e, const char *key_id,\n"
"     UI_METHOD *ui_method, void *callback_data);\n"
" EVP_PKEY *ENGINE_load_public_key(ENGINE *e, const char *key_id,\n"
"     UI_METHOD *ui_method, void *callback_data);\n"
"\n"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:160
#, no-wrap
msgid ""
" void ENGINE_add_conf_module(void);\n"
"\n"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:164
msgid ""
"These functions create, manipulate, and use cryptographic modules in the "
"form of B<ENGINE> objects. These objects act as containers for "
"implementations of cryptographic algorithms, and support a reference-counted "
"mechanism to allow them to be dynamically loaded in and out of the running "
"application."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:170
msgid ""
"The cryptographic functionality that can be provided by an B<ENGINE> "
"implementation includes the following abstractions;"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:173
#, no-wrap
msgid ""
" RSA_METHOD - for providing alternative RSA implementations\n"
" DSA_METHOD, DH_METHOD, RAND_METHOD, ECDH_METHOD, ECDSA_METHOD,\n"
"       STORE_METHOD - similarly for other OpenSSL APIs\n"
" EVP_CIPHER - potentially multiple cipher algorithms (indexed by 'nid')\n"
" EVP_DIGEST - potentially multiple hash algorithms (indexed by 'nid')\n"
" key-loading - loading public and/or private EVP_PKEY keys\n"
"\n"
msgstr ""

# type: =head2
#: C/crypto/engine.pod:180
msgid "Reference counting and handles"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:182
msgid ""
"Due to the modular nature of the ENGINE API, pointers to ENGINEs need to be "
"treated as handles - ie. not only as pointers, but also as references to the "
"underlying ENGINE object. Ie. one should obtain a new reference when making "
"copies of an ENGINE pointer if the copies will be used (and released) "
"independantly."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:188
msgid ""
"ENGINE objects have two levels of reference-counting to match the way in "
"which the objects are used. At the most basic level, each ENGINE pointer is "
"inherently a B<structural> reference - a structural reference is required to "
"use the pointer value at all, as this kind of reference is a guarantee that "
"the structure can not be deallocated until the reference is released."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:194
msgid ""
"However, a structural reference provides no guarantee that the ENGINE is "
"initiliased and able to use any of its cryptographic implementations. Indeed "
"it's quite possible that most ENGINEs will not initialise at all in typical "
"environments, as ENGINEs are typically used to support specialised hardware. "
"To use an ENGINE's functionality, you need a B<functional> reference. This "
"kind of reference can be considered a specialised form of structural "
"reference, because each functional reference implicitly contains a "
"structural reference as well - however to avoid difficult-to-find "
"programming bugs, it is recommended to treat the two kinds of reference "
"independantly. If you have a functional reference to an ENGINE, you have a "
"guarantee that the ENGINE has been initialised ready to perform "
"cryptographic operations and will remain uninitialised until after you have "
"released your reference."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:208
msgid "I<Structural references>"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:210
msgid ""
"This basic type of reference is used for instantiating new ENGINEs, "
"iterating across OpenSSL's internal linked-list of loaded ENGINEs, reading "
"information about an ENGINE, etc. Essentially a structural reference is "
"sufficient if you only need to query or manipulate the data of an ENGINE "
"implementation rather than use its functionality."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:216
msgid ""
"The ENGINE_new() function returns a structural reference to a new (empty)  "
"ENGINE object. There are other ENGINE API functions that return structural "
"references such as; ENGINE_by_id(), ENGINE_get_first(), ENGINE_get_last(), "
"ENGINE_get_next(), ENGINE_get_prev(). All structural references should be "
"released by a corresponding to call to the ENGINE_free() function - the "
"ENGINE object itself will only actually be cleaned up and deallocated when "
"the last structural reference is released."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:224
msgid ""
"It should also be noted that many ENGINE API function calls that accept a "
"structural reference will internally obtain another reference - typically "
"this happens whenever the supplied ENGINE will be needed by OpenSSL after "
"the function has returned. Eg. the function to add a new ENGINE to OpenSSL's "
"internal list is ENGINE_add() - if this function returns success, then "
"OpenSSL will have stored a new structural reference internally so the caller "
"is still responsible for freeing their own reference with ENGINE_free() when "
"they are finished with it. In a similar way, some functions will "
"automatically release the structural reference passed to it if part of the "
"function's job is to do so. Eg. the ENGINE_get_next() and ENGINE_get_prev() "
"functions are used for iterating across the internal ENGINE list - they will "
"return a new structural reference to the next (or previous) ENGINE in the "
"list or NULL if at the end (or beginning) of the list, but in either case "
"the structural reference passed to the function is released on behalf of the "
"caller."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:240
msgid ""
"To clarify a particular function's handling of references, one should always "
"consult that function's documentation \"man\" page, or failing that the "
"openssl/engine.h header file includes some hints."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:244
msgid "I<Functional references>"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:246
msgid ""
"As mentioned, functional references exist when the cryptographic "
"functionality of an ENGINE is required to be available. A functional "
"reference can be obtained in one of two ways; from an existing structural "
"reference to the required ENGINE, or by asking OpenSSL for the default "
"operational ENGINE for a given cryptographic purpose."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:252
msgid ""
"To obtain a functional reference from an existing structural reference, call "
"the ENGINE_init() function. This returns zero if the ENGINE was not already "
"operational and couldn't be successfully initialised (eg. lack of system "
"drivers, no special hardware attached, etc), otherwise it will return non-"
"zero to indicate that the ENGINE is now operational and will have allocated "
"a new B<functional> reference to the ENGINE. All functional references are "
"released by calling ENGINE_finish() (which removes the implicit structural "
"reference as well)."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:261
msgid ""
"The second way to get a functional reference is by asking OpenSSL for a "
"default implementation for a given task, eg. by ENGINE_get_default_RSA(), "
"ENGINE_get_default_cipher_engine(), etc. These are discussed in the next "
"section, though they are not usually required by application programmers as "
"they are used automatically when creating and using the relevant algorithm-"
"specific types in OpenSSL, such as RSA, DSA, EVP_CIPHER_CTX, etc."
msgstr ""

# type: =head2
#: C/crypto/engine.pod:268
msgid "Default implementations"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:270
msgid ""
"For each supported abstraction, the ENGINE code maintains an internal table "
"of state to control which implementations are available for a given "
"abstraction and which should be used by default. These implementations are "
"registered in the tables and indexed by an 'nid' value, because abstractions "
"like EVP_CIPHER and EVP_DIGEST support many distinct algorithms and modes, "
"and ENGINEs can support arbitrarily many of them.  In the case of other "
"abstractions like RSA, DSA, etc, there is only one \"algorithm\" so all "
"implementations implicitly register using the same 'nid' index."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:280
msgid ""
"When a default ENGINE is requested for a given abstraction/algorithm/mode, "
"(eg.  when calling RSA_new_method(NULL)), a \"get_default\" call will be "
"made to the ENGINE subsystem to process the corresponding state table and "
"return a functional reference to an initialised ENGINE whose implementation "
"should be used. If no ENGINE should (or can) be used, it will return NULL "
"and the caller will operate with a NULL ENGINE handle - this usually equates "
"to using the conventional software implementation. In the latter case, "
"OpenSSL will from then on behave the way it used to before the ENGINE API "
"existed."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:289
msgid ""
"Each state table has a flag to note whether it has processed this "
"\"get_default\" query since the table was last modified, because to process "
"this question it must iterate across all the registered ENGINEs in the table "
"trying to initialise each of them in turn, in case one of them is "
"operational. If it returns a functional reference to an ENGINE, it will also "
"cache another reference to speed up processing future queries (without "
"needing to iterate across the table). Likewise, it will cache a NULL "
"response if no ENGINE was available so that future queries won't repeat the "
"same iteration unless the state table changes. This behaviour can also be "
"changed; if the ENGINE_TABLE_FLAG_NOINIT flag is set (using "
"ENGINE_set_table_flags()), no attempted initialisations will take place, "
"instead the only way for the state table to return a non-NULL ENGINE to the "
"\"get_default\" query will be if one is expressly set in the table. Eg.  "
"ENGINE_set_default_RSA() does the same job as ENGINE_register_RSA() except "
"that it also sets the state table's cached response for the \"get_default\" "
"query. In the case of abstractions like EVP_CIPHER, where implementations "
"are indexed by 'nid', these flags and cached-responses are distinct for each "
"'nid' value."
msgstr ""

# type: =head2
#: C/crypto/engine.pod:308
msgid "Application requirements"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:310
msgid ""
"This section will explain the basic things an application programmer should "
"support to make the most useful elements of the ENGINE functionality "
"available to the user. The first thing to consider is whether the programmer "
"wishes to make alternative ENGINE modules available to the application and "
"user. OpenSSL maintains an internal linked list of \"visible\" ENGINEs from "
"which it has to operate - at start-up, this list is empty and in fact if an "
"application does not call any ENGINE API calls and it uses static linking "
"against openssl, then the resulting application binary will not contain any "
"alternative ENGINE code at all. So the first consideration is whether any/"
"all available ENGINE implementations should be made visible to OpenSSL - "
"this is controlled by calling the various \"load\" functions, eg."
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:323
#, no-wrap
msgid ""
" /* Make the \"dynamic\" ENGINE available */\n"
" void ENGINE_load_dynamic(void);\n"
" /* Make the CryptoSwift hardware acceleration support available */\n"
" void ENGINE_load_cswift(void);\n"
" /* Make support for nCipher's \"CHIL\" hardware available */\n"
" void ENGINE_load_chil(void);\n"
" ...\n"
" /* Make ALL ENGINE implementations bundled with OpenSSL available */\n"
" void ENGINE_load_builtin_engines(void);\n"
"\n"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:333
msgid ""
"Having called any of these functions, ENGINE objects would have been "
"dynamically allocated and populated with these implementations and linked "
"into OpenSSL's internal linked list. At this point it is important to "
"mention an important API function;"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:340
msgid ""
"If no ENGINE API functions are called at all in an application, then there "
"are no inherent memory leaks to worry about from the ENGINE functionality, "
"however if any ENGINEs are loaded, even if they are never registered or "
"used, it is necessary to use the ENGINE_cleanup() function to "
"correspondingly cleanup before program exit, if the caller wishes to avoid "
"memory leaks. This mechanism uses an internal callback registration table so "
"that any ENGINE API functionality that knows it requires cleanup can "
"register its cleanup details to be called during ENGINE_cleanup(). This "
"approach allows ENGINE_cleanup() to clean up after any ENGINE functionality "
"at all that your program uses, yet doesn't automatically create linker "
"dependencies to all possible ENGINE functionality - only the cleanup "
"callbacks required by the functionality you do use will be required by the "
"linker."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:354
msgid ""
"The fact that ENGINEs are made visible to OpenSSL (and thus are linked into "
"the program and loaded into memory at run-time) does not mean they are "
"\"registered\" or called into use by OpenSSL automatically - that behaviour "
"is something for the application to control. Some applications will want to "
"allow the user to specify exactly which ENGINE they want used if any is to "
"be used at all. Others may prefer to load all support and have OpenSSL "
"automatically use at run-time any ENGINE that is able to successfully "
"initialise - ie. to assume that this corresponds to acceleration hardware "
"attached to the machine or some such thing. There are probably numerous "
"other ways in which applications may prefer to handle things, so we will "
"simply illustrate the consequences as they apply to a couple of simple cases "
"and leave developers to consider these and the source code to openssl's "
"builtin utilities as guides."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:368
msgid "I<Using a specific ENGINE implementation>"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:370
msgid ""
"Here we'll assume an application has been configured by its user or admin to "
"want to use the \"ACME\" ENGINE if it is available in the version of OpenSSL "
"the application was compiled with. If it is available, it should be used by "
"default for all RSA, DSA, and symmetric cipher operation, otherwise OpenSSL "
"should use its builtin software as per usual. The following code illustrates "
"how to approach this;"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:377
#, no-wrap
msgid ""
" ENGINE *e;\n"
" const char *engine_id = \"ACME\";\n"
" ENGINE_load_builtin_engines();\n"
" e = ENGINE_by_id(engine_id);\n"
" if(!e)\n"
"     /* the engine isn't available */\n"
"     return;\n"
" if(!ENGINE_init(e)) {\n"
"     /* the engine couldn't initialise, release 'e' */\n"
"     ENGINE_free(e);\n"
"     return;\n"
" }\n"
" if(!ENGINE_set_default_RSA(e))\n"
"     /* This should only happen when 'e' can't initialise, but the previous\n"
"      * statement suggests it did. */\n"
"     abort();\n"
" ENGINE_set_default_DSA(e);\n"
" ENGINE_set_default_ciphers(e);\n"
" /* Release the functional reference from ENGINE_init() */\n"
" ENGINE_finish(e);\n"
" /* Release the structural reference from ENGINE_by_id() */\n"
" ENGINE_free(e);\n"
"\n"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:400
msgid "I<Automatically using builtin ENGINE implementations>"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:402
msgid ""
"Here we'll assume we want to load and register all ENGINE implementations "
"bundled with OpenSSL, such that for any cryptographic algorithm required by "
"OpenSSL - if there is an ENGINE that implements it and can be initialise, it "
"should be used. The following code illustrates how this can work;"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:407
#, no-wrap
msgid ""
" /* Load all bundled ENGINEs into memory and make them visible */\n"
" ENGINE_load_builtin_engines();\n"
" /* Register all of them for every algorithm they collectively implement */\n"
" ENGINE_register_all_complete();\n"
"\n"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:412
msgid ""
"That's all that's required. Eg. the next time OpenSSL tries to set up an RSA "
"key, any bundled ENGINEs that implement RSA_METHOD will be passed to "
"ENGINE_init() and if any of those succeed, that ENGINE will be set as the "
"default for RSA use from then on."
msgstr ""

# type: =head2
#: C/crypto/engine.pod:417
msgid "Advanced configuration support"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:419
msgid ""
"There is a mechanism supported by the ENGINE framework that allows each "
"ENGINE implementation to define an arbitrary set of configuration \"commands"
"\" and expose them to OpenSSL and any applications based on OpenSSL. This "
"mechanism is entirely based on the use of name-value pairs and assumes ASCII "
"input (no unicode or UTF for now!), so it is ideal if applications want to "
"provide a transparent way for users to provide arbitrary configuration "
"\"directives\" directly to such ENGINEs. It is also possible for the "
"application to dynamically interrogate the loaded ENGINE implementations for "
"the names, descriptions, and input flags of their available \"control "
"commands\", providing a more flexible configuration scheme. However, if the "
"user is expected to know which ENGINE device he/she is using (in the case of "
"specialised hardware, this goes without saying)  then applications may not "
"need to concern themselves with discovering the supported control commands "
"and simply prefer to pass settings into ENGINEs exactly as they are provided "
"by the user."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:435
msgid ""
"Before illustrating how control commands work, it is worth mentioning what "
"they are typically used for. Broadly speaking there are two uses for control "
"commands; the first is to provide the necessary details to the "
"implementation (which may know nothing at all specific to the host system)  "
"so that it can be initialised for use. This could include the path to any "
"driver or config files it needs to load, required network addresses, smart-"
"card identifiers, passwords to initialise protected devices, logging "
"information, etc etc. This class of commands typically needs to be passed to "
"an ENGINE B<before> attempting to initialise it, ie. before calling "
"ENGINE_init(). The other class of commands consist of settings or operations "
"that tweak certain behaviour or cause certain operations to take place, and "
"these commands may work either before or after ENGINE_init(), or in some "
"cases both. ENGINE implementations should provide indications of this in the "
"descriptions attached to builtin control commands and/or in external product "
"documentation."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:451
msgid "I<Issuing control commands to an ENGINE>"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:453
msgid ""
"Let's illustrate by example; a function for which the caller supplies the "
"name of the ENGINE it wishes to use, a table of string-pairs for use before "
"initialisation, and another table for use after initialisation. Note that "
"the string-pairs used for control commands consist of a command \"name\" "
"followed by the command \"parameter\" - the parameter could be NULL in some "
"cases but the name can not. This function should initialise the ENGINE "
"(issuing the \"pre\" commands beforehand and the \"post\" commands "
"afterwards)  and set it as the default for everything except RAND and then "
"return a boolean success or failure."
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:463
#, no-wrap
msgid ""
" int generic_load_engine_fn(const char *engine_id,\n"
"                            const char **pre_cmds, int pre_num,\n"
"                            const char **post_cmds, int post_num)\n"
" {\n"
"     ENGINE *e = ENGINE_by_id(engine_id);\n"
"     if(!e) return 0;\n"
"     while(pre_num--) {\n"
"         if(!ENGINE_ctrl_cmd_string(e, pre_cmds[0], pre_cmds[1], 0)) {\n"
"             fprintf(stderr, \"Failed command (%s - %s:%s)\\n\", engine_id,\n"
"                 pre_cmds[0], pre_cmds[1] ? pre_cmds[1] : \"(NULL)\");\n"
"             ENGINE_free(e);\n"
"             return 0;\n"
"         }\n"
"\t pre_cmds += 2;\n"
"     }\n"
"     if(!ENGINE_init(e)) {\n"
"         fprintf(stderr, \"Failed initialisation\\n\");\n"
"         ENGINE_free(e);\n"
"         return 0;\n"
"     }\n"
"     /* ENGINE_init() returned a functional reference, so free the structural\n"
"      * reference from ENGINE_by_id(). */\n"
"     ENGINE_free(e);\n"
"     while(post_num--) {\n"
"         if(!ENGINE_ctrl_cmd_string(e, post_cmds[0], post_cmds[1], 0)) {\n"
"             fprintf(stderr, \"Failed command (%s - %s:%s)\\n\", engine_id,\n"
"                 post_cmds[0], post_cmds[1] ? post_cmds[1] : \"(NULL)\");\n"
"             ENGINE_finish(e);\n"
"             return 0;\n"
"         }\n"
"\t post_cmds += 2;\n"
"     }\n"
"     ENGINE_set_default(e, ENGINE_METHOD_ALL & ~ENGINE_METHOD_RAND);\n"
"     /* Success */\n"
"     return 1;\n"
" }\n"
"\n"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:500
msgid ""
"Note that ENGINE_ctrl_cmd_string() accepts a boolean argument that can relax "
"the semantics of the function - if set non-zero it will only return failure "
"if the ENGINE supported the given command name but failed while executing "
"it, if the ENGINE doesn't support the command name it will simply return "
"success without doing anything. In this case we assume the user is only "
"supplying commands specific to the given ENGINE so we set this to FALSE."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:508
msgid "I<Discovering supported control commands>"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:510
msgid ""
"It is possible to discover at run-time the names, numerical-ids, "
"descriptions and input parameters of the control commands supported by an "
"ENGINE using a structural reference. Note that some control commands are "
"defined by OpenSSL itself and it will intercept and handle these control "
"commands on behalf of the ENGINE, ie. the ENGINE's ctrl() handler is not "
"used for the control command.  openssl/engine.h defines an index, "
"ENGINE_CMD_BASE, that all control commands implemented by ENGINEs should be "
"numbered from. Any command value lower than this symbol is considered a "
"\"generic\" command is handled directly by the OpenSSL core routines."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:520
msgid ""
"It is using these \"core\" control commands that one can discover the the "
"control commands implemented by a given ENGINE, specifically the commands;"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:523
#, no-wrap
msgid ""
" #define ENGINE_HAS_CTRL_FUNCTION\t\t10\n"
" #define ENGINE_CTRL_GET_FIRST_CMD_TYPE\t\t11\n"
" #define ENGINE_CTRL_GET_NEXT_CMD_TYPE\t\t12\n"
" #define ENGINE_CTRL_GET_CMD_FROM_NAME\t\t13\n"
" #define ENGINE_CTRL_GET_NAME_LEN_FROM_CMD\t14\n"
" #define ENGINE_CTRL_GET_NAME_FROM_CMD\t\t15\n"
" #define ENGINE_CTRL_GET_DESC_LEN_FROM_CMD\t16\n"
" #define ENGINE_CTRL_GET_DESC_FROM_CMD\t\t17\n"
" #define ENGINE_CTRL_GET_CMD_FLAGS\t\t18\n"
"\n"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:533
msgid ""
"Whilst these commands are automatically processed by the OpenSSL framework "
"code, they use various properties exposed by each ENGINE to process these "
"queries. An ENGINE has 3 properties it exposes that can affect how this "
"behaves; it can supply a ctrl() handler, it can specify "
"ENGINE_FLAGS_MANUAL_CMD_CTRL in the ENGINE's flags, and it can expose an "
"array of control command descriptions.  If an ENGINE specifies the "
"ENGINE_FLAGS_MANUAL_CMD_CTRL flag, then it will simply pass all these \"core"
"\" control commands directly to the ENGINE's ctrl()  handler (and thus, it "
"must have supplied one), so it is up to the ENGINE to reply to these "
"\"discovery\" commands itself. If that flag is not set, then the OpenSSL "
"framework code will work with the following rules;"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:544
#, no-wrap
msgid ""
" if no ctrl() handler supplied;\n"
"     ENGINE_HAS_CTRL_FUNCTION returns FALSE (zero),\n"
"     all other commands fail.\n"
" if a ctrl() handler was supplied but no array of control commands;\n"
"     ENGINE_HAS_CTRL_FUNCTION returns TRUE,\n"
"     all other commands fail.\n"
" if a ctrl() handler and array of control commands was supplied;\n"
"     ENGINE_HAS_CTRL_FUNCTION returns TRUE,\n"
"     all other commands proceed processing ...\n"
"\n"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:554
msgid ""
"If the ENGINE's array of control commands is empty then all other commands "
"will fail, otherwise; ENGINE_CTRL_GET_FIRST_CMD_TYPE returns the identifier "
"of the first command supported by the ENGINE, ENGINE_GET_NEXT_CMD_TYPE takes "
"the identifier of a command supported by the ENGINE and returns the next "
"command identifier or fails if there are no more, ENGINE_CMD_FROM_NAME takes "
"a string name for a command and returns the corresponding identifier or "
"fails if no such command name exists, and the remaining commands take a "
"command identifier and return properties of the corresponding commands. All "
"except ENGINE_CTRL_GET_FLAGS return the string length of a command name or "
"description, or populate a supplied character buffer with a copy of the "
"command name or description. ENGINE_CTRL_GET_FLAGS returns a bitwise-OR'd "
"mask of the following possible values;"
msgstr ""

# type: verbatim
#: C/crypto/engine.pod:567
#, no-wrap
msgid ""
" #define ENGINE_CMD_FLAG_NUMERIC\t\t(unsigned int)0x0001\n"
" #define ENGINE_CMD_FLAG_STRING\t\t\t(unsigned int)0x0002\n"
" #define ENGINE_CMD_FLAG_NO_INPUT\t\t(unsigned int)0x0004\n"
" #define ENGINE_CMD_FLAG_INTERNAL\t\t(unsigned int)0x0008\n"
"\n"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:572
msgid ""
"If the ENGINE_CMD_FLAG_INTERNAL flag is set, then any other flags are purely "
"informational to the caller - this flag will prevent the command being "
"usable for any higher-level ENGINE functions such as ENGINE_ctrl_cmd_string"
"().  \"INTERNAL\" commands are not intended to be exposed to text-based "
"configuration by applications, administrations, users, etc. These can "
"support arbitrary operations via ENGINE_ctrl(), including passing to and/or "
"from the control commands data of any arbitrary type. These commands are "
"supported in the discovery mechanisms simply to allow applications "
"determinie if an ENGINE supports certain specific commands it might want to "
"use (eg. application \"foo\" might query various ENGINEs to see if they "
"implement \"FOO_GET_VENDOR_LOGO_GIF\" - and ENGINE could therefore decide "
"whether or not to support this \"foo\"-specific extension)."
msgstr ""

# type: =head2
#: C/crypto/engine.pod:585
msgid "Future developments"
msgstr ""

# type: textblock
#: C/crypto/engine.pod:587
msgid ""
"The ENGINE API and internal architecture is currently being reviewed. Slated "
"for possible release in 0.9.8 is support for transparent loading of \"dynamic"
"\" ENGINEs (built as self-contained shared-libraries). This would allow "
"ENGINE implementations to be provided independantly of OpenSSL libraries and/"
"or OpenSSL-based applications, and would also remove any requirement for "
"applications to explicitly use the \"dynamic\" ENGINE to bind to shared-"
"library implementations."
msgstr ""

# type: textblock
#: C/crypto/engine.pod:597
msgid "L<rsa(3)|rsa(3)>, L<dsa(3)|dsa(3)>, L<dh(3)|dh(3)>, L<rand(3)|rand(3)>"
msgstr ""
